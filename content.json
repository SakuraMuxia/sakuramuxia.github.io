{"meta":{"title":"慢一点，才更快 | 雨落","subtitle":"","description":"","author":null,"url":"http://SakuraMuxia.github.io","root":"/"},"pages":[{"title":"donate","date":"2020-02-13T15:13:05.000Z","updated":"2021-03-28T09:45:37.294Z","comments":false,"path":"donate/index.html","permalink":"http://sakuramuxia.github.io/donate/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-04-20T16:00:00.000Z","updated":"2021-03-28T09:12:56.615Z","comments":false,"path":"categories/index.html","permalink":"http://sakuramuxia.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-02-12T14:14:36.000Z","updated":"2021-05-03T06:11:07.657Z","comments":false,"path":"about/index.html","permalink":"http://sakuramuxia.github.io/about/index.html","excerpt":"","text":"[れんげ] 与&nbsp; SakuraMuxia&nbsp; （ ） 对话中... bot_ui_ini()"},{"title":"links","date":"2020-02-13T15:11:06.000Z","updated":"2021-03-28T09:35:28.491Z","comments":true,"path":"links/index.html","permalink":"http://sakuramuxia.github.io/links/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-04-21T12:17:58.000Z","updated":"2021-05-03T06:10:36.292Z","comments":true,"path":"comment/index.html","permalink":"http://sakuramuxia.github.io/comment/index.html","excerpt":"","text":"念两句诗 挑选中... jinrishici.load(function(result) { poem.innerHTML = result.data.content info.innerHTML = '【' + result.data.origin.dynasty + '】' + result.data.origin.author + '《' + result.data.origin.title + '》' document.getElementById(\"poem\").value(poem); document.getElementById(\"info\").value(info); });"},{"title":"music","date":"2021-04-09T11:26:31.000Z","updated":"2021-05-03T06:11:56.371Z","comments":false,"path":"music/index.html","permalink":"http://sakuramuxia.github.io/music/index.html","excerpt":"","text":"每日一言 获取中..."},{"title":"tags","date":"2020-02-13T12:24:16.000Z","updated":"2021-03-28T10:08:19.939Z","comments":false,"path":"tags/index.html","permalink":"http://sakuramuxia.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HCNP学习笔记7","slug":"hcnp07","date":"2021-05-20T05:14:00.000Z","updated":"2021-05-20T15:07:21.006Z","comments":true,"path":"post/b97.html","link":"","permalink":"http://sakuramuxia.github.io/post/b97.html","excerpt":"","text":"VRRP配置实例 VRRP应用场景主备备份 负载均衡 综合实验 实验基本环境要求： 1、配置交换和路由保证全网通 2、配置VRRP，VLAN10的流量优先走SW1，VLAN20的流量优先走SW2 3、配置VRRP监视上行链路 VLAN 10： 192.168.10.0 /24 GW： 192.168.10.254 //虚拟网关 VLAN 20： 192.168.20.0 /24 GW： 192.168.20.254 //虚拟网关 实际配置SW1配置sys sys SW1 vlan batch 10 20 int e0/0/1 p l a p d v 10 int e0/0/2 p l a p d v 20 int e0/0/3 p l t p t a v 10 20 int e0/0/4 p l t p t a v 10 20 int e0/0/3 //进入接口 stp config-digest-snoop //接口使能 STP cost 20000 //配置stp开销 stp priority 8192 // ================== dis p v //验证vlan配置 dis stp brief //验证SW1的g0/0/3和g0/0/4口为转发状态 dis stp //查看STP配置 STP disable //关闭STP ，原因在于下方图片，当Master挂了之后，由于STP收敛的时间较长，会造成数据包丢包，所以要关闭STP服务。 //百兆口的开销是200000，千兆口是20000，开销一样更改优先级，优先级的默认值32768，不能改0 或 4096，因为可能和SW2和SW3一样，优先级的ID为4096的倍数。 SW2配置sys sys SW2 vlan batch 10 20 int g0/0/1 p l t p t a v 10 20 int vlanif 10 IP add 192.168.10.252 24 int vlanif 20 ip add 192.168.20.252 24 STP root primary //配置SW2为主根桥 vlan 24 int g0/0/2 p l a p d v 24 int vlanif24 ip add 192.168.24.2 24 ospf 1 router-id 2.2.2.2 a 0 network 192.168.24.0 0.0.0.255 network 192.168.34.0 0.0.0.255 network 192.168.10.0 0.0.0.255 network 192.168.20.0 0.0.0.255 int g0/0/2 stp disable //关闭g0/0/2口的STP dhcp enable int vlanif 10 //进入VLAN10接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4//IP地址配制成目标设备的地址就行，中继可以写多个。 dhcp enable int vlanif 20 //进入VLAN20接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4/ int vlanif 10//进入vlan10，因为DHCP是应用层协议，肯定在虚拟三层口进行配置，为vlan10提供冗余网关 //undo portswitch 默认接口是二层，输入这个命令后，接口变成三层口，无法配置二层的配置。输入portswitch变成二层口。 //一个接口下面可以配置多个组，不同的接口可以配置不同的组，不同的接口可以配置相同的组，这里的组代表的是一个网关。 vrrp vrid 10 virtual-ip 192.168.10.254 //配置虚拟IP int vlanif 20 vrrp vrid 20 virtual-ip 192.168.20.254 dis vrrp brief //验证VRRP配置，其实这里两边只要有一边有虚拟IP，链路就通了。 arp - a //查看arp dis mac-ad //查看MAC地址，接入层交换机。 STP disable //关闭STP dis ospf peer b //查看ospf路由邻居，考虑路由层面回包的的问题，因为当左边的交换机down掉了，虽然VRRP会直接走右边，但是数据包回来的路径还是从左边回来的，所以要等路由收敛，收敛完成后，能从右边回包，完成通信，能够很快切换。 int vlanif10 vrrp vrid 10 priority 200 //配置优先级，使VLAN10成为负载均衡，254配置不了，后边说。 //当网络拥塞了，可能会频繁的切换Master，或者backup，所以要配置抢占延迟。备的抢占最好设置成0秒，主的抢占设置成5秒。默认开启抢占延迟。 int vlanif10 VRRP vrid 10 track int g0/0/2 reducked 101 //配置接口监视自动减优先级 ======================== //注意在这种情况下，SW1和SW2两个交换机都做了DHCP服务器，网关做了冗余，这两个交换机都要提供DHCP服务，以防一个挂了之后，主机要重新申请地址，这个时候就会出现一个分配的问题，比如说SW1分配一个IP地址给PC1，当SW1挂了之后，VLAN10中的主机于是就向SW2申请地址，SW2发现有个地址没有分配出去，就把IP地址分配出去，但是这个就会出现分配出相同的地址，因此微软推荐了一种方法就是IP地址池55开73开，保证地址不冲突。在实际的生产环境中，我们一般都会使用一个独立的服务器，或者是核心的交换机，来同一的分配，于是SW2SW3就要配置中继DHCPRelay,于是建议的方法是使用独立设备做Relay配置。 //DHCP要配置全局的地址池，不是接口地址池。而且全局地址池已经写好了，网关是254，不然以后拿到的网关还是252。所以DHCP放在SW2或SW3技术上可以，但是非常不便，还会有一些问题，所以还是放在一个独立的设备上。不建议 SW3配置sys sys SW3 vlan batch 10 20 int g0/0/1 p l t p t a v 10 20 int vlanif 10 IP add 192.168.10.253 24 int vlanif 20 ip add 192.168.20.253 24 STP root secondary //配置SW3为备份根桥 vlan 34 int g0/0/2 p l a p d v 34 int vlanif34 ip add 192.168.34.3 24 ospf 1 router-id 3.3.3.3 a 0 network 192.168.24.0 0.0.0.255 network 192.168.34.0 0.0.0.255 network 192.168.10.0 0.0.0.255 network 192.168.20.0 0.0.0.255 int g0/0/2 stp disable dis stp b //验证STP配置 dhcp enable int vlanif 10 //进入VLAN10接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4 dhcp enable int vlanif 20 //进入VLAN10接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4 int vlanif 10 vrrp vrid 10 virtual-ip 192.168.10.254 int vlanif 20 vrrp vrid 20 virtual-ip 192.168.20.254 STP disable //关闭STP服务 VRRP vrid 10 track int g0/0/2 reducked 101 //监视跟踪Master 说明： 如果SW4为根桥，则很有可能会阻塞SW1到SW3之间的链路，使用STP让SW2成为根桥，在实际生产环境中应该使用MSTP，SW3成为备份根桥，让STP阻塞SW4和SW3之间的链路。 SW4配置//SW4的网关做一下DHCP //上边的接口，我们应该处理成三层的接口，模拟器不支持物理三层，真机可以，所以我们用二层物理口+三层虚拟口， sys sys SW4 vlan bat 24 34 int g0/0/1 p l a p d v 24 int g0/0/2 p l a p d v 34 int vlanif24 ip add 192.168.24.4 24 int vlanif34 ip add 192.168.34.4 24 ospf 1 router-id 4.4.4.4 a 0 network 192.168.24.0 0.0.0.255 network 192.168.34.0 0.0.0.255 network 192.168.100.0 0.0.0.255 STP disable //关闭STP，因为他是核心交换机，基本都属于三层，没有二层链路，可以直接关闭， dis stp b //查看STP状态 IP pool vlan10 //创建VLAN10的IP地址池，为VLAN10提供DHCP服务，VLAN10 名字自定义 network 192.168.10.0 mask 255.255.255.0 //当为默认掩码时可以直接打回车，如24位 gateway-list 192.168.10.254 //你给他分配的网关是到时候真正要用到的网关。不是252，不是253，因为我们创建虚拟设备是254， IP pool VLAN20 network 192.168.20.0 gateway-list 192.168.20.254 ip pool vlan10//进入VLAN10地址池 excluded-ip-address 192.168.10.252 192.168.10.253 //排除地址池，因为可能会分配252,253的地址给主机就会造成冲突， d th dhcp enable //dhcp开启 int vlanif24//进入VLAN24 DHCP select global //配置全局 int vlanif34 dhcp select global//配置全局 VLAN 100 p l a p d v 100 int vlanif100 ip add 192.168.100.254 d th ================================= dis ip int b //验证接口IP接口 dis ospf routing //验证查看ospf路由 dis ip pool //验证地址池 由于STP的存在将SW3和SW4之间的链路阻断了，所以SW4ping不通SW3，查看ospf路由发现，34网段是直连的，但是走的仍然是被阻断的那一条链路，所以要不就把上层接口的STP关掉，要不就用Mstp，或者就把上边配置成纯的物理口。 完整拓扑配置 VRRP配置 说明： 在同一个组，要保证配置的虚拟IP地址一样。 VRRP数据包结构 当Master Down了之后,出现的结果如下： 原因在于STP收敛需要时间，不是VRRP的问题。 配置案例 说明： 这个配置中 一个接口下面有两个组。因为他下边的主机都是一个VLAN。 监视当SW2的上行链路down掉了，不会引起VRRP的配置，Master和Backup不会发生改变。但是可以与上行服务器的通信，原因在于配置了ospf，路由收敛后会从右边走，但是过程就是从左边先走，然后回来再从右边走，绕路了，因此就需要监视。 监视的作用就是当Master的上行链路down掉了之后呢，能够将Master的位置让出来，让右边成为master，直接从右边走，不要再回来从右边走，实现的方法就是把Master的优先级减一定的值， int vlanif 10 vrrp vrid 10 track interface vlanif 2 reduce/add xxx //配置监视接口，以及配置自动减或加优先级。默认减10， dis vrrp interface vlanif 10 //直接查看VRRP接口的详细信息 三个优先级： priorityRun：实际的优先级，当为255时，代表虚拟地址和接口地址一样。 PriorityConfig：自己配置 MasterPriority：Master的优先级 VRRP vrid 10 track int g0/0/2 reducked 101 //配置接口监视自动减优先级101 dis vrrp interface vlanif 10 //直接查看VRRP接口的详细信息 心跳线防止接入层链路不通或不稳定 接入层的链路，跟业务跑在一块了，假如组很多，有50个组有50个VRRP，这个时候有两种解决方案： 1、第一个是起一个心跳线，在心跳线里跑VRRP的状态。 2、 admin-vrrp vrid 10 建立管理组vrrp用于管理同一个VLAN流量走向 心跳线就是再加一个接口就是一条线，没有其他的命令，这个接口这要跟下面提供的vlanif一样的性质就行了，把心跳线配置一个trunk，跑VLAN10 或VLAN20 就可以了，但是这个时候就会产生一个问题就是环路。所以STP得配置，因为有一些交换机会阻止一些非法的组播流量，所以有些交换机可以丢弃一些未知的组播流量，所以有一些VRRP报文可能就过不去，也回不来，因此这时建议用心跳。 Updatesystem-view interface 10ge 1/0/1 undo negotiation disable //配置以太网接口工作在自协商模式 speed auto 100 //配置10GE1/0/1在自协商模式下协商速率为100Mbit/s //在单独的口关闭STP int g0/0/1 stp disable","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"VRRP配置","slug":"VRRP配置","permalink":"http://sakuramuxia.github.io/tags/VRRP%E9%85%8D%E7%BD%AE/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记6","slug":"hcnp06","date":"2021-05-17T12:35:53.000Z","updated":"2021-05-17T13:01:43.311Z","comments":true,"path":"post/cb56.html","link":"","permalink":"http://sakuramuxia.github.io/post/cb56.html","excerpt":"","text":"VRRP局域网中的用户终端通常采用一个默认网关的形式访问外部网络，如果此时默认网关设备发生故障，将中断所有用户终端的网络访问，这很可能会给用户带来不可预计的损失，所以可以通过部署多个网关的方式来解决单点故障问题，那么如何让多个网关能够协同工作，但又不会互相冲突就成了最迫切需要解决的问题。 于是VRRP应运而生，它既可以实现网关的备份，又能解决多个网关之间互相冲突的问题，那么VRRP的工作原理是如歌实现的？在网络中又该如何配置呢？ 技术背景通常，一个网段内只有一个网关，因此一旦网关出现故障，该网段就被孤立。 对他们来说是透明的， VRRPVirtual Router Redundancy Protocol 虚拟路由器冗余协议 将多个物理网关加入到VRRP备份组中，由一个主（Master）和多个备（Backup）组成，功能上相当于一台虚拟网关。 虚拟网关具有一个虚拟IP地址，作为终端的网关IP地址。 两个版本：VRRPv2基于IPV4，VRRPv3基于IPv6。 当实际的主路由器挂了之后，会切换到右边。这个过程是备用路由器发送ARP到二层交换机，二层交换机再把接口的MAC地址转换成备用路由器的MAC地址。 ARP有代理ARP、免费ARP、 VRRP选举规则根据优先级，选举出Master，承担网关功能 当物理网关和虚拟网关一样时，这台物理网关直接称为Master，而且直接优先级255，且不能修改，这个就叫做IP地址拥有者。 如何查看是否是用虚拟网关这个技术呢，首先，查看254的mac地址，在ARP中查看是否是一个虚拟的MAC地址，其次是Tract命令，当tract的时候回显的是252，而网关配置的是254，这个时候就能发现是VRRP技术。但是当虚拟网关的地址和真实网关的地址是一样的时候就无法确认。 注意 255是无法配置的，他是保留使用的。只能在1~254之间配置。0不能配置，255不能配置，0是在将备用转化成主路由的时候用的，255，是当虚拟网关IP地址和真实路由器的网关地址相同时默认配置的。 技术深度和细节考察 如何检测使用的是VRRP技术1、查看arp中MAC地址是不是虚拟MAC地址的形式， 2、或者tracert 一个，查看第一跳是不是自己配置的网关，如果不是则代表是虚拟网关技术，如果是，另外再检查是不是虚拟MAC地址。 //配置命令 int VLAN 1 //进入vlanif三层口 VRRP ? // vrrp vrid 1 ? // 假设下边主机如果都用一个VLAN，用同一个网关，大量的流量走同一个路由器，就不合适，设备压力大了，链路压力也大了，因此我们需要做负载均衡，负载均衡是大家一起工作，主备是有主有备，因此在实际过程中下边的主机会有多个vlan，第一个主机对他来说，有主有备，第二个主机对他来说也是有主有备，整体来说就是负载均衡了。 虚拟MAC规则 IANA：掌管IP地址和域名的机构 0001：代表VRRP 最后一个就是VRID的编号对应的16进制。 两个主备路由器之间到交换机之间的连接，有一端必须被阻塞，否则交换机发送一个ARP，两个路由器都会回应，都会认为是主路由，就会出现脑裂现象，另一个解决办法就是两个路由器之间建立一个心跳检测线路。（服务器、数据库、集群里面、VRRP里面） VRRP报文格式IP协议号=112，组播地址=224.0.0.18（封装在IP头部后边的协议号，1、6、17、47、50、51） VRRP状态机制 间隔时间 1秒钟，抢占延迟0秒，可以更改。 VRRP工作流程 当有人称为Master，他就会立即发送一个免费ARP，来通知下面的这个接入的二层接入交换机，告诉他以后只要有人找虚拟MAC地址就来找我。 当左边的路由器发生问题后，发生故障，无法发送ARP，右边一直在监听，它默认左边会1秒发一次，右边负责监听，监听3个间隔，当定时器超时时，也就是3秒之后，副路由器未收到主路由器的报文，副路由器就会暂成为主路由器。 当副路由器成为Master后，它也会立即发送免费ARP，他会告诉下面的交换机更新MAC地址。 默认抢占模式是开启状态。 免费ARP有3大应用 检测冲突 ：自己问自己检测IP地址是否冲突 通告主备变换 ：在VRRP中，发生主备变换后，Master设备会广播发送一个免费ARP报文来通告发生了主备变换 通告新MAC地址 发送方更换网卡，MAC地址变化了，为了能够在动态ARP表项变化前通告网络中其他设备，发送方可以发送一个免费ARP VRRP定时器 VRRP设计方案注意事项Master应该和STP的根桥保持一致，否则会导致次优路径。 VRRP应用场景主备备份 主路由只能有一个，备用路由可以有多个。 负载均衡 建两个组，组1和组2，组1的网关是111，组2的网关是112，然后有一部分主机配置111，另一部分主机配置112，组1中SwitchA为Master，组2中SwitchB为Master，实际过程中，也不会这个设计，而是做不同网段的，不同VLAN的负载均衡。 典型场景 MSTP：不同的VLAN有自己独有的独立的根桥。 MSTP：我们会把一个VLAN映射到一个实例里面，所以我们在计算生成树的时候，是按照实例来计算的。设计不同生成树的位置，这样就可以让不同的VLAN走不同的链路，然后找到合适的网关。 VRRP监视上行链路当Master上行链路故障时，自动修改优先级（自废武功），重新选举Master 背景： 当上行链路故障时，不会进行自动主备切换，因为下边的链路仍然是通的。 track //跟踪 直接监视 利用路由技术/BFD/NQA监视（非直连） NQA 把监视的结果反馈给VRRP，VRRP再做出反应。技术联动 FHRPfirst hop redundancy protocol 首跳冗余协议 第一个和第三个都是思科私有的协议 HSRP和VRRP工作原理大致一样，但是GLBP非常强大，与前两种完全不一样，要实现负载均衡，得进行合理的配置，比如说，创建不同的组，不同的组作为不同VLAN的网关。 GLBP（Gateway Load Balance Protocol）网关负载均衡协议，自动的网关的负载均衡，思科私有，机制类似轮训，靠使用不同的虚拟MAC来做ARP响应。 配置同一个网关，进行动态负载均衡，自动选择 主机首先会发送ARP请求，比如说我们的网关全部都是一个地址，发送一个1.1，交换机会广播，交换机广播之后，这里面有一个角色的分配，AVG统一管理管理AVF，AVG也是有主有备用，实际转发数据的就是AVF，流量过来的时候谁来干活，由ACG来分配，每次 过来的ARP都是有AVG来做响应，但是我给你们每一次的响应不一样，一号主机我给你aaaa的MAC地址，二号主机我给你bbbb的Mac，三号主机我给cccc的Mac。这就实现了动态的负载均衡，这就是原理。 Weighted 配置权重，代表的是10个主机（数据包）里面有几个走哪边，另外几个走哪边。 host-dependent 配置一台主机永远用一个网关 round-robin 配置轮询，就是一个一个来 当SwitchA挂了，AVG会把他的身份让给之前他备份的AVG，备份AVG就会变成活动AVG，还有一个细节就是，他会把之前SwitchA（坏掉的交换机）分配的虚拟MAC，他会把原来的虚拟MAC拿过来，活动AVG也会响应这个MAC，流量就会从我这边走。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"VRRP","slug":"VRRP","permalink":"http://sakuramuxia.github.io/tags/VRRP/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记5","slug":"hcnp05","date":"2021-05-14T16:20:53.000Z","updated":"2021-05-17T12:53:20.757Z","comments":true,"path":"post/ad7.html","link":"","permalink":"http://sakuramuxia.github.io/post/ad7.html","excerpt":"","text":"防火墙厂商产品介绍1、checkpoint（老牌） 2、juniper（有认证） 3、Cisco 4、palo alto 5、华为 （USG6530） 6、山石 （VFW01） 7、爱快防火墙 （免费） 说明： 可以把这些防火墙的镜像从虚拟机安装启动，就相当于有这样一台防火墙，可以作为一个虚拟防火墙，可以部署到一台X86的服务器上，就可以直接使用。 关键字搜索：企业防火墙魔力象限 说明： 山石防火墙默认账号和密码：均为hellstone 将山石防火墙挂在在虚拟机中通过查询IP地址，用浏览器登陆IP地址（https）使用web界面配置 show interface //linux查询IP地址 镜像文件 Checkpoint gala R80 public EA EA3.iso palo Alto Network PA VM ESX 8.0.0.exe 山石防火墙SD6000 VTWD1 -5 5RB11.iso dis arp | in e2 //mac地址过滤 dis ip pool interface vlanif108 used//查看IP地址池使用的IP地址 专门的防火墙课程 高可靠性集群在硬件中可以实现，在数据库中可以实现，在网络设备中可以实现，在操作系统中也可以实现。 在学习过程中很多专业术语，在以后做项目文档，聊天时，都要回去讲这些东西，技术背景，技术框架讲明白，优点，缺点，适用场景，解决方案有哪些 NA路搞通，NP保障性，管理性，安全性，设计性的东西； 在实际网络中，避免不了各种技术因素造成的网络故障和服务中断，因此， 提高系统容错能力，提高故障速度，降低故障对业务的影响，是提高系统可靠性的有效途径。 可靠性需求：根据其目标和实现方法的不同，可分为三个级别： 可靠性的度量： HA：High Availability，指一个产品或系统具有很高的可靠性，是一整套综合技术，主要包括冗余容错，链路保证，节点故障及流量工程。 不能频频出现故障 出现故障后能很快恢复 可靠性设计主要包括两个方面：设备可靠性：要求多设备能够堆叠组网，要求单设备具有电信级可靠性99.999%，支持双电源接入，支持双风扇等。 链路可靠性：体现在链路设计以及组网形态上，通常采用多链路上行，包括Eth-Trunk/LAG，双归上行等。 99.999% //一年内故障大约是5分钟 86400*365-86400*365*0.99999 //传统方向：金融、证券、互联网、运营商、游戏公司 //云计算 5个9 毫无价值毫无意义 云计算12个9 Eth-trunk：链路聚合 iStack/CSS：堆叠技术（华为）；盒式的交换机用的是IStack，机架式的交换机用的是CSS。稍微有一点技术上的区别，但是大致上都一样。自动的响应故障并且切换。 级联：把多个交换机用线连在一起，级联是没有任何功能上的提升。 堆叠和级联的区别，堆叠是二合一，管理上就管理一台设备，性能上二合一，级联性能上没有提升。 跨设备链路技术：双归路设计 LAG 二层必须开启STP，防止出现环路，三层不怕有环路出现。因为有TTL，三层中跑的是合理的路由设计，肯定会选择最有路由，不可能有环路，但是链路聚合在二层里面要用到，三层里面也可以用到，课程中主要将二层，因为二层里面的需求很大，因为二层这种环路设计都有STP，STP就会阻塞，那么我们要用到，该怎么办，所以这个时候我们会用到链路聚合，同时再加上VRRP，因为我们要用网关，网关有两个，我们到底要用哪一个，用左边的那个，左边的那个如果挂了，要切换到右边的，你得把下边服务器网关地址给换了，这是不可能去实现的，所以我们得提供一个稳定的网关地址，这个网关地址其实就是虚拟出来的，后边有两个真实的网关，所以这个叫做VRRP。 而如果有堆叠技术，我们可以把多个设备合为一个，通过链路聚合，这个是一根线，这个是一个设备，图形变成了这个样子，这个样子就没有环路了，单点设备，单条链路，就不会有环路出现了。就算开启STP也检测不出来阻塞状态，有了堆叠技术，就不需要STP和VRRP技术了。堆叠技术有一个致命伤： VNC //各厂商堆叠技术名称 思科：VSS 华三：IRF 华为：CSS 私有不公开 出问题，原厂，专业的工程师。 堆叠做集群 堆叠 心跳检测出现问题时，主备交换机都认为是主交换机时，就会出现脑裂。 //配置集群 拓展 ----------------------------------------- 云计算 云计算是先把虚拟化学好，虚拟化实际上是把IT三架马车，给虚拟化放到资源池里进行利用。 ---------------------------------------- 三驾马车：计算、网络、存储 云计算最底层就三种东西，计算、网络、存储。 ---------------------------------------- 计算资源：服务器（硬盘装一个操作系统即可）-CPU、内存、 网络资源：交换机、网卡、路由器、防火墙 存储资源：SAN、NAS、DAS 三种存储网络架构；RAID； NAS：群晖，网络附加存储（网络存储服务器）。 RAID：独立（廉价）磁盘冗余阵列（Redundant Array of Independent Disks） RAID 0 新建带区极大提升性能速度最快 大小累加 数据分散在多个硬盘中 RAID 1 新建镜像区 1:1备份 大小只有一半 只能两块 RAID 5 至少三个硬盘 相互校验 数据是分散在三块硬盘中 同时写入两块硬盘数据，并把校验放在另外一个硬盘中。有校验数据的存在，所以用硬盘数据的容量其实要去掉一块硬盘，RAID 5 是去掉一块硬盘的容量。5快1G的最终的容量就是4G 修复卷 重新激活。 RAID 6 有校验 RAID 10 是RAID1和RAID0的综合，RAID10 和RAID01 的优缺点和比较，RAID5和RAID6的区别，在生产环境中用RAID5好还是RAID10好。根据业务分析，应用场景选取。 虚拟化集群特性： 当其中一个物理机挂掉之后，他上边的虚拟机会跑到其他的物理机上重新启动。启动时间就是故障时间。 华为虚拟化的技术：HA VMWare特有技术：FT（fault Tolerance）故障转移， 实现零停机，零数据丢失，在其他主机上有影子虚拟机。 vCenter Server ：统一管理平台，把主机加入集群中。 Eth-Trunk链路聚合随着网络规模不断扩大，用户对骨干链路的带宽和可靠性提出了越来越高的要求，在传统技术中，常用更换高速率的接口板或更换支持高速率接口板的设备方式来增加带宽，但这种方案需要付出高额的费用，而且不够灵活。 采用链路聚合技术可以在不进行硬件升级的条件下，通过将多个物理接口捆绑为一个逻辑接口，来达到增加链路带宽的目的，在实现增大带宽目的的同时，链路聚合采用备份链路的机制，可以有效的提高设备之间链路的可靠性。 技术背景： Eth-Trunk：以太网链路聚合 将多条物理链路捆绑在一起成为一条逻辑链路 链路聚合对STP开销影响 链路聚合模式 捆绑=链路聚合 服务器是不支持LACP模式的 如果两端设备均支持LACP协议，推荐使用LACP模式链路聚合 如果对端设备不支持LACP协议，必须使用手工模式链路聚合 链路错连： int eth-Trunk 1 //创建一个聚合口 mode ? //选择模式 //然后将物理口加进来就可以了 //验证 手工链路聚合： Eth-Trunk的建立、成员接口的加入由手工配置，没有LACP的参与。 所有活动链路都参加数据的转发，平均分担流量。 LACP模式链路聚合 通过LACP报文进行协商，确定活动接口和非活动接口，即提供备份功能。 LACP负责维护链路状态，在聚合条件发生变化时，自动调整或解散链路聚合。 建立过程：发送LACPDU→确定主动端→确定活动接口 比较规则：值越小越优先（STP选择根桥、优先级、MAC地址、） ​ 主动端：系统优先级→MAC地址 ​ 活动接口：接口优先级→接口编号 抢占机制 为什么要配置抢占延迟： 1、首先是为了网络的收敛和流量的一致性。举个例子，有个流量在3口转发，我们流量的负载均衡就会根据算法，比如说根据源MAC，根据源地址，根据目标MAC，假设访问的是同一个主机，同一个MAC地址，MAC是固定的，那么对端不管是那台主机发送的流量，走的可能都是这条链路，但是如果说故障切换，抢过来了，那么会导致流量会从其他地方走，等价路由，负载均衡，是根据数据流来分担的，一组相同的数据包，永远走一条链路，不同的数据包走不同的链路，设计可以改，但是初衷是如果访问同一台主句，数据包都是从三个链路平均发过来的话，就会产生一个微妙的东西，就是数据包会发生乱序，你能保证数据包发送的123，到另一端的数据包也是123吗，有一条链路万一阻塞了呢，故障了呢，从一条链路发不可能是乱序的。这也是多路径的问题。在存储里面有一个叫做多路径问题。 现在学的是LAN WAN技术，后边的是IPSAN、FCSAN技术，S代表Storage的意思，服务器到存储有多条路径可以到达，这就是存储里面的一个典型的问题，叫做多路径问题，这个问题都是由厂商会提供一些专门的软件去解决它，毕竟为了可靠性， 链路聚合条件：所有参数 必须一致：接口数量、速率、双工方式、流控方式等。 聚合以后可以二层，也可以三层，三层就在新创建的聚合口配置IP地址即可。 负载分担机制： 负载分担方式： int Eth-trunk 1 //创建聚合口 1 load-balance ? //负载均衡方式 //默认使用的是源目IP方式 基于源目MAC它会通过一个异或的算法去计算 选择的问题： 如果左边的设备很少，就不能选择基于源MAC这种方式，因为它会使得很多数据都从一条链路过去，都压在一条链路上了。这时候可以选择目标MAC。 Eth-Trunk配置（手动） dis stp b //查看STP状态 dis port v // 作用：提高带宽，提高高可靠性。 两边的聚合链路ID不一定要保持一致，只对本地有效； workingMode：Normal 代表的是manual 说明： 手动创建聚合链路的时候只需要创建一个聚合口（其他保持默认），然后把接口加入即可。 当把两个接口进行聚合后的效果： STP查看后状态是逻辑的聚合口。 //配置命令 int eth-t 1 //创建聚合口 int g0/0/1 //进入对应的接口 eth-t 1 //加入聚合端口 --------------------------------- int eth-t 1 trunkport g0/0/1 to g0/0/1 //加入成员的另外一种方式 Eth-Trunk配置（LACP）在配置Eth-Trunk配置模式的时候需要把里面的成员都先退出，然后再配置模式，这也使得需要先配置模式，然后再配置成员。 int eth-trunk 1 //进入聚合口1 undo trunk g 0/0/0 to 0/0/3 //删除聚合口中的成员 mode lacp-static //更改为lacp静态模式 int g0/0/1 //进入对应接口 shutdown //关闭接口 undo shutdown //恢复接口 两种配置方式的结果对比（手动和LACP） 这两个之间最大的区别在于，手动配置的Eth-Trunk只能配置最大的带宽是多少，不能配置激活的链路个数是多少，而LACP配置的就可以配置。 在选择主动端，选择激活链路时，优先级一样，端口编号越小约优先。 谁是主动端，听谁的 配置系统优先级： lacp priority ? //在系统模式配置 //默认是32768，可以配置成32767，STP配置优先级的时候是以4096为一块。 int g0/0/0 //进入接口模式 lacp priority 3//配置接口的优先级 int eth 1 //进入聚合接口 lacp preempt delay 10 //配置lacp抢占延迟为10秒 LACP的好处是可以动态的检测，也可以选择主备，检测出错的接口。 交换机之间可以用，交换机路由器之间可以用，路由器之间可以用，服务器之间也可以用。 NIC Teaming ：网卡绑定","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"防火墙","slug":"防火墙","permalink":"http://sakuramuxia.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Eth-Trunk链路聚合","slug":"Eth-Trunk链路聚合","permalink":"http://sakuramuxia.github.io/tags/Eth-Trunk%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记4","slug":"hcnp04","date":"2021-05-12T10:20:53.000Z","updated":"2021-05-17T12:53:13.162Z","comments":true,"path":"post/c896.html","link":"","permalink":"http://sakuramuxia.github.io/post/c896.html","excerpt":"","text":"IPsec VPN配置（手动配置）IPsec VPN配置步骤 实验拓扑 sys sys HF dhcp enable acl 2000 rule permit so 192.168.10.0 0.0.0.255 int g0/0/0 ip add 192.168.10.254 24 dhcp sel int int g0/0/1 ip add 12.0.0.1 24 //net outbound 2000 ip route-s 0.0.0.0 0 12.0.0.2 --------------------------------------- //合肥 //配置感兴趣流 --------------------------------------- acl 3000 rule permit ip(协议) so 192.168.10.0 0.0.0.255 des 192.168.20.0 0.0.0.255 --------------------------------------- //配置提议 --------------------------------------- dis IPsec sa //验证IPsec SA dis IKE sa //验证IKE SA dis IPsec proposal //验证IPsec提议 IPsec proposal HF2SH //配置IPsec 名字随意配 dis IPsec proposal //验证IPsec提议，当只新建一个IPsec，什么都不配置的时候，默认值封装模式为Tunnel，安全协议为ESP，认证算法为MD5，加密算法为DES。 //transform ah //将安全协议更改成AH ESP encryption-algorithm AES-256 //配置加密算法 ESP Authentication-algorithm sha2-256 //配置认证算法 d th //手动的话是永久存在的，没有配置超时时间的选项。 //当选择安全协议为ESP时可以配置的有两个，当选择安全协议为AH时，可以配置的只有认证算法。 --------------------------------------- //配置IPsec 策略 --------------------------------------- //先配置IPsec proposal 再配置IPsec policy IPsec policy HF2SH 1 manual //名称 序列号 手动orIKE dis IPsec policy //验证IPsec策略配置 security acl 3000 //引入感兴趣流 proposal HF2SH //引入提议 tunnel local 12.0.0.1 //配置隧道本端地址，为公网地址 tunnel remote 23.0.0.3 //配置隧道对端地址，为对端公网地址 dis ipsec policy //验证IPsec策略配置 sa spi inbound esp 12345 //配置SPI序列号 sa spi outbound esp 12345 //可以配置相同的spi序列号 sa string-key inbound ESP cipher 123.com //配置入方向预共享密钥加密 sa string-key outbound ESP cipher 123.com //配置出方向预共享密钥加密 dis IPsec policy //验证IPsec策略 int g0/0/1 //进入相关接口 IPsec policy HF2SH // 调用策略 //当更改协议后需要重新调用一下 dis IPsec sa bri//验证IPsec sa 配置 （简化） dis IPsec sa duration //验证IPsec协议生存时间 dis IPsec statistics ESP //查看IPsec数据包入和出 -------------------------------------------------------- //这样配置VPN会通，但是无法访问互联网了。所以还要把NAT转发开启，但是开启之后，因为IPsec策略的源地址是私网地址，NAT转发之后会变成公网地址，数据包有去无回，造成无法通信，所以要把IPsec的源地址变成出去对应的公网地址。 acl 3000 rule permit ip(协议) so 192.168.10.0 0.0.0.255 des 192.168.20.0 0.0.0.255 //源地址192.168.10.1变成12.0.0.1 //还有一种解决办法就是把NAT调用的acl把VPN的流量排除，感兴趣流仍然写成对应的私网地址，这样也更符合使用习惯。 --------------------------------------------------------- acl 3001 rule deny ip so 192.168.10.0 0.0.0.255 des 192.168.20.0 0.0.0.255 rule permit ip so --------------------------------------------------------- int g0/0/1 //进入相关的接口 nat outbound 3001 //NAT调用acl debugging ? //调试信息 terminal debugging //开启debugging调试 debugging NAT ? //查看debugging nat信息 debugging IPsec all -------------------------------------------------------- sys sys SH dhcp enable acl 2000 rule permit so 192.168.20.0 0.0.0.255 int g0/0/1 ip add 192.168.20.254 24 dhcp sel int int g0/0/0 ip add 23.0.0.3 24 net outbound 2000 ip route-s 0.0.0.0 0 23.0.0.2 sys sys ISP int g0/0/0 ip add 12.0.0.2 24 int g0/0/1 ip add 23.0.0.2 24 int lo 2 ip add 2.2.2.2 32 手动配置对比图形化界面配置 创建安全提议配置过程 静态手动配置的需要用流量触发。 手动配置IPsec ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //以x的身份ping y ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //以x的身份ping y IPsec配置案例（IKE协商）-------------------------------------------- //配置IKe提议 IKE proposal 1 //新建一个IKE提议序列号1 dis IKE proposal //查看IKE提议默认值 //IKE协商中由一个默认的配置，认证算法为SHA1，加密为DES，生存时间86400，PRF算法为SHA。 authentication-algorithm SM3//配置认证算法 authentication-method pre-share//配置认证模式预共享密钥 encryption-algorithm aes-cbc-256//配置加密算法AES DH group ? //配置DH group组 sa duration //配置超时时间 prf ? //配置prf完全向前保密，加强保密算法 ------------------------------------------ //配置对等体,协商 IKE peer SH V1//配置IKE协商版本为V1 dis IKE peer //查看IKE协商默认值 //默认不做配置的传输模式为主模式，Nat穿越为关闭, exchange-mode main //配置交换模式为主模式 pre-share-key cipher huawei //配置预共享密钥 IKE-proposal 1 //调用Ike提议 local-address 12.0.0.1 //配置本段IP remote-address 23.0.0.3 //配置对端IP ------------------------------------------ //创建一个新的策略进行关联 ipsec policy SH2HF 1 isakmp //创建ipsec安全策略 security acl 3000 //关联acl策略（和手动一样） proposal HF2SH //关联提议 ike-peer SH //调用对等体 ------------------------------------------ //进入接口进行调用 int g0/0/1 d th undo ipsec policy ipsec policy hefei2shanghai ------------------------------------------ //配置ike的脚本软件，直接把参数输入进去，然后运行脚本，就把命令刷出来了，直接复制粘贴 ------------------------------------------- 得用IKE的提议建立一个IKE的SA，在IKE的情况下建立一个IPsec的SA，再调用提议。 IKE配置 验证ipsec配置dis ike sa dis ipsec sa GRE over IPsec技术背景：IPsec VPN用于在两个端点之间提供安全的IP通信，但只能加密并传播单播数据，无法加密和传输语音，视频，动态路由协议信息等组播数据流量。 GRE可以封装组播数据，并可以和IPsec结合使用，从而保证语音，视频等组播业务的安全。 工作流程首先通过GRE对报文进行封装，然后再由ipsec对封装后的报文进行加密和传输。 说明： 在原始的包头上添加GRE封装的公网IP包头，如果用的IPsec模式是tunnel模式的话还会在外层再添加一个IP包头，会出现最多有3个包头。或两个包头（传输模式），实际中只能看到最外面的一层IP包头，里层的数据都进行了加密，是看不到的。 在配置的时候注意，先做GRE，再做IPsec保护GRE。 -------------------------------------------- //合肥配置 -------------------------------------------- sys sys HF dhcp enable acl 3001 rule permit ip int g0/0/0 ip add 192.168.10.254 24 dhcp sel int int g0/0/1 ip add 12.0.0.1 24 nat outbound 3001 ip route-s 0.0.0.0 0 12.0.0.2 //配置GRE int tunnel0/0/0 tunnel-protocol gre //封装协议为GRE so 12.0.0.1 //隧道源地址 des 23.0.0.3 //隧道目的地址 IP add 192.168.12.1 24 //隧道配置IP地址 //配置ospf ospf 1 router-id 1.1.1.1 area 0 //宣告内网口和隧道口 net 192.168.10.0 0.0.0.255 //宣告内网地址 net 192.168.12.0 0.0.0.255 //宣告隧道地址 //配置ipsec //配置感兴趣流公网加密的 acl 3000 rule permit GRE so 12.0.0.1 0 0.0.0.255 des 23.0.0.3 0 0.0.0.255 //配置提议 ipsec proposal HF2SH transform esp ESP authentication-algorithm sha2-256 esp encryption-algorithm AES-256 //配置策略 ipsec policy HF2SH 1 manual security acl 3000 proposal HF2SH tunnel local 12.0.0.1 tunnel remote 23.0.0.3 sa spi inbound esp ciper 123.com sa string-key outound esp cipher 123.com //调用 ipsec policy HF2SH ---------------------------------------- //上海配置 ---------------------------------------- sys sys SH dhcp enable acl 3001 rule permit ip int g0/0/1 ip add 192.168.20.254 24 dhcp sel int int g0/0/0 ip add 23.0.0.3 24 nat outbound 3001 ip route-s 0.0.0.0 0 23.0.0.2 //配置GRE int tunnel0/0/0 tunnel-protocol gre //封装协议为GRE so 23.0.0.1 //隧道源地址 des 12.0.0.3 //隧道目的地址 IP add 192.168.12.2 24 //隧道配置IP地址 //配置ospf ospf 1 router-id 3.3.3.3 area 0 //宣告内网口和隧道口 net 192.168.20.0 0.0.0.255 //宣告内网地址 net 192.168.12.0 0.0.0.255 //宣告隧道地址 //配置ipsec //配置感兴趣流公网加密的 acl 3000 rule permit GRE so 23.0.0.3 0 0.0.0.255 des 12.0.0.1 0 0.0.0.255 //配置提议 ipsec proposal SH2HF transform esp ESP authentication-algorithm sha2-256 esp encryption-algorithm AES-256 //配置策略 ipsec policy SH2HF 1 manual security acl 3000 proposal SH2HF tunnel local 23.0.0.3 tunnel remote 12.0.0.1 sa spi inbound esp ciper 123.com sa string-key outound esp cipher 123.com //调用 ipsec policy SH2HF 说明： 1、ospf的hello数据包 10秒钟一个 2、对专线与专网应在不同语境下使用的两个词，没有必然联系。专线：物理层面，强调的是你使用一条或多条专有的物理传输线路。专网：使用性质层面，强调的是用途，这个网专门用于干嘛的，专注于某一个特定人群、行业、目的等等。比如军队专网、交通专网等。专线与专网没有必然联系，专网的建立依赖与底层（物理层）的传输链路与设备，这个物理层的东西可以是专线也可以不是（若没有安全方面的考虑话）；而专线呢，你可以拉条专线上因特网，也可以专门用来承载专网的业务。 也有ADSL专线上网，也就是ADSL＋专线。 专网的说法有很多，有把专线＋交换机实现的VOIP，叫做专网，也有叫综合语音接入。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"IPsec 配置","slug":"IPsec-配置","permalink":"http://sakuramuxia.github.io/tags/IPsec-%E9%85%8D%E7%BD%AE/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记3","slug":"hcnp03","date":"2021-05-07T16:20:53.000Z","updated":"2021-05-07T17:18:53.228Z","comments":true,"path":"post/c896.html","link":"","permalink":"http://sakuramuxia.github.io/post/c896.html","excerpt":"","text":"你不去做的事情，永远都不会实现 IPsec VPN企业对网络安全性的需求日益提升，而传统的TCP/IP协议缺乏有效的安全认证和保密机制。IPsec（Internet Protocol Security）作为一种开放标准的安全框架结构，可以用来保证IP数据报文在网络上传输的机密性、完整性和防重放。 IPsec Internet Protocol Security 源自IPV6 IETF指定的一套安全保密性能框架 建立在网络层的安全保障机制 引入多种加密算法、验证算法和密钥管理机制 也具有配置复杂、消耗运算资源较多、增加延迟、不支持组播等缺点 IPsec VPN是利用IPsec隧道建立的VPN技术 OSPF V3版本 建立在网络层的安全保障机制，IP头部后边的数据进行加密。 IPsec核心功能 拓展： PSK：预共享密钥 证书搭建：用Windows的AD域来搭建证书服务 HMAC：基于消息摘要认证加密算法，对加密的数据做一个哈希，再用自己的私钥加密叫做数据签名，现在这里边他会加入一些信息，比如说他会加入一个随机数，这个随机数叫X，加入随机数后，在一起计算的这个技术叫做HMAC，这个HMAC后边用作完整性、真实性校验 IPsec技术框架 IPsec Protocol IPsec协议 confidentiality 机密性 Data Integrity 数据完整性 Origin Authentication 源认证 Key Management 密钥管理 IKE：IKE协议提供密钥协商，用来协商通道，建立和维护安全联盟SA等服务。 通过AH和ESP这两个安全协议来实现IP数据报文的安全传送 SA：SA安全联盟 建议ESP 特定地点，特定时间，特定任务，特定特征， 事先协商好 街头后，再聊，再给任务 IPsec安全协议 IPsec封装模式 说明： IPsec头就是指AH或ESP或者AH+ESP 隧道模式就是跟GRE模式一样 传输模式就是不加新的包头 说明： 当使用GRE封装的隧道模式将出现3个IP包头，一个是原IP包头，一个是GRE封装的新包头，一个是隧道模式下封装的IPsec新IP包头，但是外部只能看到一个IP包头，原因是后边的被加密了，但是数据包封装的结构是三个IP包头。 传输模式封装结构 隧道模式封装结构 Windows安全策略 安全联盟SA（Security Association） 顾名思义，通信双方结成盟友，互相信任亲密无间，即达成约定。 由一个（SPI，IP目的地址，安全协议号）三元组唯一标识。 决定了对报文进行何种处理：模式、协议、算法、密钥、生存周期等。 每个IPsec SA都是单向的。 可以手工建立或通过IKE协商生成。 SPD（Security Policy Database）安全策略数据库 SAD（Security Association Database） 术语 备注 Negotiate 协商，两个节点要开始安全发送数据之前，必须完成的事情 SA Security Association 安全联盟，协商的结果，类似合约书 SPI Security Parameter Index 安全参数索引，SA内包含，用于区分多个SA IKE Internet Kev Exchange，因特网密钥交换，SA协商的方法和标准。 IKE 用来协商通道的 IPsec SA用来保护数据的 IKE协商过程 最终会协商出一个隧道 nat user xxx /add //建立Windows用户 nat user xxx yyy //创建用户密码 IKEInternet Key Exchange 因特网密钥交换 建立在ISAKMP （Internet安全联盟和密钥管理协议）定义的框架上 基于UDP（端口号500）的应用层协议，可为数据加密提供所需的密钥 使用DH算法，在不安全的网络上安全地分发密钥，验证身份 定时更新SA和密钥，实现完善的向前安全性 允许IPsec提供抗重播服务（添加有随机数） 简化IPsec的使用和管理，大大简化了IPsec的配置和维护工作 IKE在中间的作用：SA会建立两种SA，一种是IKE SA，一种是IPsec SA，IKE SA主要是协商后边通道的，在通道中传数据的时候，数据的加密使用的是IPsec SA来进行的。先做IKE的协商，再做IPsec的协商。 IKE是一种框架 PFS：prefect Forward Security 完全向前保密，类似DH，用于密钥管理分发，但是做一次额外的密钥交换。 当私钥泄漏时，就必然会导致之前的数据被破解，但是保证未来的数据能被保护。 IKE在协商过程中有两个阶段 对等体之间建立一个IKE SA完成身份验证和密钥信息交换后，在IKE SA的保护下，根据配置的AH/ESP安全协议等参数协商出一对IPsec SA。 阶段1主模式协商过程 说明： 主模式中有加密的过程，推荐使用主模式，但是在早期的设备中不支持加密的信息，所以选择野蛮模式。 PRF算法：数据做校验的时候，额外添加的算法。 IKE的版本有V1还有V2，其中V2种有支持多种算法。 野蛮模式协商过程 阶段2快速模式 IKE SA 与IPsec SA的区别 实际过程中的界面配置基本配置 IKE通道配置 IPsec配置 //科来数据抓包中过滤IPsec的数据包支持的类型有 AH、ESP、isakmp、 //科来过滤指定的IP地址 ip.addr == 114.114.114.114","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"IPsec VPN","slug":"IPsec-VPN","permalink":"http://sakuramuxia.github.io/tags/IPsec-VPN/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记2","slug":"hcnp02","date":"2021-05-06T06:01:53.000Z","updated":"2021-05-06T07:00:43.672Z","comments":true,"path":"post/857.html","link":"","permalink":"http://sakuramuxia.github.io/post/857.html","excerpt":"","text":"信息安全 信息安全的核心目标CIA模型保护 PKI公钥基础架构 机密性技术 机密技术分类 根据密钥的使用方法 对称加密 对称加密：加密、解密使用相同的密钥 特点：速度快、密文紧凑、密钥管理复杂、用于大量数据的传送 Encrypt ：加密 Date Encrypt Standard 数据加密标准 Dencrypt ：解密 说明： 加密的理念是转换和移位 非对称加密 加密、解密使用不同的密钥（公钥、私钥） 特点：速度慢、密文不紧凑、密钥管理简单、通常只用于数字签名。 公加私解，私加公解。 京东只需要把他的公钥给我们即可，然后我们用他们的公钥进行加密，发送过去，数据到他们那里，只有他们手中的私钥可以解密。（这是去的过程）同理，来的过程也是。 私加公解的意义是为了数字签名，进行身份认证的作用。 不要使用任何非公开的加密算法 说明： DH：迪尔夫丶霍夫曼，两个人的名字简写，是一种加密算法。相当于把对称加密的密钥当作数据用非对称加密的进行传送交换。 PRF：伪随机函数 公钥加密技术 非对称加密也叫公钥加密，是PKI的基础 公钥（public Key）和私钥（Private Key） 根据实现的功能不同，可以分为数据加密和数字签名 延伸：加密软件：PGP（pretty Good Privacy）优良保密协议是一套用于消息加密、验证的应用程序，可以加密一个分区，创建一个加密分区，整个硬盘。 数据加密-数字信封发送方采用接收方的公钥来加密对称密钥。采用数字信封时，接收方需要使用自己的密钥才能打开数字信封得到对称密钥。结合对称加密和非对称加密的各自优点 注意：这个里面有漏洞就是无法确认发送方的身份和数据的完整性。 两种加密算法的结合在实际使用中，通信双方通常会使用公钥密码学来交换密钥素材，双方最终计算出密钥，而用对称密码学来加密实际的数据，两者配合使用，保证了加密速度和安全性。 真实性验证私钥加密，公钥解密，用于证明身份 完整性技术信息摘要:单向散列函数，哈希（Hash） 将任意长的字符串通过哈希计算出固定长度字符串，类似指纹、DNA 特点：不可逆，雪崩效应 延伸：collision 碰撞，冲突 抽屉定律：6本书，5个抽屉，那么肯定有一个抽屉里面有两本书。 哈希算法碰撞理论起源：定长的，所以结果是有限的，但我们的数据是无限的，总能找到两个不同的数据，他们的哈希值是一样的。 哈希加密：只是哈希隐藏了密码，它只是一个算法。即输入一个密码，系统做一个哈希，如果得到的哈希值跟系统中存储的哈希值一样则代表密码正确。系统中实际存储的是密码的哈希值，而不是密码。 数字签名说明这是我的唯一性 签名具有不可否认性 摘要是指哈希值 数字签名就是对数据摘要加密（自己的私钥）的一个密文 这其中还有一个问题就是怎么证明 公钥是他们本人的。 公钥技术的规模应用难题 载体：证书证书：证明我的公钥是我自己 certmgr.msc \\\\查看颁发的证书 PKI协议的应用 IPsec用的Hmac消息认证码","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"信息安全","slug":"信息安全","permalink":"http://sakuramuxia.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记1","slug":"hcnp01","date":"2021-04-28T10:01:53.000Z","updated":"2021-05-03T06:09:25.515Z","comments":true,"path":"post/917.html","link":"","permalink":"http://sakuramuxia.github.io/post/917.html","excerpt":"","text":"VPN基础VPN产生背景： 在Internet的传输中，绝大部分数据的内容都是明文传输的，存在很多安全隐患（如：窃听、篡改、冒充） 总部、分公司、办事处、出差人员、合作单位需要访问总部网络资源的问题。 ------------------ CRM:客户资源管理 钉钉 ERP:企业资源计划 金蝶 OA:互联网办公 SAP: ------------------ 从外部访问企业内网资源 1、NAT服务器、端口映射 方便 开口 2、VPN 安全 ------------------- HTTP HTTPS FTP SFTP Telnet SSH ------------------- 社会工程学SE 人 最大的弱点 ------------------- CISP CISSP CIA ------------------- VPN没有之前 用的 专线 ------------------- 深信服 启明星辰 绿盟 安全厂商 网络安全厂商 安全牛 ------------------- VPNVirtual Private Network，虚拟专用网络 术语 备注 VPN 通过公共网络建立私有网络，并提供一定的安全性和服务质量保证。IETF草案对基于IP的VPN的定义：使用IP机制仿真出一个私有的广域网 虚拟 用户不再需要拥有实际的专线，而是利用Internet建立自己的私有网络。 专用 用户可以为自己制定一个最符合自己需求的网络。 VPN核心技术 说明：windows Services都可以 VPN优点: VPN类型（根据建设单位划分） 类型 备注 租用运营商专线搭建VPN网络 MPLS VPN（工作量很大） 用户自建企业VPN网络 GRE、PPTP、L2TP、IPSec、SSL VPN IGP→路由策略→BGP→MPLS→MPLS VPN 类型 备注 Remote-Access VPN 远程访问VPN 适合出差员工，移动办公等VPN拨号接入的场景。员工可以在任何能够接入公网的地方，通过远程拨号接入企业内网，从而访问内网资源。通常拨号方IP地址不固定。 Site-to-Site VPN 站点到站点VPN 适合各分支机构、合作伙伴、客户、供应商间的互联、双方都有固定的IP地址。 IPsec VPN SSL VPN Site to Site 站点到站点 L2L 局域网到局域网 VPN类型（根据实现层、协议划分） HTTPS → S代表的也是 SSL PPTP 微软； L2F 思科； L2TP IKE SSL；T：Tunnel隧道 P：protocol 协议 IPV6跨越IPv4再到IPv6，这个时候会用到GRE，GRE最强的隧道技术 Easy Connect 深信服产品 拨号的形式 SSL 端口443 HTTP端口443 LNS代表服务器，LAC代表客户端。 L2TP端口号：UDP 1701 PPTP端口号：TCP 1723 有的拨号不支持更改端口号 GRE VPNGeneric Routing Encapsulation 通用路由封装 GRE提供了将一种协议的报文封装在另一种协议报文中的机制，是一种隧道封装技术，GRE可以封装组播数据，并可以和IPsec结合使用，从而保证语音、视频等组播业务的安全。 一种三层VPN封装技术 在任意一种网络协议上传送任意一种其他网络协议的封装方法 解决了跨越异种网络的报文传输问题，异种报文传输的通道称为Tunnel（隧道） GRE核心功能：建立隧道，打通私网 动态路由 RIP 最多15跳 IPsec 用来保护GRE 实验 --- R1 CFG --- sys sys R1 dhcp ena acl 2000 rule 1 permit so 192.168.10.0 0.0.0.255 int g0/0/0 ip add 192.168.10.254 24 dhcp sel int int g0/0/1 ip add 12.0.0.1 24 interface Tunnel 0/0/1 ip add 192.168.13.1 24 tunnel-protocol gre source 12.0.0.1 destination 23.0.0.1 ip route-s 192.168.20.0 255.255.255.0 192.168.13.2 IP route-s 0.0.0.0 0 12.0.0.2 nat outbound 2000 OSPF 1 router-id 1.1.1.1 area 0 net 192.168.10.0 0.0.0.255 net 192.168.13.0 0.0.0.255 --- R3 CFG --- sys sys R3 dhcp ena acl 2000 rule 1 permit so 192.168.20.0 0.0.0.255 int g0/0/1 ip add 192.168.20.254 24 dhcp sel int int g0/0/0 ip add 23.0.0.1 24 nat outbound 2000 interface Tunnel 0/0/1 ip add 192.168.13.2 24//这个IP配制成如何都无所谓 tunnel-protocol gre source 23.0.0.1 destination 12.0.0.1 ip route-s 192.168.10.0 255.255.255.0 192.168.13.1//告诉路由器当查找路由表时走隧道口，不走缺省路由，进行重新封装。 IP route-s 0.0.0.0 0 23.0.0.2 //配置动态路由 OSPF 1 router-id 1.1.1.1 area 0 net 192.168.20.0 0.0.0.255 net 192.168.13.0 0.0.0.255 --- R2 CFG --- sys sys R2 int g0/0/0 ip add 12.0.0.2 24 int g0/0/1 ip add 23.0.0.2 24 int lo 2 ip add 2.2.2.2 32 --- 网络拓扑下载：https://liubei688.lanzoui.com/iYoHhokl44d GRE封装：穿马甲 47代表GRE；0X0800代表上层IPV4； 协议ID GRE VPN转发过程详解 让私网地址的数据包从隧道口出去，到下一跳的隧道口。 隧道口（因为隧道是建立在三层上所以有IP地址）的IP地址都可以随意配，不一定在同一个网段，因为隧道是一个PPP的点到点的认证 本质是：隧道口只是为了让去往这个目的地的路由走这个口，这样才能发现我要去做一个重新的封装。 GRE VPN的配置 命令 备注 interface tunnel 0/0/1 创建隧道口 tunnel-protocol GRE 指定协议 source 12.0.0.2 指定隧道源（公网IP） destination 13.0.0.3 指定隧道目标（公网IP） 配置IP地址、路由 注意下一跳、出站口、宣告口 display interface tunnel 0/0/1 查看隧道口状态 keepalive period 5 retry-times 3 开启Keeplive检测避免数据黑洞 说明：隧道口也是三层口 思科的设备默认开启的协议是GRE 配置路由时 下一跳出接口的时候一定注意，出接口是本地隧道口的出接口（IP），下一跳是对端隧道口的入接口（IP）。要让它走隧道口 而不是走缺省路由，NAT。 配置路由// 配置静态隧道路由 ip route-s 192.168.20.0 255.255.255.0 Tunnel0/0/1 //配置隧道的路由 ip route-s 192.168.20.0 255.255.255.0 192.168.13.2 //配置隧道的路由 //配置动态隧道路由 OSPF 1 router-id 1.1.1.1 area 0 net 192.168.10.0 0.0.0.255 net 192.168.13.0 0.0.0.255 OSFP 1 router-id 2.2.2.2 area 0 net 192.168.20.0 0.0.0.255 net 192.168.13.0 0.0.0.255 ----------------------------- //通过公网跑了一个OSPF路由 配置验证 GRE VPN 路由宣告注意事项 // 当把公网接口也宣告进去的时候，在封装好私网地址时，查找路由表，发现去往目的路由在路由表中已经出现，并且下一跳仍然是隧道口，再次进行封装，一直递归下去。路由递归， recursive GRE VPN隧道口虚假状态问题： 只要有到达隧道目标的路由，隧道口即可激活。 解决办法：开启GRE的Keeplive，用于检测隧道对端是否可达。 Keeplive就如同OSPF里的Hello包，每隔多少秒发一次。可以两边都打开，也可以只开一边。 //查看到达目标地址的路由 dis ip rout xx.xx.xx.xx keeplive 5 retry-time 3 //每5秒发一次 重传3次 GRE安全机制 GRE安全机制配置 int tunnel 0/0/1 d th gre checksum //开启GRE校验和 gre key xxx //设置KEY 说明：GRE中的机制在数据包中都能抓到KEY // 隧道口的IP地址随意配置 只是在建立路由的时候填写对应的下一跳即可。因为双方通讯数据包里封装的是公网地址和私网地址跟隧道口的地址没有关系。 //隧道口是直连的 //当填写的隧道口的IP地址不在同一个网段的时候,添加静态路由 ip rout-s 192.168.3.3(对端隧道地址) Tunnel 0/0/1(本端隧道出口) 两个不在同一个网段，能通但是没有ARP，原因是ICMP协议的数据包中，封装的MAC地址源MAC是公网出接口的MAC，目的MAC是对端运营商的出MAC，已经知道了MAC地址，就不需要ARP //添加动态路由 OSPF 1 a 0 net 172.168.1.1 0.0.0.0 //宣告动态路由","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"GRE","slug":"GRE","permalink":"http://sakuramuxia.github.io/tags/GRE/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记17","slug":"hcia17","date":"2021-04-25T10:01:53.000Z","updated":"2021-05-03T06:09:01.516Z","comments":true,"path":"post/e69b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e69b.html","excerpt":"","text":"HCNA综合实验配置要求 //配置说明 //配置所需的IP地址，都已在拓扑上标注。 //配置要求 配置Telnet，要求所有网络设备均支持远程管理，密码为admin。 配置Trunk，交换机之间的链路均为Trunk模式。 配置VLAN，在SW2和SW3上创建相关VLAN，关联4台pc到对应的VLAN接口。 配置mls，通过sw1实现VLAN间路由。 配置dhcp，使sw1可以为各个VLAN内主机分配地址信息。 配置stp，使sw1成为所有vlan的根桥，要求手动修改优先级为4096。 配置ospf，企业内网运行OSPF1。 配置缺省和NAT，在R1上配置静态路由，sw1通过OSPF学习缺省路由。 配置NAT，在R1上配置PAT（只需要转换四个VLAN网段）。 配置PPP，R1和R2之间封装协议为PPP，使用CHAP双向认证，密码为love。 配置OSPF，R2和R3和R4之间运行OSPF2 配置DNS，可以通过www.wakin.com访问HTTP服务器，通过www.movie.com访问FTP服务器。 配置ACL，在R1上配置ACL，拒绝VLAN20的主机通过浏览器访问HTTP服务器，其他流量不受影响。 拓扑文件下载地址：https://liubei688.lanzoui.com/icYBHoj3yni -------------------- -------------------- sys sys SW2 vlan bat 10 20 30 40 int Eth0/0/2 p l a p d v 10 int Eth0/0/3 p l a p d v 20 int Eth0/0/4 p l t p t a v 10 20 30 40 int Eth0/0/1 p l t p t a v 10 20 30 40 int Eth0/0/5 p l a p d v 20 ---------------------- ---------------------- sys sys SW3 vlan bat 10 20 30 40 int Eth0/0/2 p l a p d v 30 int Eth0/0/3 p l a p d v 40 int Eth0/0/4 p l t p t a v 10 20 30 40 int Eth0/0/1 p l t p t a v 10 20 30 40 ------------------------ ------------------------ sys sys SW1 vlan bat 10 12 20 30 40 int Eth0/0/2 p l t p t a v 10 20 int Eth0/0/3 p l t p t a v 30 40 int Eth0/0/1 p l a p d v 12 int vlanif 12 ip add 192.168.12.1 24 int vlanif 10 ip add 192.168.10.1 24 int vlanif 20 ip add 192.168.20.1 24 int vlanif 30 ip add 192.168.30.1 24 int vlanif 40 ip add 192.168.40.1 24 ospf 1 router-id 5.5.5.5 area 0 net 192.168.10.0 0.0.0.255 net 192.168.20.0 0.0.0.255 net 192.168.30.0 0.0.0.255 net 192.168.40.0 0.0.0.255 net 192.168.12.1 0.0.0.0 dhcp enable int vlanif 10 dhcp select interface dhcp server dns-list 3.0.0.1 int vlanif 20 dhcp select interface dhcp server dns-list 3.0.0.1 int vlanif 30 dhcp select interface dhcp server dns-list 3.0.0.1 int vlanif 40 dhcp select interface dhcp server dns-list 3.0.0.1 stp root primary stp priority 0 //设置成根桥 ------------------------- sys sys R1 int g0/0/0 ip add 192.168.12.2 24 int Ser4/0/0 ip add 12.0.0.1 24 acl 2000 rule 1 permit acl 3000 rule 1 deny tcp so 192.168.20.0 0.0.0.255 dest 4.0.0.1 0 dest eq 80 int Ser4/0/0 ppp chap user wakin ppp chap password cipher love ip route-static 0.0.0.0 0 12.0.0.2 ospf 1 router-id 2.2.2.2 area 0 net 192.168.12.2 0.0.0.0 default-route-advertise int Ser4/0/0 nat outbound 2000 int g0/0/0 traffic-filter inbound acl 3000 --------------------------- sys sys R2 int g0/0/0 ip add 23.0.0.1 24 int g0/0/1 ip add 24.0.0.1 24 int Ser4/0/0 ip add 12.0.0.2 24 int Ser4/0/0 link-protocol ppp ppp authentication-mode chap aaa local-user wakin password cipher love local-user wakin service-type ppp ospf 1 router-id 1.1.1.1 area 0 net 23.0.0.1 0.0.0.0 net 24.0.0.1 0.0.0.0 net 12.0.0.2 0.0.0.0 dis ip routing-table pro ospf //验证OSPF建立信息 dis cu //查看全部配置信息 -------------------------------- sys sys R3 int g0/0/0 ip add 23.0.0.2 24 int g0/0/1 ip add 34.0.0.1 24 int g0/0/2 ip add 3.0.0.2 24 ospf 1 router-id 2.2.2.2 area 0 net 23.0.0.2 0.0.0.0 net 34.0.0.1 0.0.0.0 net 3.0.0.0 0.0.0.255 ---------------------------------- sys sys R4 int g0/0/0 ip add 24.0.0.2 24 int g0/0/1 ip add 34.0.0.2 24 int g0/0/2 ip add 4.0.0.2 24 ospf 1 router-id 3.3.3.3 area 0 net 24.0.0.2 0.0.0.0 net 34.0.0.2 0.0.0.0 net 4.0.0.0 0.0.0.255","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记16","slug":"hcia16","date":"2021-04-24T10:01:53.000Z","updated":"2021-05-03T06:08:42.508Z","comments":true,"path":"post/265a.html","link":"","permalink":"http://sakuramuxia.github.io/post/265a.html","excerpt":"","text":"PPP广域网中经常会使用串行链路来提供远距离的数据传输，高级数据链路控制HDLC（High-Level Data Link Control）和点对点协议PPP（Point to Point Protocol）是两种典型的串口封装协议。 HDLC 协议应用 HDLC基本配置 int serial 1/0/0 //进入串口1/0/0 link-protocol hdlc //配置链路协议为hdlC ip add 10.0.1.1 30 //配置IP地址 说明： 华为设备上的串行接口默认运行PPP协议 思科设备上的串行接口默认运行HDLC协议 只限用于串口 HDLC接口地址借用 串行接口可以借用Loopback接口的IP地址和对端建立连接。 点到点之间没有mac地址，没有第三者，不需要mac地址，不需要arp 地址租用：S1/0/0不配地址，借用另外一个接口的地址，这样就可以实现多个这样的接口的地址一样，这样可以实现让多个物理接口用相同的地址。 地址租用的作用是：节省IP地址 dis ip int b // 查看三层接口ip信息 Link-protocol hdlc //更改链路类型为hdlC IP address unnumber interface loopback 0 //hdlc接口地址借用 说明：借用回环口的IP，但是出接口是在回环口上边的，拥有这个地址的真正地址是在回环口2，所以路由是在回环口出现的 //添加一个静态路由即可 ip route-static 12.0.0.1 32 s1/0/0 //这个时候下一跳的地址应该是串口接口，而不是地址，因为地址下一跳还是自己，无意义。 PPP协议应用 PPP协议是一种点到点链路层协议，主要用于在全双工的同异步链路上进行点到点的数据传输。 名称 认证 错误检测 错误恢复 支持同步或异步链路 HDLC × √ × × PPP √ √ √ √ PPP组件 名称 作用 LCP链路控制协议Link Control Protocol 用来建立、拆除和监控PPP数据链路以及认证 NCP 网络层控制协议Network Control Protocol 用于对不同的网络层协议进行连接建立和参数协商 sys //进入系统模式 int s4/0/0 //进入串口s4/0/0 link-protocol ppp //更改链路协议类型为 ppp --- // 链路两边串口设置一样才行 dis int s4/0/0 //查看串口配置 //当只配协议不配IP地址时，状态显示LCP open，IPCP状态关闭 IP add xxx.xxx.xxx.xxx yy //添加ip地址 PPP认证模式PAP和CHAP 模式 备注 PAP Password Authentication Protocol ，密码认证协议，以明文方式直接发送密码，二次握手机制，发起方为被认证方，可以做无限次的尝试（暴力破解），只在链路建立的阶段进行认证，一旦链路建立成功将不再认证。 CHAP Challenge Handshake Authentication Protocol 挑战/质询握手认证协议，以MD5来隐藏密码，三次握手机制，由认证方发起认证，有效避免暴力破解，在链路建立成功后具有再次认证检测机制，目前在企业网的远程接入环境中用的比较常见。 PPP认证配置 命令 备注 aaa local-user wakin password cipher huaweilocal-user wakin service-type ppp （认证方） 创建PPP认证用户 ppp Authentication-mode pap/chap （认证方接口） 开启PAP/CHAP ppp pap local-user wakin password cipher huawei 配置PAP凭证 ppp chap user wakin ppp chap password cipher huawei 配置CHAP凭证 PAP配置 CHAP配置","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"PPP","slug":"PPP","permalink":"http://sakuramuxia.github.io/tags/PPP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记15","slug":"hcia15","date":"2021-04-24T04:56:53.000Z","updated":"2021-05-03T06:08:21.103Z","comments":true,"path":"post/271a.html","link":"","permalink":"http://sakuramuxia.github.io/post/271a.html","excerpt":"","text":"NAT为了解决IPv4地址不够（2012）的问题 网络地址转换技术NAT（Network Address Translation）主要用于实现位于内部网络的主机访问外部网络的功能。当局域网内的主机需要访问外部网络时，通过NAT技术可以将其私网地址转换为公网地址，并且多个私网用户可以共用一个公网地址，这样既可以保证网络互通，又节省了公网地址。 NAT应用场景 企业或家庭所使用的网络为私有网络，使用的是私有地址；运营商维护的网络为公共网络，使用的是共有地址，私有地址不能在公网中路由。 NAT一般部署在连接内网和外网的网关设备上 专线：公网地址是固定的，不是家用的拨号会改变的。 NAT好处 有效避免来自外网的攻击，可以很大程度上提高网络安全性。 控制内网主机访问外网，同时也控制外网主机访问内网，解决了内网和外网不能互通的问题。 NAT类型NAT的实现方式有多种，适用于不同的场景。 实验 静态NAT 静态NAT实现了私有地址和共有地址的一对一映射。 一个公网IP只会分配给唯一且固定的内网主机。 如果希望一台主机优先使用某个关联地址，或者想要外部网络使用一个指定的公网地址访问内部服务器，可以使用静态NAT。 但这种一对一的IP地址映射无法缓解公用地址短缺的问题。 用于服务器一对一保留使用的 一对一 静态NAT配置 命令 备注 nat static enable 开启NAT静态功能 nat static global 公网地址 inside 私网地址 创建静态NAT display nat static 查看静态NAT的配置 nat static enable //全局开启静态nat功能 interface g0/0/1 //进入g0/0/1接口 ip add xxx.xxx.xxx.xxx xx//添加接口ip nat static global xxx.xxx.xxx.xxx inside xxx.xxx.xxx.xxx nat static global xxx.xxx.xxx.xxx inside xxx.xxx.xxx.xxx dis nat static //查看静态NAT配置 动态NAT 动态NAT基于地址池来实现私有地址和共有地址的转换 动态NAT地址池中的地址用尽以后，只能等待被占用的公网地址被释放后，其他主机才能使用它进行访问公网 多对多 动态NAT配置 // 动态NAT配置 nat address-group 1 //配置NAT地址池，范围为0-7 //填写地址池的起止范围 nat address-group 1 xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //配置acl acl 2000 rule 1 permit sou 192.168.0.0 0.0.0.255 //配置acl策略 rule 1 permit //配置所有都通过 int g0/0/1 //今日接口 nat outbound xxx address-group x no-pat //跟静态相似，把一个地址转化成另一个地址，不管是什么端口号或者协议都转发，pat是不同的端口号或者ID会调用不同的地址。 //查看nat转换表 dis nat session all //查看nat转化表 //重新建一个地址池，而不是在原有的地址池中更改，容易报错。 nat address-group 2 nat address-group 2 xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //然后在接口中删除配置的地址池 undo nat outbound xxx address-group x no-pat NAPT NAPT允许多个内部地址映射到同一个共有地址的不同端口。 NAPT（Network Address Port Translation）也称为NAT-PT或PAT，网络地址端口转换，允许多个私网地址映射到同一个公网地址的不同端口。 通常适用于大型企业网络（申请多个固定的公网地址） 多对一 NAPT配置NAPT又称PAT Easy IP又称（SNAT）S代表源 Easy IP适用于小规模局域网中的主机访问Internet的场景。 如：家庭、小型网吧、小型办公室中、这些地方的主机不多，出接口可以通过拨号方式获取一个临时公网IP地址。 Easy IP配置 nat outbound acl编号 //关联出站接口和acl //说明: 代表从这个接口出去的只要满足这个acl的源地址统统转化为 200.10.10.10 ，其他和PAT一样。 NAT服务器（DNAT）D代表目的，从外边的网络访问里边的服务，又称端口映射。 NAT具有“屏蔽”内部主机的作用，但有时内网需要向外网提供服务。 当外网用户访问内网服务器时，NAT Server通过事先配置好的“公网IP地址+端口号” 与“私网IP地址+端口号”间的映射关系，将服务器的“公网IP地址+端口号”根据映射关系替换成对应的“私网IP地址+端口号” 动态域名绑定 花生壳申请动态域名绑定，在出口设备上输入动态域名账号，就会时时的更新 NAT服务器配置 命令 备注 nat server protocol tcp/udp global 公网地址/接口 端口 inside 私网地址 端口 配置NAT服务器 display nat server 验证NAT服务器 --- //说明 int g0/0/1 nat server protocol tcp global ?//当提供服务的公网地址是接口地址的话，不能直接输入地址，如果是接口地址，应该打 current-interface --- nat server protocol tcp global xxx inside xxx.xxx.xxx.xxx yy //NAT配置 端口映射就相当于在出口设备上开洞，外网用户可以扫描到开的端口服务。 VPN就相当于直接将两个私网地址进行通讯，就相当于坐在内网主机的旁边，而且还加密。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"NAT","slug":"NAT","permalink":"http://sakuramuxia.github.io/tags/NAT/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记14","slug":"hcia14","date":"2021-04-24T00:28:30.000Z","updated":"2021-05-03T06:08:06.892Z","comments":true,"path":"post/e7db.html","link":"","permalink":"http://sakuramuxia.github.io/post/e7db.html","excerpt":"","text":"ACL企业网络中的设备进行通讯时，需要保证数据传输的安全可靠和网络的性能稳定。访问控制列表ACL（Access Control List）可以定义一系列不同的规则，设备根据这些规则对数据包进行分类，并针对不同类型的报文进行不同的处理，从而实现对网络访问行为的控制、限制网络流量、提高网络性能、防止网络攻击等等。 ACLAccess Control List ，访问控制列表 ospf 1 //进入OSPF界面 filter-policy ? //过滤策略 filter-policy acl-name //后面跟策略名称 import-route rip route-policy //在导入路由时添加路由策略 //建立route policy route-policy wakin permit node 10 //建立路由策略 if-match ? //条件 // nat技术 nat outbound ? //接口调用acl traffic-filter inbound ? // 入方向调用acl，注意流量的方向走向 traffic-filter outbound ? // 出方向调用acl，注意流量的方向走向 ACL应用场景 ACL可以通过定义规则来允许或拒绝流量的通过。 ACL工作原理 ACL由一条或多条规则组成 每条规则必须选择动作：允许或拒绝 每条规则都有一个id序列号（默认=5，间隔=5） 序列号越小越先进行匹配 只要有一条规则和报文匹配，就停止查找，称为命中规则 查找完所有规则，如果没有符合条件的规则，称为未命中规则 ACL创建后，必须将其应用到某个接口或其他技术内才会生效 应用在接口时必须选择方向：入站或出站（相对设备来判断） 不能过滤由设备自己产生的数据 注意：制定规则时一定要先细后粗 // 命名acl acl name nolol // 第一种方式 acl number 2000 // 第二种方式 //增加描述 description xxx-yyy //用英文表示 ACL规则 每个ACL可以包含多个规则，RTA根据规则来对数据流量进行过滤。 ACL类型分为数字型ACL和命名型ACL 分类 编号范围 参数 基本ACL 2000-2999 源IP地址等 高级ACL 3000-3999 源IP地址、目的IP地址、源端口、目的端口等 二层ACL 4000-4999 源MAC地址、目的MAC地址、以太网协议类型等 用户ACL 5000-5999 用户自定义 正掩码、反掩码、通配符区别： 名称 规则 作用 举例 备注 掩码 连续的1和0 IP地址 255.255.255.0 1对应网络位，0对应主机位 反掩码 连续的0和1 路由协议 0.0.0.255 0必须匹配，1无须匹配 通配符 任意的0和1 ACL 0.0.255.0 0必须匹配，1无须匹配 举例 备注 192.168.0.1 0.0.0.0/0 匹配一个主机地址 192.168.0.0 0.0.0.255 匹配一个网段 192.168.0.1 0.0.0.254 匹配网段内奇数地址 192.168.0.0 0.0.0.254 匹配网段内偶数地址 any=x.x.x.x 255.255.255.255 匹配所有地址 说明：直接写名字定义的ACL，也可以定义ACL的类型 在配置路由时，打正掩码也会自动转换为反掩码，反掩码也就是 4个255减正掩码得到的。 通配符相当于与运算 匹配0的位数 奇数地址只要保证最后一位为1即可 // 直接写名字定义的ACL，也可以定义ACL的类型 acl name nogame ? // 默认为高级adv //查看所有acl dis acl all //查看所有acl //acl允许通过所有 rule per so 0.0.0.0 255.255.255.255 //acl允许通过所有 rule per so any //acl允许通过所有 rule per //acl允许通过所有 ACL配置 命令 备注 acl 2000 创建一个基本acl rule 5 deny/permit source 192.168.1.0 0.0.0.255 配置ACL的规则：拒绝或允许源地址为192.168.1.0 /24网段内的所有流量 acl 3000 创建一个高级ACL rule 5 deny/permit tcp source 192.168.1.0 0.0.0.255 destination 8.8.8.8 0 destination-port eq 80 配置ACL的规则拒绝或允许源地址为192.168.1.0/24网段内到8.8.8.8 的HTTP流量 traffic-filter inbound/outbound acl 2000 在接口调用ACL过滤流量 display acl 2000 验证acl display traffic-filter applied-record 查看设备上所有基于ACL调用情况 rule 5 deny/permit tcp source 192.168.1.0 0.0.0.255 destination 8.8.8.8 0 destination-port eq 80 //默认不写就是全部 rule 2 permit TCP destination-port ? 基本ACL配置 高级ACL配置 基本ACL：允许或拒绝所欲协议，我只关心你从哪里来 高级ACL：我可以知道你从哪里来，到哪里去，去做什么 基本ACL调用离目标近一点 高级ACL调用离源近一点 ACL接口调用方向的建议 1、基本ACL尽量调用在离目标最近的出站接口 2、高级ACL尽量调用在离源头最近的入站接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"ACL","slug":"ACL","permalink":"http://sakuramuxia.github.io/tags/ACL/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记13","slug":"hcia13","date":"2021-04-23T11:30:00.000Z","updated":"2021-05-03T06:07:54.206Z","comments":true,"path":"post/259a.html","link":"","permalink":"http://sakuramuxia.github.io/post/259a.html","excerpt":"","text":"DHCP动态主机配置协议DHCP（Dynamic Host Configuration Protocol） DHCPDynamic Host Configure Protocol ,动态主机配置协议 从BOOTP（Bootstrap Protocol）协议发展而来的。 UDP封装，服务器=67，客户端=68。 动态分配TCP/IP信息（IP地址、子网掩码、默认网关、DNS服务器等）‘ 分配出去的信息是有租期的 查看IP地址池dis ip pool //查看IP地址池 // 抓包IPV4时需要把过滤协议设置成 bootp 查看当前VLAN IP地址池dis ip pool interface vlanifxx all //查看当前VLAN的IP地址 DHCP系统组成 DHCP CLient（客户端） 需要动态获得IP地址的主机 DHCP Services（服务器） 能提供DHCP功能的服务器或网络设备 DHCP Relay （中继） 一般为路由器或三层交换机等网络设备 // 汇聚交换机配置 三层 vlan batch 10 20 //创建VLAN int g0/0/1 //进入接口g0/0/1 p l t //设置接口类型为trunk p t a v all // 允许所有vlan通过 int vlanif 10 //进入vlan10 IP add xxx.xxx.xxx.xxx 24 //配置网关 d th //验证 int vlanif 20 //进入vlan10三层接口 IP add xxx.xxx.xxx.xxx 24 //配置网关 d th //验证 dis IP int b //查看接口IP信息 // 开启DHCP dhcp enable //先打开DHCP总开关 int vlanif 10 //进入三层接口 dhcp select interface //开启dhcp dis ip pool interface vlanifxx all //查看当前VLAN的IP地址 dis ip pool interface vlanifxx used // 查看vlanifxx用到的IP地址 DHCP报文类型 报文类型 含义 DHCP DISCOVER 客户端用来寻找DHCP服务器（广播） DHCP OFFER DHCP服务器用来响应DHCP DISCOVER报文，此报文携带了各种配置信息 DHCP REQUEST 客户端请求配置确认，或者续借租期 DHCP ACK 服务器对REQUEST报文的确认响应 DHCP NAK 服务器对REQUEST报文的拒绝响应 DHCP RELEASE 客户端要释放地址时用来通知服务器 DHCP工作流程 说明：DHCP的特殊性，当客户端没有IP地址时，服务端分配一个IP时，客户端就直接设置成自己的IP，数据链路层中有客户端的MAC地址， ipconfig /release //释放IP地址（客户端） dhcp server dns-list 8.8.8.8 //dhcp服务器开启dns服务（服务端） ipconfig /renew //重新获取IP地址（客户端） dhcp server lease day 0 hour 12 minute 1 // 配置dhcp服务器的释放时间，当配置为0的时候代表永不超时（服务端） dhcp server lease unlimited //永不超时 2的32次方 近43亿（服务端） DHCP租期更新 IP租约期限到达50%时，DHCP客户端会请求更新IP地址租约 DHCP重绑定 说明： 租期在7/8时，DHCP客户端在租约期限到达87.5%时，还没有收到服务器响应，会申请冲绑定IP。 自动保留IP 租期设置建议 // windows 系统中有保留之前IP地址的机制（客户端）数据包中 IP地址释放 如果IP租约到期前都没有收到服务器响应，客户端停止使用此IP地址。 如果DHCP客户端不再使用分配的IP地址，也可以主动向DHCP服务器发送DHCP Release报文，释放该IP地址。（使用命令） dis ip pool interface vlanifxxx used //查看IP地址池中xxx网段使用的地址 dis ip pool interface vlanifxxx expired //查看IP地址池收回的地址 undo dhcp enable //关闭dhcp服务器 dhcp enable //开启dhcp总开关 //关闭dhcp服务器会清楚接口信息 ------------ int vlanif 108 //进入VLAN接口 d th //查看当前配置 dhcp select interface 开启dhcp接口开关 dhcp server dns-list xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //配置dhcp服务端dns服务器 ------------ DHCP地址池（pool）所分配地址的集合 接口地址池的优先级比全局地址池高 命令 备注 dhcp enable 开启DHCP功能 dhcp select interface 关联接口和接口地址池 dhcp server dns-list 地址 配置接口地址池的DNS服务器地址 dhcp server lease 数字 配置接口地址池的租期，默认1天 dhcp server excluded-ip-address 地址 配置接口地址池的排除地址范围 dhcp server static-bind ip-address x.x.x.x mac-address xxxx-xxxx-xxxx 配置静态绑定 dhcp select global 关联接口和全局地址池 ip pool 名称 创建全局地址池 network 地址 配置全局地址池的可分配的网段地址 gateway-list 地址 配置全局地址池的网关地址 dns-list 地址 配置全局地址池的DNS服务器地址 lease 数字 配置全局地址池下的租期，默认1天 excluded-ip-address 地址 配置全局地址池下·的排除地址范围 display ip pool [interface 借口名 all] 查看地址池的属性 ipconfig /release 释放租期 ipconfig /renew 重新获取 说明： 接口地址池，在三层口进行配置，从这个三层口收到的dhcp请求都会以这个三层口的地址分配地址，以及这个三层口的地址作为网关，没有dns。 DHCP接口地址池配置 //一个三层环境 一个VLAN 发送dhcp请求到dhcp服务器 //华为的分配地址方式是逆序 //思科的分配地址方式是顺序 dhcp server excluded-ip-address 192.168.0.100 192.168.0.150 //排除IP地址段100到150 //当地址被使用了，排除IP地址时也会报错，所以在排除IP地址的时候需要先释放IP地址 //防止和重要的设备冲突 DHCP全局地址池配置 // 绑定地址池 --- dhcp enable //开启dhcp服务 ip pool Rooma //定义ip地址池为Rooma network 192.168.10.0 mask 24 //宣告网络 d th //验证配置 gateway-list 192.168.10.1 //设置网关地址 lease day 19 //设置有效期为19 --- int vlanif10 //进入三层接口vlan10 dhcp select global //配置dhcp全局关联 dis ip pool name rooma used//查看全局ip地址池 ip pool Rooma //进入地址池进行绑定 static-bind ip-address x.x.x.x mac-address xxxx-xxxx-xxxx //端口绑定 --- //客户端dns可能也会是同一个地址 //路由器中有dns服务器转发，会问运营商 --- //一般来说dns服务器都在汇聚层，也有可能在核心层，这个时候接入层要想使用DHCP服务就要使用中继，因为到核心层就要跨三层，主机的广播，核心层收不到，汇聚层收到后转给核心层，核心层再转给dns服务器，然后dns服务器再回数据，出口有缺省路由，内部有OSPF动态路由，出口有一个nat，acl。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"DHCP","slug":"DHCP","permalink":"http://sakuramuxia.github.io/tags/DHCP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记12","slug":"hcia12","date":"2021-04-21T05:00:00.000Z","updated":"2021-05-03T06:07:34.104Z","comments":true,"path":"post/e55b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e55b.html","excerpt":"","text":"STP为了提高网络可靠性，交换网络中通常会使用冗余链路，然而，冗余链路会给交换网络带来环路风险，并导致广播风暴以及MAC地址表不稳定等问题，进而会影响用户的通信质量，生成树协议STP（Spanning Tree Protocol）可以在提高可靠性的同时又能避免环路带来的各种问题。 二层网络设计需求和问题 为了提高可靠性，交换机之间会通过多条链路相连，从而避免单点故障。 但同时会带来一些灾难性的环路问题。 dis int Ethernet 2 //进入Ethernet接口 广播风暴 环路会引起广播风暴 网络中的主机会收到重复数据帧 MAC地址表震荡 环路会引起MAC地址表震荡 STP：Spanning TRee Protocol，生成树协议，提供两大功能： 功能 备注 消除环路 通过阻断冗余链路来消除网络中可能存在的环路 链路备份 当活动路径发生故障时，激活备份链路，及时恢复网络连通性。 查看STP堵塞dis stp b // 产看STP堵塞 STP操作通过构造一颗树来消除交换网络中的环路 选举一台根桥 选举一个根端口 选举指定端口 阻塞剩余端口 BPDU：Bridge Protocol Data Unit 桥协议数据单元 使用组播 01-80-C2-00-00-00 STP版本（PVI） STP MSTP RSTP sys //系统配置模式 stp mode stp //更改STP模式 BPDU Type configuration （配置） Topology change Notification （拓扑改变通知） BPDU类型配置BPDU：Configuration 选举根交换机以及确定每个交换机端口的角色和状态。 在初始化过程中，每个桥都主动发送配置BPDU。 在网络拓扑稳定以后，只有根桥主动发送配置BPDU，其他交换机在收到上游传来的配置BPDU，才会发送自己的配置BPDU 发送周期为Hello Time 老化时间为Max Age 拓扑变更通告BPDU TCN BPDU 下游交换机感知到拓扑发生变化时向上游发送的拓扑变化通知 BPDU字段详解 Bridge identifier：自身的ID // 查看stp信息 dis stp brief int g0/0/01 //查看接口的STP信息 桥ID 65535=2的16次方 端口ID dis stp int eth dis stp int Ethernet 0/0/1 //查看对应接口的stp端口信息 路径开销 dis stp // 根路径开销 链路开销标准 查看设置开销int g0/0/1 //进入相关接口 stp cost ? //设置开销 设置 stp开销标准stp pathcost-standard //设置开销标准 STP选举过程根桥选举BID最小的成为根桥（先比较优先级，再比较MAC） 每一台交换机启动STP后，都认为自己是根桥。 根端口选举（ROOT） 非根交换机在选举根端口时分别依据该端口的根路径开销，对端BID，对端PID和本端PID。 指定端口选举（DESI） 非根交换机在选举指定端口时分别依据根路径开销（自己发送出去的），BID，PID 未被选举为根端口或指定端口的端口为预备端口，将会被阻塞。 STP选举案例 选根桥 选根端口 选指定端口 STP端口状态 dis stp bri //查看STP状态 STP的计时器 计时器 配置BPDU报文每经过一个交换机，MessageAge都加1 如果MessageAge大于MaxAge，非根桥会丢弃该配置BPDU STP端口转换 STP拓扑变化 非根桥会在BPDU老化之后开始根桥的重新选举 直连链路故障 非直连链路故障 拓扑改变导致MAC地址表错误 // 清空ARP缓存 引入TCN为了让MAC地址表的默认老化时间更改为15秒 STP配置 命令 备注 stp mode {mstp | stp | rstp } 配置STP模式，缺省为MSTP stp priority 4096 配置BID优先级值，0~61440，步长为4096 stp pathcost-standard｛dot 1d-1998 |dot1t|legacy｝ 配置路径开销值的标准 开销标准： legacy：cost=1200000，华为的私有802.1d标准：cost=165535 sys sys S1 stp mode stp //更改STP模式 stp priority 0 //更改开销值 stp root primary / secondary //指定主备根桥 stp cost //更改入口的stp开销值 // 更改优先级 stp port priority //更改对端PID的优先级","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"STP","slug":"STP","permalink":"http://sakuramuxia.github.io/tags/STP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记11","slug":"hcia11","date":"2021-04-16T05:10:00.000Z","updated":"2021-05-03T06:07:18.249Z","comments":true,"path":"post/e41b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e41b.html","excerpt":"","text":"GARP-GVRPGARP （Generic Attribute Registration Protocol），全称是通用属性注册协议，它为处于同一个交换网内的交换机之间提供了一种分发、传播、注册某种信息（VLAN属性、组播地址）的手段。 GVRP是GARP的一种具体应用或实现，主要用于维护设备动态VLAN属性。 通过GVRP协议，一台交换机上的VLAN信息会迅速传播到整个交换网络 GVRP实现了LAN属性的动态分发、注册和传播，从而减少了网络管理员的工作量，也能保证VLAN配置的正确性。 GARPGeneric Attribute Registration Protocol 通用属性注册协议 在交换机间分发、传播、注册某种信息（VLAN属性、组播地址等）。 主要用于大中型网络中，用来提升交换机的管理效率。 一种协议规范。 GARP消息类型 类型 备注 join 加入，端口加入VLAN Leave 注销，端口退出VLAN Leave All 注销所有 GVRPGARP VLAN Registration Protocol，VLAN注册协议 GVRP基于GARP的工作机制，是GARP的一种应用，传递VLAN信息 sys gvrp //全局开启GVRP int g0/0/0 //进入相关接口 gvrp //开启GVRP dis vlan //查看VLAN GVRP的应用 接收来自其他交换机的VLAN注册信息，并动态更新本地的VLAN注册信息，包括当前VLAN、VLAN成员等。 将本地的VLAN注册信息向其他交换机传播，，以便使同一交换网内所有支持GVRP特性的设备的VLAN信息达成一致。 手动配置的VLAN是静态VLAN，通过GVRP创建的VLAN是动态VLAN。 GVRP传播的VLAN注册信息包含本地手工配置的静态注册信息和来自其他交换机的动态注册信息。 GVRP单向注册 GVRP注册模式Normal //配置GVRP注册模式 int g0/0/1 //进入相关接口 gvrp registration //配置GVRP注册模式 dis gvrp status //验证gvrp状态信息 dis gvrp statistics //查看gvrp统计信息 Forbidden int g0/0/0 //进入接口 gvrp registration forbidden // 配置GVRP为禁止模式 //配置完成之后 g0/0/0 只和 VLAN1 有关 Fixed SWA的g0/0/1端口为Fixed模式，不允许动态VLAN在端口注册或者注销且只发送静态VLAN的声明消息。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"GVRP","slug":"GVRP","permalink":"http://sakuramuxia.github.io/tags/GVRP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记10","slug":"hcia10","date":"2021-04-15T14:30:00.000Z","updated":"2021-05-03T06:07:04.064Z","comments":true,"path":"post/24da.html","link":"","permalink":"http://sakuramuxia.github.io/post/24da.html","excerpt":"","text":"配置交换机接口二层三层转换int g0/0/0 // 创建g0/0/0接口 portswitch //配置交换机接口二层接口 undo portswitch // 配置交换机接口三层接口 交换机的接口类型// 2层物理口 // 3层物理口 // 3层虚拟口 vlanif // 方案1 // 2层物理口+3层虚拟口 // 方案2 // 3层物理口 //在终端设备数据帧不含标签，在三层交换机以上路由器之间也不存在标签 综合实验配置 配置代码:-------------------------------------- //配置交换机SW1 sys sys SW1 vlan ba 10 20 int eth0/0/1 p l a p d v 10 int eth0/0/2 p l a p d v 20 int eth0/0/3 p l t p t a v 10 20 ----------------------------------------- //配置交换机SW2 sys sys SW2 vlan ba 10 20 23 int g0/0/1 p l t p t a v 10 20 int g0/0/2 p l a p d v 23 int vlanif 10 ip add 192.168.10.254 24 int vlanif 20 ip add 192.168.20.254 24 int vlanif 23 ip add 23.0.0.254 24 ospf 1 router-id 2.2.2.2 area 0 net 23.0.0.254 0.0.0.0 net 192.168.10.254 0.0.0.0 net 192.168.20.254 0.0.0.0v -------------------------------------------- //配置交换机SW3 sys sys SW3 vlan ba 23 13 int g0/0/1 p l a p d v 23 int g0/0/2 p l a p d v 13 int vlanif 23 ip add 23.0.0.3 24 int vlanif 13 ip add 13.0.0.3 24 ospf 1 router-id 3.3.3.3 area 0 net 13.0.0.3 0.0.0.0 net 23.0.0.3 0.0.0.0 ----------------------------------------------- //配置路由器R1 sys sys R1 int g0/0/0 ip add 13.0.0.1 24 int lo 1 ip add 1.1.1.1 24 ospf 1 router-id 1.1.1.1 area 0 net 13.0.0.1 0.0.0.0 net 1.1.1.1 0.0.0.255 -----------------------------------------------","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记9","slug":"hcia09","date":"2021-04-14T08:30:00.000Z","updated":"2021-05-03T06:06:43.722Z","comments":true,"path":"post/dc40.html","link":"","permalink":"http://sakuramuxia.github.io/post/dc40.html","excerpt":"","text":"VLANVLAN即虚拟局域网，是将一个物理的局域网在逻辑上划分成多个广播域的技术，通过在交换机上配置VLAN，可以实现在同一个VLAN内的用户可以进行二层互访，而不同VLAN间的用户被二层隔离。这样既能够隔离广播域，又能提升网络的安全性。 VLAN技术背景 交换机的所有接口属于一个广播域，往往也是一个逻辑子网； 用户无法根据业务需要灵活的在交换机上进行广播域的隔离； 随着网络规模越来越大，数量越来越多，广播风暴将给网络带来重大问题； 不进行隔离容易引起广播泛滥 VLAN技术提供了一种灵活的解决方案 将交换机的接口根据业务需要添加到不同的VLAN中，从而实现二层隔离。 说明：划分VLAN后就算在同一个网段，也无法通信，原因在于在一个ARP请求过不去。 VLAN优点： 有效控制广播域范围 增强局域网的安全性 灵活构建虚拟工作组 简化网络管理 VLAN概述Virtual LAN 虚拟局域网 将一个物理局域网在逻辑上划分成多个广播域； 1 VLAN = 1 广播域 = 1 子网； 广播不会在VLAN之间转发，而是被限制在各自的VLAN中； 不同VLAN间的设备默认无法通信，需要第三层设备才能实现互通； VLAN范围0~4095共4096个（0和4095为保留、1为默认） VLAN标签介绍 通过Tag区分不同VLAN IEEE 802.1q:dot1q,是VLAN的正式标准，对Ethernet帧格式进行了修改，在源MAC地址字段和协议类型字段之间加入4字节的802.1q Tag 每台支持802.1q协议的交换机发送的数据包都会包含VLAN ID，以指明交换机属于哪一个VLAN。因此，在一个VLAN交换网络中，以太网帧有以下两种形式： VLAN链路类型 类型 备注 AccessLink接入链路 用于连接主机和交换机的链路。接入链路上传输的帧都是untagged帧。 TrunkLink干道/中继链路 用于交换机间的互连或交换机与路由器之间的链路。干道链路上传输的帧几乎都是tagged帧用于两端识别。 dis port vlan // dis vlan //查看 PVID： 即Port VLAN ID ，代表端口的缺省VLAN X7系列交换机每个接口PVID=1 int eth int Ethernet0/0/11 //进入接口 VLAN端口类型 类型 备注 Access接入端口 用于连接主机收到数据后会添加VLAN Tag，VLAN ID和端口PVID相同从相同的PVID转发出去转发数据前会移除VLAN Tag 带标签后，终端是无法识别的，终端设备发的时候不带标签，收的时候也不带标签。交换机收的时候不带标签，发的时候也不带标签，交换机内部带标签。如果交换机收到数据帧是带标签的，保留。 sys int g0/0/0 //进入接口 port link-type ? //更改接口类型 int g0/0/2 //进入接口 p l a //缩写命令 //更改PVID port default vlan 2 //更改PVID的接口为2 port trunk allow-pass vlan 10 to 20 //允许trunk 10 到20 接口通过 类型 备注 Trunk干道端口 用于连接交换机或路由器，收到帧时，如果该帧不包含Tag，将打上端口的PVID；如果该帧包含Tag，则不改变。发送帧时，该帧的VLAN ID在Trunk的允许发送列表中：若与端口的PVID相同时，则剥离Tag发送若与端口的PVID不同时，则直接发送Trunk为1则代表允许VLAN1的流量通过如果没有Trunk，则代表只能多接好几根线，一根线一个VLAN 类型 备注 Hybrid 既可以连接主机，又可以连接其他交换机既可以充当Access角色，又可以充当Trunk角色既可以连接接入链路又可以连接干道链路允许多个VLAN的帧通过，并可以在出接口方向将某些VLAN帧的Tag剥掉（由命令决定） VLAN转发流程 VLAN规划基于端口最为常见 VLAN配置 命令 备注 vlan 10 创建单个vlan vlan batch 10 to 20 创建多个vlan port link-type access/trunk/hybird 配置接口类型 port default vlan 10 配置Access关联VLAN/PVID port trunk allow-pass vlan 10 配置Trunk允许VLAN默认只允许VLAN1 port trunk pvid vlan 10 配置Trunk 的PVID port hybrid pvid vlan 10 配置Hybird的PVID display vlan 验证VLAN display port vlan 验证VLAN int g0/0/0 //进入相关接口 port link-type access // 配置接口Access类型 p l a // 配置接口Access类型的缩写 dis port vlan //验证port vlan类型缩写= dis por v port default vlan 3 //更改PVID p d v 3 //更改vlan的ID缩写 //配置Trunk int g0/0/0 p l t //配置接口Trunk类型的缩写 port trunk allow-pass vlan 3//配置trunk类型允许通过的vlan port trunk pvid vlan 3 //配置接口trunk类型pvid dis por v //验证VLAN //hybrid模式 port hybrid pvid vlan 3 //配置hybrid vlan ID 等同于 Access port hybrid untagged vlan 3 //剥离VLAN3的标签 port hybrid tagged vlan 3 //包含vlan3标签 注意： 在更改接口类型的时候，要注意如果配置了子命令，应该先删除子命令，再更改接口类型。 Trunk允许VLAN默认为1，思科的设备默认为所有。 创建VLANsys vlan 1 //创建VLAN1 --- vlan batch 10 20 30 to 40 //创建多个vlan 验证VLANdisplay vlan //验证VLAN 配置接口类型---------------------------------- // 配置access int g0/0/0 //进入相关接口 port link-type access //配置接口access dis port vlan //验证接口配置 port default vlan 3 //配置接口的pvid d th //验证配置结果 ----------------------------------- //配置Trunk int g0/0/2 //进入接口 p l t //配置接口类型为Trunk d th // 验证配置 di p v //验证接口配置 port trunk allow-pass v 3 //默认只允许vlan1通过，允许vlan3通过 d th //验证配置 di p v //验证接口配置 port trunk pvid vlan 3 //配置trunk的PVID ------------------------------------------ //配置hybrid //和配置trunk是一样的 int g0/0/3 //进入接口 p l h //配置接口类型为hybrid d th //验证当前配置 d p v //验证接口配置 port hybrid untagged vlan 3 //配置hybrid vlan3 剥离标签 p h unt vlan 3 //配置hybrid vlan3 剥离标签缩写 port hybrid untagged vlan 3 //配置hybrid vlan3 带标签 port hybrid pvid vlan 3 //配置hybrid的PVID p h pv v 3 //配置hybrid的pvid缩写 说明： 不带标签的数据，接口默认允许通过 VLAN间路由部署了vlan的传统交换机不能实现不同VLAN间的二层报文转发，因此必须引入路由技术来实现不同VLAN间的通信，VLAN路由可以通过二层交换机配合路由器来实现，也可以通过三层交换机来实现。 VLAN间通讯限制每个VLAN都是一个独立的广播域，不同的VLAN之间二层就已经隔离，因此属于不同VLAN的节点之间是无法直接互访的。 说明： 路由器不能识别标签，标签只能在交换机之间识别 VLAN间通讯方法（路由） 到路由器的帧不带标签即可 VLAN路由-单臂路由 单臂路由的配置 命令 备注 dot1q termination 关联子接口和VLAN arp Broadcast enable 开启子接口的arp广播功能 ------------------------------------------ //单臂路由的配置 int g0/0/0.1 //创建子接口 dot1q termination vid 10 //关联子接口VLAN ID IP address xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //配置IP地址 arp Broadcast enable //开启子接口的arp广播功能 网关放在那一层比较好？ 园区网放在汇聚层比较好 运营商可以放在接入层 VLAN路由-三层交换 为每个VLAN创建一个VLANIF接口作为网关 配置MLSint vlanif 10 //配置VLAN 接口 IP add xxx.xxx.xxx.xxx y //配置IP地址 //注意:VLAN接口的编号必须对应一个已创建的VLAN vlan ba 2 3 //创建VLAN 2 3 int g0/0/1 //进入接口界面 p l a //配置接口类型为access p d v 2 //配置pvid int g0/0/2 //进入接口界面 p l a //配置接口类型为access p d v 3 //配置pvid int vlanif 2 //创建三层vlanif接口 ip add xxx.xxx.xxx.xxx y // 配置IP地址 q int vlanif 3 //创建三层vlanif接口 ip add xxx.xxx.xxx.xxx y // 配置IP地址 q","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记8","slug":"hcia08","date":"2021-04-11T08:44:00.000Z","updated":"2021-05-03T06:06:29.383Z","comments":true,"path":"post/1c81.html","link":"","permalink":"http://sakuramuxia.github.io/post/1c81.html","excerpt":"","text":"交换基础dis mac-ad //显示mac地址 dis mac-ad aging-time //查看衰老时间 dis ip routing-table //查看路由表 arp -d //清空arp缓存 交换机工作在数据链路层，对数据帧进行操作，在收到数据帧后，交换机会根据数据帧的头部信息对数据帧进行转发。 说明： RIP是封装在UDP上 网络分层设计通过使用分层网络设计原则和条理化设计方法，设计人员可以创建易于管理和易于支持的网络 园区网 交换机主要功能 小型交换网络 交换机工作在数据链路层，转发数据帧； 纯二层交换机只要要求在同一个网段即可互通，只要保证这些设备在同一个广播域； 纯二层交换机不看IP地址，只看MAC地址； 交换机的工作原理根据MAC地址表中的MAC地址记录，做出智能转发 原理 备注 学习Learn 当从一个接口收到帧时，把帧内的源MAC与该接口进行绑定，存入MAC地址表 泛洪Flood 当从一个接口收到广播帧，组播帧，未知单播帧（目标MAC不存在于MAC地址表中）把该帧从所有其他接口转发出去，除了接收口 转发Forward 当从一个接口收到已知单播帧，立即从相应的接口转发出去 更新Update 默认每条记录保存300秒；交换机重启后清空所有接口学习到的记录；接口关闭后会清空该接口学习到的记录；一个源MAC出现在另外个接口上，会删除老的记录，添加新的记录 PS 对于一台交换机来说：一个MAC只能关联在一个接口上；一个接口上可以学习到多个MAC； 说明：目标MAC全F则代表广播帧； 学习MAC地址 交换机将收到的数据帧的源MAC地址和对应接口记录到MAC地址表中。 转发数据帧 当数据帧的目的MAC地址不在MAC表中，或者目的MAC地址为广播地址时，交换机会泛洪该帧。 目标主机回复 交换机根据MAC地址表将目标主机的回复信息单播转发给源主机 以太网接口工作模式 术语 备注 半双工 half-duplex通讯双方都能发送和接收数据，但不能同时进行 全双工 full-duplex通信双方都能同时接收和发送数据 速率 speed接口连接时两端进行协商，协商失败则无法正常通信 //验证网口的参数 dis interface g0/0/0 //查看接口的信息 dis mac-address //查看mac地址信息 //双工模式 //半双工：你发送的时候不能收，你收的时候不能发。 //全双工：发送的同时也可以发送。 基本配置undo negotiation auto //关闭自动协商 speed 100 //设置速率 duplex full //全双工 int g0/0/2 //进入接口 speed ? //设置速率 duplex ? //设置全半双工 验证命令dis interface g0/0/0 //查看接口信息 //如果网络出现卡顿或者其他问题可以查看交换机接口的错误信息； dis mac-address summary //查看交换机存储的mac地址总数；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"交换","slug":"交换","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记7","slug":"hcia07","date":"2021-04-09T10:50:30.000Z","updated":"2021-05-03T06:06:13.064Z","comments":true,"path":"post/d801.html","link":"","permalink":"http://sakuramuxia.github.io/post/d801.html","excerpt":"","text":"获取中... OSPF配置 命令 备注 ospf 1 router-id 1.1.1.1 开启ospf，进程号缺省为1，手动配置Route ID area0/0.0.0.0 配置区域 network 192.168.0.0 0.0.0.255 宣告网络，即指定运行ospf的接口；使用反掩码来匹配（255.255.255.255-掩码） display ospf peer [brief] 显示ospf邻居信息 ospf timer hello 10 修改Hello包发送间隔 ospf timer dead 40 修改Hello包超时时间（默认是4倍关系） display ospf interface g0/0/0 显示ospf接口信息 ospf dr-priority 100 修改ospf接口优先级（在接口下面） ospf Cost 10 修改开销，范围1~65535，缺省为1 bandwidth-reference 100 调整带宽参考值，默认为100Mbps，需要在整个ospf网络中统一进行调整 reset ospf process 重启OSPF进程 说明： 反掩码是根据前边添加的IP地址掩码对应匹配的网络地址或者IP地址 命令的执行在哪个界面使用，看命令的起手,例如ospf …是在接口的界面下更改的，前面没有ospf，是在进程的界面下更改的。 //做完每一步进行验证 dis ospf peer b // 查看是否已经建立好了邻居 //串口的速度为2.048 缺省路由的发布缺省路由：能匹配所有网络，配置方法有以下两种： 方式 备注 静态配置 使用命令：ip route-static 0.0.0.0 0.0.0.0 动态发布 使用动态路由协议进行发布 OSPF缺省路由发布命令ip route-static 0.0.0.0 0 xxx.xxx.xxx.xxx default-route-advertise //缺省路由发布命令 类似于引入的方式 acl 2000 // 建立一个规则 rule 1 permit //permit 允许 nat outbound 2000 // 路由认证 OSFP认证命令： 命令 备注 int g0/0/0 ospf authentication-mode md5 1cipher wakin 配置接口认证 ospf 1 area 0 authentication-mode md5 1 cipher wakin 配置区域认证 PS：如果同时配置，接口认证优先生效 ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //从xxxping到yyy tracert -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //跟踪从xxx到yyy","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记6","slug":"hcia06","date":"2021-04-08T05:50:30.000Z","updated":"2021-05-03T06:05:39.443Z","comments":true,"path":"post/d800.html","link":"","permalink":"http://sakuramuxia.github.io/post/d800.html","excerpt":"","text":"OSPF区域概述 术语 备注 区域（Area） 为了适应大型的网络，OSPF在AS内划分多个区域，区域是以==接口为单位==来划分的，==每个OSPF路由器只维护所在区域的完整链路状态信息== 区域ID（Area ID） 可以表示成一个十进制的数字，如1，也可以表示成一个IP，如0.0.0.1 区域优点 尽量减少路由表条目，使拓扑变化仅影响本区域内部 ospf 1 // 创建进程 area x// 2的32次方 区域的类型 类型 备注 骨干区域 Area0，核心区域也叫==传输区域==（负责在不同的非骨干区域之间分发路由信息） 非骨干区域 非Area 0 也称为常规区域 PS ==所有其他非骨干区域必须和骨干区域直接相连== 类型 备注 IR Internal Route，内部路由器，所有的接口都属于同一区域 BR Backbone Router，骨干路由器，至少有一个接口属于骨干区域 ABR Area Border Router，区域边界路由器，连接一个或者多个区域到骨干区域，至少有一个接口属于骨干区域 ASBR Autonomous System Border Router 自治系统边界路由器 把从其他路由器协议学习到的路由以引入的方式到OSPF进程中 PS 一台路由器可以同时属于多种类型 OSPF核心工作流程： 发现并建立邻居； 传播LSA（区别于距离矢量的路由表更新） ​ Link State Advertisement,链路状态宣告（路况信息） ​ 链路：路由器接口 ​ 状态：描述接口信息（地址、掩码、开销、网络类型、邻居关系等） 将LSA泛洪到区域的所有OSPF路由器，而不是直连的路由器 收集LSA创建LSDB（链路状态数据库、地图） 使用SPF算法计算到每个目标网络的最短距离，并将其置于路由表中 dis ospf peer // 查看ospf邻居 dis ospf lsdb // 查看数据库 dis ospf bri //查看OSPF信息 dis ip routing-table//查看路由表 dis ip routing-table protocol ospf //过滤ospf路由协议 //配置ospf ospf x//创建进程 area x//创建区域 network xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //宣告路由 发现邻居 泛洪LSAs 建立数据库 说明：LSDB是一种数据库 SPF算法 生成路由 OSPF三张表 Route ID 运行OSPF协议前，必须选取一个RID； 用来唯一标识一台OSPF路由器； RID可以手动配置，也可以自动生成； 规则 备注 RID选取顺序规则 1 手动配置（推荐） 2 活动回环接口IP地址最高的 3 活动物理接口上选取IP地址最高的 PS RID选举具有非抢占性，，除非重启OSPF进程 自动配置route id时，ID的选取先看回环口，再看物理口； 配置Route IDospf x route-id xxx.xxx.xxx.xxx //配置RouteID reset ospf process //重启OSPF进程 OSPF数据包结构和类型封装于IP协议之上，IP协议号89 协议号：1代表ICMP；6代表TCP；17代表UDP； OSPF数据包类型（5种） OSPF数据包类型 作用 Hello 建立并维护邻居关系 Datebase Description LSDB的摘要（仅包含LSA包头） Link State Request（LSR） 请求LSA Link State Update（LSU） 发送LSA Link State Acknowledge（LSAck） 对LSU的确认 DB包用于对比路由器间的数据库 OSPF状态机制（7种状态） 状态 备注 失效状态（Down） 没有收到Hello包 初始状态（init） 收到Hello包，但没有看到自己 双向通讯状态（two-way） 收到Hello包，且看到了自己，形成邻居关系 交换初始状态（Exstart） 决定信息交换时路由器的主从关系 交换状态（Exchange） 向邻居发送DD数据包 加载状态（Loading） LSR和LSU交换 完全邻接状态（Full） LSDB同步，形成邻接关系 PS 只有Two-Way和Full是稳定状态 OSPF工作流程（数据包和状态切换过程） OSPF第一阶段是使用Hello包建立双向通信的过程，成为邻居关系。 OSPF第二阶段是通过交换LSDB同步，建立邻接关系 在同一个区域中，路由表可能不一样，邻居表可能不一样，但是数据库是一样的。 OSPF邻居建立条件必须三层直连 Hello报文用来发现和维护OSPF邻居关系 RID唯一 Hello/Dead时间间隔一致 区域ID一致 认证（如果启用了认证）一致 链路MTU大小一致（默认不开启检查，思科默认开启） 子网掩码一致（以太网环境） 网络地址一致 末梢区域设置一致 当出现邻居建立问题时需要从这几方面入手排查 配置OSPFHello时间ospf timer hello x //配置ospf hello时间 //默认Dead时间为hello时间的4倍 OSPF网络类型：基于接口 缺省情况下，OSPF认为以太网的网络类型是广播类型，PPP、HDLC的网络类型是点到点类型 缺省情况下，OSPF认为帧中继（FR），ATM（异步传输）的网络类型是NBMA，BMA广播多路，NBMA非广播多路。 这些接口也是多路访问，因为他是以太网接口，不是因为他有邻居才是多路访问。 改封装（串口）link-protocol ? // 封装类型为 fr hdlc lapb ppp sdlc x25 dis ospf int g0/0/0 // 网络类型验证 p2p 是点到点的类型 broadcast是广播类型 //点到点的是没有MAC地址的 DR和BDR只要是多路访问BMA和NBMA网络中，为了减少邻接关系的数量，从而减少数据包交换次数，最终节省带宽，降低对路由器处理能力的压力，选举DR和BDR。 术语 备注 DR Designed Route，指定路由器，类似班长，总经理 BDR Backup DR，备用DR，类似副班长，副总经理 DRothers 类似普通学生，普通员工 关系 DR、BDR、DRothers之间都保持邻接关系（Full）DRother之间保持邻居关系（Two-Way） 地址 224.0.0.6向DR和BDR发送链路状态更新，224.0.0.5向所有OSPF路由器发送 选举规则 首先比较Hello报文中携带的优先级，优先级范围0~225，默认=1，优先级最高的被选举为DR，优先级次高的被选举为BDR，优先级为0的不参与选举，优先级一致的情况下，比较RID，越发越优先，选举具有非抢占性，除非当DR和BDR都失效或重启OSPF进程 dis ospf int g0/0/0 //查看ospf协议对应接口的信息 dis ospf int lo 1 //查看ospf 回环口的接口信息 //更改回环口ospf的度量值 int lo 1 ospf cost x //输入更改的值即可 dis ospf peer b //查看邻居 //配置ospf sys sys R2 int g0/0/0 ip add xxx.xxx.xxx.xxx yy ospf 1 router-id zzz.zzz.zzz.zzz a j net xxx.xxx.xxx.xxx kkk.kkk.kkk.kkk DR，BDR是基于接口，一个路由器有好多接口， ospf度量值（开销） 在每一个运行OSPF的接口上，都维护着一个接口Cost Cost = 10^8/BW(bps) = 100Mbps/BW = 接口带宽参考值/接口带宽 到一个目标网络的度量值 = ​ 从源到目标所有出站接口的Cost值累加（数据方向） ​ 从源到本路由器沿途所有入站接口的Cost值累加（路有方向） 路由方向看入接口，数据方向看出接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记5","slug":"hcia05","date":"2021-04-03T13:55:06.000Z","updated":"2021-05-03T06:00:27.175Z","comments":true,"path":"post/d940.html","link":"","permalink":"http://sakuramuxia.github.io/post/d940.html","excerpt":"","text":"RIP环路当网络发生故障时，RIP网络有可能产生路由环路； 配置RIP int lo x rip 1 //进程号 ，进程号之间互相独立 ver 2 //版本 net xxx.xxx.xxx.xxx // 宣告这个路由器的路由信息 net yyy.yyy.yyy.yyy // 等等 命令 备注 RIP 1 开启rip进程，进程缺省为1 version 2 开启RIPv2 network xxx.xxx.xxx.xxx 宣告网络，即指定运行RIP的接口，只需要输入接口的==主类网络地址==即可；只有处于此网络中的接口，才能进行RIP报文的接收和发送； rip metricin 5 在接收路由时增加度量值 rip metricout 5 在发送路由时修改度量值 rip split-horizon 开启水平分割，默认开启 rip poison-reverse 开启毒性反转，默认关闭 ==undo rip input== ==禁止接收RIP数据包== ==undo rip output== ==禁止发送rip数据包==//触发更新 ==silent-interface g0/0/0== ==配置被动接口，只收不发== display rip 验证rip信息 display rip int g0/0/0 verbose 验证rip接口相信信息 RIP配置-output int g0/0/0 //进入对应的接口 undo rip output //设置禁止发送rip报文 配置路由器的g0/0/0 接口禁止发送RIP报文 RIP配置-抑制接口 配置g0/0/0接口为抑制状态，只接受RIP报文，不发，被动接口； 此命令的优先级大于rip input 和rip output； 环路避免环路避免-水平分割 路由器从某个接口学到的路由，不会从该路由再发回给邻居路由器。 rip split-horizon // RIP水平分割 环路避免-触发更新 触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文； 环路避免-毒性反转 毒性反转是指路由器从某个接口学到路由后，将该接口的跳数设置为16，并从原接收口发回给邻居路由器； int g0/0/0 rip posion-reverse //开启毒性反转 默认关闭，打开后水平分割失效，毒性反转生效； 查看RIP详细信息dis rip 1 int g0/0/0 //查看rip对应接口信息 dis rip 1 int g0/0/0 verbose //查看rip对应接口详细信息 dis rip 1 // 查看rip1信息 RIP-调整度量值 int g0/0/0 // 进入相关的接口 rip metricout 2 // 在发送路由时修改度量值为2 说明：所有的改变都是为了选路 int g0/0/0 //进入相关的接口 rip metricin 2 // 在接收路由的时候增加度量值为2 1+2 到接收路由器时已经变为3 acl 2000 // acl的作用是 匹配路由 rule 1 permit so xxx.xxx.xxx.xxx 0 // 创建规则，允许x通过路由 filter-policy 2000 import g0/0/0 // 增加一个策略 2000 入方向 接口 OSPF动态路由开放式最短路径优先OSPF（Open Shortest Path First）协议是IETF定义的一种基于链路状态的内部网络路由协议。 RIP是一种基于距离矢量算法的路由协议，存在着收敛慢，易产生路由环路、可拓展性差等问题，目前已逐渐被OSPF取代。 OSPF概述：Open Shortest Path First 开放最短路径优先 大中型网络上使用最为广泛的IGP协议； 链路状态路由协议 无类 使用组播（224.0.0.5 和224.0.0.6） 收敛较快 以开销（cost）作为度量值； 采用的SPF算法可以有效的避免环路； 触发式更新（以较低的频率（每30分钟）发送定期更新，被称为链路状态泛洪） 区域的设计使得OSPF能够支持更大规模的网络 通过LSA的形式发布路由 不支持自动汇总，支持手动汇总 LSA代表路况 汇总 把 4个同网段的IP汇总到一个 OSPF区域概述 术语 备注 区域（Area） 为了适应大型的网络，OSPF在AS内划分多个区域，区域是以==接口为单位==来划分的，==每个OSPF路由器只维护所在区域的完整链路状态信息== 区域ID（Area ID） 可以表示成一个十进制的数字，如1，也可以表示成一个IP，如0.0.0.1 区域优点 ==尽量减少路由表条目，使拓扑变化仅影响本区域内部== ospf 1 // 创建进程 area x// 2的32次方 区域的类型 类型 备注 骨干区域 Area0，核心区域也叫==传输区域==（负责在不同的非骨干区域之间分发路由信息） 非骨干区域 非Area 0 也称为常规区域 PS ==所有其他非骨干区域必须和骨干区域直接相连== 类型 备注 IR Internal Route，内部路由器，==所有的接口都属于同一区域== BR Backbone Router，骨干路由器，至少有一个接口属于骨干区域 ABR Area Border Router，区域边界路由器，连接一个或者多个区域到骨干区域，至少有一个接口属于骨干区域 ASBR Autonomous System Border Router 自治系统边界路由器 把从其他路由器协议学习到的路由以引入的方式到OSPF进程中 PS 一台路由器可以同时属于多种类型","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"}],"author":"湊あくあ"},{"title":"HCIA学习笔记4","slug":"hcia04","date":"2021-04-02T14:55:06.000Z","updated":"2021-05-03T05:59:06.881Z","comments":true,"path":"post/1981.html","link":"","permalink":"http://sakuramuxia.github.io/post/1981.html","excerpt":"","text":"路由备份-浮动静态路由 利用优先级的特性，配置浮动路由； 在主路由失效的情况下，浮动路由会加入到路由表并承担数据转发业务； 在主链路正常情况下，只有主路由会出现在路由表中； 配置验证dis ip routing-table //查看路由表 int g0/0/0 //进入对应接口模式 shutdown //关闭接口 d th // 查看当前配置 dis ip routing-table pro static //查看路由表详细信息 tracert 1.0.0.10 // 跟踪路由 // 写错的路由一定要删除 缺省路由一种特殊的路由，能匹配所有目标网络。 可以通过静态路由配置，也可以通过动态路由协议发布。 在路由表中，以到网络0.0.0.0（掩码为0.0.0.0）的形式出现、 通常用于末梢网络（如：家庭上网、企业出口） 命令 备注 ip route-static 0.0.0.0 0.0.0.0/0 下一跳地址/出接口 配置缺省路由 缺省路由配置 缺省路由是目标网络和掩码都为0的特殊路由； 如果报文的目标地址无法匹配路由表中的任何一项，路由器将选择依照缺省路由来转发报文 Loopback接口回环口，逻辑的、虚拟的接口； 命令 备注 interface loopback 编号 创建或配置一个回环口，创建后，默认up 作用 ==模拟直连网段==，可用于测试；设备管理（稳定）；供其他协议使用（ospf、bgp、mpls等）SNMP Traps消息的源地址；其他用途（用途十分广泛） int lo 2 // 进入回环口2 ip add xxx.xxx.xxx.xxx aa // 配置IP地址 dis ip routing-table // 查看路由表 dis ip int b // 查看接口 ip地址 //网关就是一条缺省路由 //本地网络不需要网关 //windows添加静态路由 rpute print route add xxx.xxx.xxx.xxx aa yyy.yyy.yyy.yyy ipconfig /release // 去除网卡(适配器1)的动态IP地址 ipconfig /renew //为网卡重新动态分配IP地址 ipconfig /all //显示所有网络适配器（网卡）TCP/IP配置 netsh winsock set //重置 Winsock 目录,重置网络编程接口 netsh winhttp reset proxy // 解除代理设置 netsh int ip reset c:/catalog.txt // 重置IP 设置，恢复到默认自动获取IP 和DNS 服务器地址。 nslookup 域名 //查询一台机器的IP地址和其对应的域名,通常它能监测网络中DNS服务器是否能正确实现域名解析它。 ping -a yyy.yyy.yyy.yyy xxx.xxx.xxx.xxx //y为源IP，x为目的IP 小工具：IPOP配置路由的工具； 动态路由路由协议概述： 路由器之间交互信息的一种语言； 共享路由信息； 维护路由表、提供最佳转发路径； 路由协议总览 动态路由的分类： show ip bgp sum //查看bgp的总和 CNNIC // 中国互联网信息中心 类型 备注 IGP（Interior Gateway Protocol）内部网关协议 用于一个AS内部交换路由信息RIP、OSPF、IS-IS EGP（Exterior Gateway Protocol）外部网关协议 用于多个AS之间交换路由信息BGP AS（Autonomous System）自制系统 处于单个管理机制下的网络（如：企业、电信、移动、联通） rip ? // 进程号 ospf ? // 进程号 isis ? // 进程号 //中国电信骨干网 AS 4134 bgp ? // AS号 路由协议分类：根据协议分类 类型 备注 DV（Distance-Vector）距离矢量 基于距离矢量算法，路由器并不了解网络拓扑结构类似路牌，道听途说如：RIP、EIGRP LS（Link-State）链路状态 基于SPF（Shortest Path First，最短路径优先）算法，路由器了解完整的网络拓扑结构，类似地图如OSPF、IS-IS RIP：只看眼前 LSA：链路状态宣告 OSPF：看带宽 有类：不携带掩码； 无类：携带掩码； 根据业务应用： 类型 备注 Unicast Routing Protocol 单播路由协议 如：RIP、EIGRP、OSPF、BGP、IS-IS Multicast Routing Protocol 组播路由协议 如：DVMRP、PIM-SM、PIM-DM 路由协议的操作规则 协议是在接口上运行的； 只能学习和发布相同协议已知的路由信息； 如果不同的路由协议间需要交换路由信息，就需要进行==注入（import）；== rip 1 //创建进程 // 宣告方式一 network xxx.xxx.xxx.xxx //宣告网络 // 注入方式二 //在RIP 1接口环境下注入 import route OSPF 1 // ver 1 RIP v1 版本 // ver 2 RIP v2 版本 路由器收敛 当所有路由表包含相同网络可达性信息 网络（路由）进入一个稳定状态 网络在达到收敛前无法完全正常工作 指标 备注 正确性 能够正确找到最优的路由，且无闭环 快收敛 当拓扑结构发生变化之后，能够迅速作出相应的路由改变 低开销 协议自身的开销（内存、CPU、网络带宽）最小 安全性 协议自身不易受攻击，有安全机制 普适性 适应各种拓扑结构和各种规模的网络 RIP路由信息协议（Routing Information Protocol）的简称，它是一种基于距离矢量（Distance Vector）算法的协议，使用跳数作为度量来衡量到达目的网络的距离。RIP主要应用于规模较小的网络中。 特点： 距离矢量路由协议，属于IGP协议； 适用于中小型网络，有RIPV1和RIPv2两个版本； 基于UDP，目标端口号520； 周期性更新约30s一次； 支持水平分割。毒性逆转和触发更新等防环特性； 工作原理： 路由器运行RIP后，会首先发送路由器更新请求，受到请求的路由器会发送自己的RIP路由进行响应。 网络稳定后，路由器会周期性发送路由更新信息。 RIP-度量 RIP使用跳数作为度量值来衡量到达目的网络的距离； 缺省情况下，直连网络的路由跳数为0，当路由器发送路由更新时，会把度量值加1； RIP规定超过15跳为网络不可达； 组播地址：224~239 RIP V1广播，V2组播 RIPv1和RIP v2的区别 RIPv1是有类路由协议，不支持VLSM和CIDR； 以广播的形式发送报文； 不支持认证； RIPv2是无类路由协议，支持VLSM支持路由聚合与CIDR； 支持以广播或者组播（224.0.0.9）方式发送报文； 支持明文认证和MD5密文认证； RIP环路当网络发生故障时，RIP网络有可能产生路由环路； 配置RIPrip 1 ver 2 net xxx.xxx.xxx.xxx // 宣告这个路由器的路由信息 net yyy.yyy.yyy.yyy // 等等","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记3","slug":"hcia03","date":"2021-04-01T13:15:06.000Z","updated":"2021-05-03T05:57:09.082Z","comments":true,"path":"post/dbc0.html","link":"","permalink":"http://sakuramuxia.github.io/post/dbc0.html","excerpt":"","text":"// 强者把脆弱给自己看，弱者把脆弱给别人看 // 人心惟危，道心惟微 // 思往日身者，见未来远 // 三省 VRP远程管理Telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理 允许终端远程登录到任何可以充当Telnet服务器的设备。 Telnet服务器和终端之间无需直连，只需保证两者之间可以互相通信即可。 Telnet直连服务 Telnet客户端和服务器基于TCP（端口号=23）连接来传输命令 认证模式 认证模式 描述 AAA 登录时需要用户名和密码 Password 登录时只需要密码 配置命令 命令 备注 Telnet server enable 开启Telnet服务 display telnet server status 验证Telnet服务 user-interface vty 0 4 进入VTy配置模式 authentication-mode password/aaa 配置认证模式 set authentication password cipher huawei 配置认证密码 user privilege level 15 配置用户级别 user-interface maximum-vty 15 配置最大VTY会话数量 aaa 进入AAA配置模式 local-user xxx password cipher xxx 创建用户和密码 local-user xxx privilege level 15 配置用户级别 local-user xxx service-type telnet 配置用户可用服务 dis tel ser st//简写 user-interface console 0//默认console口有一个admin账号aaa权限 dis current-configuration//查看当前配置 dis ip route //查看当前路由表 dis ip int b //? ==动手实践项目：实验拓扑== VRP文件系统华为网络设备的==配置文件==和==系统文件== 管理设备存储 管理项目 命令 管理项目 命令 管理项目 命令 修复文件系统异常的存储设备 fixdisk 创建目录 mkdir 显示文件的内容 more 格式化存储设备 format 重命名 rename 拷贝文件 copy 管理目录/文件 查看当前的工作目录 pwd 移动文件 move 管理项目 命令 改变当前目录 cd 重新命名文件 rename 恢复删除文件 undelete 显示文件或目录信息 dir 压缩文件 zip 删除目录 rmdir 删除文件 delete 执行批处理文件 execute 彻底删除回收站中的文件 reset d // 文件夹 r w x// x 可执行文件 reset recycle-bin // 清空回收站 delete unreserved xxx.xxx// 彻底删除文件 rename xxx.xxx yyy.yyy //重命名文件 copy xxx.xxx /yyy/zzz/aaa.aaa //把xxx 复制到yyy/zzz/目录并且把文件名改成aaa.aaa save // 保存配置 dis save-configuration file //查看当前保存的配置文件 compare configuration //对比当前配置文件和下次启动配置对比 reset save-configuration //重置配置文件 reboot //重启设备 华为的配置文件都保存在vrpcfg.zip中 系统启动文件查询 命令 功能 display startup 查看系统启动配置参数//升级降级系统 系统启动配置文件修改 命令 功能 startup saved-configuration 配置系统下次启动时使用的配置文件 startup saved-configuration /xxx/yyy/aaa.aaa //更改下次启动配置文件 startup system-software /xxx/yyy/bbb.bbb //更改下次启动系统文件 dis startup VRP系统管理文件传输网络设备可以从服务器获取VRP系统文件，也可以将日志文件、配置文件、保存到服务器作为备份。 文件传输协议FTP（TCP）、TFTP（UDP） 常见的有FTP和TFTP两种； Xlight 软件 创建FTP服务器 windows端 从FTP服务器获取VRP文件更新ftp xxx.xxx.xxx.xxx //远程到ftp服务器 dis ip int b //查看接口IP地址 //配置IP地址 sys int g0/0/1 ip add xxx.xxx.xxx.xxx //下载FTP服务器的文件 get xxx.xxx put xxx.aaa // 报错时，配置服务用户权限没有给 //cisco TFTP server //TFTP协议传输软件 从TFTP服务器获取VRP文件更新//打开 Cisco TFTP server ，开启TFTP服务 tftp xxx.xxx.xxx.xxx get aaa.bbb //下载文件 tftp xxx.xxx.xxx.xxx put aaa.bb //上传文件 路由技术 术语 备注 类比 路由 从源头到目标的路径不同网络间的转发过程 火车 路由表 路由信息的集合路由的依据 时刻表 路由器 具有路由功能的设备 火车站 默认网关 通常是路由设备的接口IP地址 火车站的地址 经过一次路由，TTL减1。 路由过程：IP路由过程 /32 // 代表一个回环口 ip route-static xxx.xxx.xxx.xxx aa yyy.yyy.yyy.yyy //增加路由 // 最长匹配原则 当路由器（或其他三层设备）收到一个IP数据包时，会查看数据包的IP头部中的==目的IP地址==，并在路由表中进行查找，在匹配到最优路由后，将数据包扔给该路由所指的出接口或下一跳。 路由器转发数据包 路由器需要知道下一跳和出接口才能将数据转发出去。 dis ip routing-table protocol static //详细路由情况查询 ==路由选路== 路由器负责为数据包选择一条最优路径，并进行转发； 路由器的工作内容： 收到数据包查看目标IP地址 在路由表中选择最佳路径 维护路由表 路由表解析：dis ip routing-table //查看路由表 // 配路由一定要有图 // 路由表中存放的都是最优的 路由表字段 备注 Destination 目标，用来标识IP包的目标地址或目标网络 Mask 掩码，选择最佳路由的重要判断依据（最长匹配原则） NextHop 下一跳，指明IP包所经路由的下一个路由器的接口地址 Interface 出接口，指明IP包将从该路由器的哪个接口转发出去 Protocol 协议，路由的来源、学习方式 Preference 优先级，比较不同路由来源到达==相同目标网络==的优先级越低越优先 Cost 度量值，比较相同路由来源到达==相同目标网络==的不同路径的优先级越低越优先 路由的优先级 路由度量 等价路由对于同一个路由来源，当达到同一个目标网络有几条相同度量值的路由时，这些路由都会被加入到路由表中，数据包会在这几个链路上进行负载分担。（ECMP） 负载分担：根据路由器的算法选路，源IP和目的IP 最长匹配原则：最终数据包匹配最佳路由的算法 路由表的形成、路由的来源： 路由来源 备注 直连路由 路由器接口上的网络（接口配置了IP地址并且开启） 静态路由 管理员手工添加的网络 动态路由 路由器之间学习到的网络 静态路由配置命令 命令 备注 ip route-static ==目标网络== ==子网掩码==/前缀 ==下一跳/出接口== 配置静态路由 如果出接口为以太网接口，则必须要指定下一跳地址 如果出接口为串口，可以使用下一跳或出接口来配置 切记：通讯是双向的，不要忘记配置返回流量的路由 注意：任何时候能写下一跳就写下一跳 静态路由配置 ip route-s xxx.xxx.xxx.xxx aa bbb.bbb.bbb.bbb//配置静态路由 负载分担 静态路由支持到达同一目标网络的等价负载分担 数据包会在去的时候走一条路，回来的时候走另一条路； 路由备份-浮动静态路由 说明：和负载分担不同的是这两条路的速度可能不一样，一个是千兆，一个是百兆。正常情况走千兆，异常情况走百兆。 利用优先级的特征，配置浮动路由； 在主路失效的情况下，浮动路由会加入到路由表并承担数据转发业务； ip route-static xxx.xxx.xxx.xxx aa bbb.bbb.bbb.bbb preference yyy // 更改优先级 默认是60","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"ARP","slug":"ARP","permalink":"http://sakuramuxia.github.io/tags/ARP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记2","slug":"hcia02","date":"2021-03-30T13:06:13.000Z","updated":"2021-05-03T05:56:44.094Z","comments":true,"path":"post/1b01.html","link":"","permalink":"http://sakuramuxia.github.io/post/1b01.html","excerpt":"","text":"IP地址基础 在IP网络中，通信节点需要一个IP地址 以点分十进制表示，由32位二进制组成； 分为网络位和主机位两部分： ​ 网络位，代表IP地址所属的网段，表示同一个房间； ​ 主机位，代表网段上的某个节点，表示某一个座位； ​ 由子网掩码决定分界点 ； IP地址的分类根据第一组八位二进制 能被主机使用的是ABC三类； D类地址用于组播技术； 0开头的地址代表所有地址或无地址； 127开头的地址代表自己； 私有IP地址空间 地址范围 10.0.0.0/8 10.0.0.0到10.255.255.255 172.16.0.0/16 172.16.0.0到172.31.255.255 192.168.0.0/24 192.168.0.0到192.168.255.255 公网地址 用于Internet，向ISP付费申请，全球唯一 私网地址 用于企业内部网络，不能用于Internet，免费使用，可以重复 地址转换 使用私网地址如果要访问Internet，必须转换为公网地址，该技术称为NAT 子网掩码 区分网络部分和主机部分； 1表示网络位，0表示主机位（ 连续的1和0） 网络地址，主机地址，广播地址：每个网段上都有两个特殊地址（最小和） 网络地址 ==主机位==全为0，代表一个网段（头）比作房间 主机地址 主机位不全为0也不全为1，代表一个网段内的一个节点，比作座位 广播地址 ==主机位==全为1，代表一个网段内的所有节点（尾） 注意： 子网掩码 /32既是主机地址又是网络地址，又是广播地址； 子网掩码把网络地址和主机地址变小或变大； 子网掩码连续的1和连续的0 子网掩码 用于区分网络部分和主机部分； 1表示网络位，0表示主机位（连续的1和0） 在设计网络时使用有类IP地址会造成地址的浪费 不同的网段用路由器 子网划分 满足不同网络对IP地址的需求； 实现网络的层次性； 节省IP地址； 默认子网掩码可以进一步划分，成为变长子网掩码； 即网络位向主机位“借位”； 公式： 数学问题： ​ 块=2^主机位数=256-掩码； ​ 找块最接近主机的倍数（一个小于，一个大于）； 数据转发过程TCP/IP协议簇和底层协议配合，保证了数据能够实现端到端的传输。数据传输过程是一个非常复杂的过程，例如数据在转发的过程中会进行一系列的封装和解封装。 网关：Gateway 位于不同网络间的主机要实现通讯，必须把数据包发送给网关； 网关通常就是一台三层网络设备（路由器、三层交换机、防火墙、服务器）； 网关地址就是设备的接口地址； route print 打印路由表 数据转发过程：数据包在相同网段内或不同网段之间转发所依据的原理基本一致。 TCP封装 当主机建立了到达目的地的TCP连接后，便开始对应用层数据进行封装。 IP封装 查找路由 ARP 通过ARP缓存表找到吓一跳的MAC地址； 如果表项里没有吓一跳的MAC地址，主机A会发送ARP请求； 以太网封装 数据帧转发 网关（RTA）收到帧后，检查==FCS==和目的MAC地址，通过后即系解封帧； FCS：校验 数据包转发过程 网关检查是否具有到达目的网络的路由条目。 如果存在转发路径，则为数据包添加一个新的二层帧头和帧尾，并继续转发。 数据帧解封装 RTB以服务器A的MAC地址作为目的MAC继续转发； 服务器A收到该数据帧后，发现目的MAC为自己的MAC，于是会继续处理该数据帧； 数据包解封装 服务器A检查数据包的目的IP地址，发现目的IP与自己的IP地址相同； 服务器A剥掉数据包的IP头部后会送往上层协议TCP继续进行处理； 数据段解封装 服务器A检查TCP头部的目的端口，然后将数据段发送给应用层的HTTP协议进行处理。 单播、广播、组播根据目标地址判断 单播：一对一； 广播：发送给所属广播域内的所有目标；MAC地址=FFFFFFFFFFFF；IP地址=该网段的广播地址； 组播：发送给一组目标,MAC地址=01-00-5E开头，IP地址=D类组播地址； 接收规则： 接受地址包括本卡MAC地址、广播地址和本机所属组播组地址； 网卡丢弃与本卡接收地址不匹配的帧； 网卡解开与本卡接收地址匹配的帧，将数据递交给上层处理； 交换机有MAC地址表； 路由器有IP路由表； 集线器：信号复制器，物理层； 集线器：不分冲，不分广；（冲突域，广播域）； 交换机：分冲，不分广； 路由器：分冲，分广； 冲突域（上），广播域（下）个数。 VRP基础dis version //查看设备硬件信息 d th // dis http services state //查看HTTP服务是否打开 dis vlan //查看VLAN sysname xxx //配置名字 dis users // 查看使用用户名 交换机可以隔离冲突域，路由器可以隔离广播域，这两种设备在企业网络中应用十分广泛，VRP（Versatile Routing Platfrom）通用路由平台是华为公司数据通信产品的通用操作系统平台。 管理形式 备注 本地管理Local 通过Console线连接Console或MINI USB口，终端使用==Serial协议==适合初始化，故障处理，系统升级，同时只能支持==一个会话。== 远程管理Remote 通过IP地址或域名联机虚拟==VTY口==，使用T==elnet或SSH协议==适合后期维护、异地管理、同时可以支持多个会话、 VRP基础配置 设备初始化启动： dis ip int b // 命令行视图 命令行帮助 命令快捷键ctrl + a //把光标移动到当前命令行的最前端 ctrl + e //把光标移动到当前命令的最后端 ctrl + c //停止当前命令的运行 ctrl + z //回到用户视图 ctrl + ] //终止当前连接或切换连接 视图的切换 命令 功能 system-view 从用户视图进入系统视图 quit 从系统视图返回到用户视图 return 从任意的非用户视图返回到用户视图 sys // 系统视图 int lo 1 //配置接口 ospf 1 //配置路由 sys xxx //自定义名字 //配置IP地址，首先需要进接口模式 int lo 1 ip add xxx.xx.xx.xx xx //配置其他模式的，先退出模式,再配置，也可以直接配置。 q //简写 = interface = int //敲白板 历史命令的调用 命令 功能 display history-command 显示历史命令 上光标 调用上一条历史命令 下光标 调用吓一跳历史命令 上下键 白板复制修改即可 dis hi + \"TAB\"= dis history command 基本配置步骤配置设备名称 命令 功能 sysname 配置设备名称 配置系统时钟 命令 功能 clock timezone 设置所在时区 clock datetime 设置当前时间和日期 clock daylight-saving-time 设置采用夏时刻 //用户模式的状态下 clock timezone BJ add 08:00:00 clock datetime 10:20:30 2021-03-30 display clock // 查看时间 配置标题消息 命令 功能 header login 配置在用户登陆前显示的标题消息 header shell 配置在用户登录后显示的标题消息 header login information \"xxxxx\"; header shell information \"xxxxx\"; header login information \"/回车 xxxxx /回车\" 用户界面 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 display diagnostic-information 显示设备所有状态信息 system-view user-interface vty 0 4 配置用户界面命令 命令 功能 idle-timeout 设置超时时间 screen-length 设置指定终端屏幕的临时显示行数 history-command max-size 设置历史命令缓存区的大小 配置登陆权限 命令 功能 user privilege 配置指定用户界面下的用户级别 set authentication password 配置本地认证密码 命令等级 用户等级 命令等级 名称 0 0 访问级 1 0 1 监控级 2 0 1 2 配置级 3-15 0 1 2 3 管理级 配置接口IP地址 命令 备注 display [IP] interface brief 查看接口摘要信息 // 简称 dis int b // *down=人为手动关闭 // undo 关闭命令 dis ip int b // 三层口，显示有IP dis mac-address 状态信息查询 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 ==display diagnostic-information== 显示设备所有状态信息 d th //这个模块配置的东西 说明：思科 show = display display diagnostic-information xxx.txt //把显示信息保存在文件中 VRP远程管理telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记1","slug":"hcia01","date":"2021-03-29T16:53:06.000Z","updated":"2021-05-03T05:55:59.842Z","comments":true,"path":"post/1a41.html","link":"","permalink":"http://sakuramuxia.github.io/post/1a41.html","excerpt":"","text":"开始计算机网络的定义计算机网络是一组自治计算机互联的集合 网络的组成设备Device；介质Media；报文Date；协议Protocol；信息源source（发送方）和信息目Destination（接收方）； 网络的演进ISP：Internet Services Provider，因特网服务提供商； 最后一公里接入：宽带； 网络的类型覆盖范围不同组网技术不同（二层 物理层 数据链路层） 协议网络通信中的语言：汉语英语； note：ping IP地址 -t 一直ping 网络拓扑用来面熟网络结构（网络类型、设备类型、设备数量、线缆、带宽、服务、数据走向） 拓扑类型点到点；星型； 网络模型网络打通：路由、交换技术即可； 防火墙可以替代路由器； 分层思想==将复杂的流程分解为几个功能相对单一的子过程==； 网络标准化规范不同的互联标准，兼容； 两大模型==OSI模型：== 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（七层）； ==协议位于的层数：== DNS，HTTP， 位于应用层； TCP/IP，UDP，位于传输层； IP，ICMP，位于网络层； ==TCP/IP模型：== 排查问题可以从 网络模型从下往上排查，或者从上往下排查； 抓包工具可以使用wireshark或科来工具进行抓包； 选择好网卡，选择筛选器，选择要抓包的协议类型：icmp，http，dns。 数据的封装和解封 封装：应用数据需要经过每一层处理后通过网络传输到目的端； OSI把每一层数据称为PDU（protocol Data Unit，协议数据单元）； TCP/IP根据不同层分别使用了段，包，帧，比特。 逐层向下传递数据，并添加报文和报尾的过程称为封装（打包）； 反之，接收方需要逐层向上传递数据，称为解封（拆包）； 常用的应用层协议 DNS HTTP SMTP与POP3/IMAP Telnet FTP与TFTP DNS： Domain Name System，域名解析系统； 建立IP地址与域名之间的映射关系； 将域名解析为IP地址； 将IP地址解析为域名； 常见的DNS服务器：114.114.114.114/ 223.5.5.5/223.6.6.6/180.76.76.76 DNS专门调试模式： nslookup //再输入域名 ipconfig/displaydns //查看DNS缓存 ipconfig/flushdns //清空DNS缓存 HTTP 协议 超文本传输协议 帮助客户端访问万维网 网页浏览器通过翻译HtML文件来表现文本、图像、音乐、动画及视频等对象、 第六讲抓包练习； SMTP与POP3：邮件服务 协议 备注 SMTP Simple Mail Transfer Protocol，简单邮件传输协议 POP3 Post Office Protocol v3，邮局协议版本3 IMAP Internet Message Access Protocol，互联网邮件访问协议 Telnet协议：终端协议远程管理的主要协议（网络设备、服务器、数据库） 常用终端工具有：SecureCRT、Putty、Xshell telnet应该开了这个服务才能响应； FTP和TFTP 协议 备注 FTP File Transfer Protocol，文件传输协议 TFTP Trivial File Transfer Protocol，简单文件传输协议，不可靠； FTP://服务器的IP或域名/路径/文件名 FTP://用户名:密码:@IP或域名:端口号 传输层传输层定义了主机应用程序之间端到端的连通性，传输层中最为常见的两个协议分别是传输控制协议TCP（Transmission Control Protocol）和用户数据包协议UDP（User Datagram Protocol） 传输层概述 传输层提供端到端的连接： 网络层提供点到点的连接： 传输层端口（port）==怎么查看自己或者目标服务器的端口是否打开==； 端口号用于区分不同的网络服务； 端口号一共有 0 ~ 65535个（2的16次方） 既使用TCP和UDP的服务是DNS； 源端口随机分配，目标端口使用知名端口； 应用客户端使用的源端口号一般为系统中未使用的且大于1023； 目的端口号为服务端开启的服务所侦听的端口，如HTTP缺省使用80； 注意： ping不同有可能是防火墙是开着的； 开着哪些服务，哪些端口是开着的； 传输层要搞明白三个东西：==端口号，TCP/UDP,DNS；== DNS既 会用到TCP也会用到UDP； ping是网络层的技术； telnet（TCP协议）命令 可以探测端口是否开启:IP加端口； 端口扫描：portScanner&amp;stuff工具软件； 常见的协议端口号： 传输层协议 协议 备注 TCP Transmission Control Protocol，传输控制协议； UDP User Datagram Protocol，用户数据报协议； TCP UDP数据包结构对比 TCPTCP是一种==面向连接==的传输层协议，提供==可靠==的传输服务； TCP会话建立－三次握手 类似于打电话： 甲：你好，你是小王吗？ 乙：是的，你是老李吗？ 甲：是的。 TCP会话的确认 TCP会话的拥塞和流量控制 TCP会话的终止-四次挥手 UDP TCP和UDP的对比： 传输控制协议（TCP） 用户数据报协议（UDP） 面向连接 无连接 可靠传输 尽力而为的传输 支持流控及窗口机制 无流控及窗口机制 Http，FTP等 TFTP，DNS，DHCP等 数据链路层与以太网（二层）以太网：Ethnet，当今主导地位的局域网组网技术； 网络标准： 数据链路层的分层设计 LLC Logical Link Control 逻辑链路控制：负责识别网络层的协议类型，接收上层数据包封装后帧后，向下层传递； MAC Media Access Control，介质访问控制；处理硬件设备的物理寻址，定义网络拓扑及数据帧的传递顺序 以太网的帧结构： 说明： 0800表IPV4；86DD代表IPV6；0806代表ARP ping 会产生ICMP协议的包；ping IP -l 2000 网络层ARP：Address Resolution Protocol，地址解析协议，获取MAC地址的东西； 网络设备有数据要发送给另一台网络设备时，必须要知道对方而网络层地址（IP地址）。IP地址由网络层来提供，但是仅有IP地址是不够的，IP数据报文必须封装成帧才能通过数据链路进行发送。数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址，通过目的IP地址而获取目的MAC地址的过程是由ARP协议来实现的。 数据链路层在进行数据封装时，需要目的MAC地址。 arp -a //查看缓存MAC arp -d //清除缓存MAC 说明： MAC：FFFFFFFFFFFF或全0代表广播； 自己问自己，得到回复则代表地址冲突； ICMPInternet控制报文协议，ICMP是网络层的一个重要协议，ICMP协议用来在网络设备间传递各种差错和控制信息，他对于收集各种网络信息、诊断和排除各种网络故障具有至关重要的作用。使用基于ICMP的应用时，需要对ICMP的工作原理非常熟悉。 用于可达性测试； 使用ping命令调用； ping命令的结果： //无法访问主机 //请求超时 防火墙开启了 //传输失败 网关失败 是否在同一个地址段， 在同一个地址段，不需要通过网关直接能ping同； 不在同一个地址段，需要网关找相关的路由； 网关MAC是否有问题； IP协议internet protocol 因特网协议； 网络层位于数据链路层与传输层之间，网络层中包含了许多协议，其中最为重要的协议就是IP协议，网络层提供了IP路由功能，理解IP路由除了要熟悉IP协议的工作机制之外，还必须理解IP编址以及合理地使用IP地址来设计网络； IP的包头结构： 协议号用于标识上层协议; 分片当数据包比链路MTU大时，就可以被被分解为很多的足够小片段的过程； ping命令： ping IP -l 数据包大小; //IPV4可以分段; //IPV6不可以分段; ping IP -f //不允许分片； TTL 生存时间 Time to Live 生存时间； 防止IP数据包在网络内无休止地传输（环路）； 没经过一次路由TTL值就会减1； 当TTL=0的时候，就丢弃数据包； 利用TTL特性，可以实现路由跟踪技术，排错的重要方法之一； ping -i tracert -d //常用重要命令9 TTL的默认值255；64；128； 说明： 网关就相当于一条默认路由； TTL的代码是11,0； 问题： 一去一回TTL会不会两倍消失？ IP地址在IP网络中，通信节点需要一个IP地址； 以点分十进制，由32位二进制 分为网络位和主机位两部分: 网络位，代表IP地址所属的网段； 主机位，代表网段上的某个节点； ​ 由子网掩码决定分界点； 类似为电话号码，国际号，区号，号码； IP地址的分类：根据第一组八位二进制 127是一个环回网卡，回环 是自己； 测试TCP/IP协议栈 组件是否安装；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"Java学习笔记1","slug":"java01","date":"2021-03-29T16:53:06.000Z","updated":"2021-05-03T06:09:57.675Z","comments":true,"path":"post/3326.html","link":"","permalink":"http://sakuramuxia.github.io/post/3326.html","excerpt":"","text":"预知Java语言跨平台原理在需要运行java应用程序的操作系统上，安装一个与操作系统对应的java虚拟机java virtual machine 即可。 jre jdk 的概念1、JRE 是java程序运行时的环境，包含JVM和运行时所需要的核心类库。 我们想要运行一个已知的java程序，那么只需要安装JRE即可。 2、jdk是java程序开发工具包，包含JRE和开发人员使用的工具。 其中的开发工具：编译工具（javac.exe）和运行工具（java.exe）。 jre jdk和JVM的关系JDK的下载和安装官网：www.oracal.com ==JDK安装中，安装路径不要包含中文和空格。所有的开发工具最好安装目录统一。== ==bin 目录 jdk 的各种工具命令。重点掌握== 常用DOS命令​ cmd 盘符名称: 盘符切换 dir 查看当前路径下的内容 cd 进入单级目 cd.. 回退到上一级目录 cd \\ 回退到盘符目录 cls 清屏 exit 退出命令提示符窗口 cd 目录1\\目录2\\目录3… 进入多级目录。 Path 环境变量的配置验证 javac java 正式开始注释注释的分类 ​ 单行注释 ／／ ​ 多行注释 ／＊ ＊／ ​ 文档注释 ／＊＊ ＊／ 暂时不讲 /* Java程序中最基本的组成单元是类， 类的定义格式 public class 类名 { } 这是我定义的Helloworld类 */ public class Helloworld{ public static void main(String[] args){ /* 这是main方法 main方法是程序的入口方法，代码的执行是从main方法开始的 */ // 这是输出语句，\"\"里面的内容是可以改变的 System.out.println(\"HelloWorld\"); } } 关键字被java语言赋予了特定含义的单词 关键字的特点 关键字的字母全部小写 常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。 常量常量在程序运行过程中，其值不可以发生改变的量。 常量分类 常量类型 说明 举例 字符串常量 用双引号括起来的内容 “HelloWorld” 整数常量 不带小数的数字 123 小数常量 带小数的数字 12.21 字符常量 用单引号括起来的内容 ‘’ 布尔常量 布尔值，表示真假 true,false 空常量 一个特殊的值，空值 null 注意：空常量是不能直接输出的。 数据类型数据类型内存占用和取值范围注意：给一个整数，默认是int类型的，给一个浮点数，默认是Double类型的。 变量变量变量：在程序运行过程中，其值可以发生改变的量。 变量定义数据类型 变量名 = 变量值； int a = 10; 变量的使用注意事项 main方法进来这一类，变量名不能重复； 定义变量的时候要赋值； long类型定义后，后面加一个L，因为默认是int类型； float类型定义后，后面要加一个F，因为默认是double类型； 标识符标识符给类，方法，变量等起名字的符号； 标识符的定义规则 由数字、字母、下划线_和美元符组成 不能以数字开头 不能是关键字 区分大小写 常见命名约定小驼峰命名法：方法、变量 标识符是一个单词的时候，首字母小写； 标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写； 大驼峰命名法：类 标识符是一个单词的时候，首字母大写； 标识符由多个单词组成的时候，每个单词的首字母大写； 类型转换自动类型转换表示把一个数据范围小的数值或者变量赋值给另一个表示数据范围大的变量； 注意：byte到char是不可以的，类型不兼容。 强制类型转换表示把一个数据范围大的数值或者变量赋值给另一个表示数据范围小的变量； 格式：目标数据类型 变量名 = （目标数据类型）值或者变量 范例： int k (int)88.88; 运算符算术运算符 符号 作用 + 加 - 减 * 乘 / 除 % 取余 注意：/ 和% 的区别：两个数据做除法，/取结果的商，%取结果的余数； 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算； 字符的 “+”操作字符串的“+”操作赋值运算符int i = 10; i += 20;//把左边和右边的数值做加法操作，结果赋值给左边；包含了强制类型转换 i = i + 20;//int类型是一样的但是又不完全一样； short ==*注意：扩展的赋值运算符（+= -= = /= ）隐含了强制类型转换；== 自增自减运算符 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意： ++和–既可以放在变量的后边，也可以放在变量的前边； 单独使用的时候，++和–无论是放在变量的前边还是后边，结果是一样的； ==参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–；== ==参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作；== 最常见的用法：单独使用； 关系运算符 符号 说明 == 判断表达式的值是否正确，成立为true，不成立为false != 判断表达式的值是否正确，成立为true，不成立为false &gt; 判断表达式的值是否正确，成立为true，不成立为false &gt;= 判断表达式的值是否正确，成立为true，不成立为false &lt; 判断表达式的值是否正确，成立为true，不成立为false &lt;= 判断表达式的值是否正确，成立为true，不成立为false 注意： 关系运算符的结果都是boolean类型，要么是true，要么是false； 千万不要把”==“误写成”=“； 逻辑运算符是用来连接关系表达式的运算符。 当然，逻辑运算符也可以直接连接boolean类型的常量或者变量。 基本逻辑运算符 符号 作用 说明 &amp; 逻辑与 有false则false | 逻辑或 有true则true ^ 逻辑异或 相同为false，不同为true ! 逻辑非 结果正好相反 短路逻辑运算符 符号 作用 说明 &amp;&amp; 短路与 有false则false，但是具有短路效果 || 短路或 有true则true，但是具有短路效果 ==注意区别：== 逻辑与&amp;，无论左边真假，右边都要执行； 短路与&amp;&amp;，如果左边为真，右边执行，如果左边为假，右边不执行； 逻辑或|，无论左边真假，右边都要执行； 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行； 三元运算符 //关系表达式?表达式1:表达式2; a > b ? a : b; //首先计算关系表达式的值； //如果值为true，表达式1的值就是运算结果 //如果值为false，表达式2的值就是运算结果 数据输入 Scanner使用的基本步骤 导包 import java.util.Scanner; ==导包的动作必须出现在类定义的上边；== 创建对象 Scanner sc = new scanner(System.in); ==上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变；== 接受数据 int i = sc.nextInt(); ==上面这个格式里面，只有i是变量名，可以变，其他的都不允许变；== 分支语句流程控制流程控制语句分类 顺序结构：从上到下，从左到右； 分支结构：if switch语句； 循环结构：for循环，while，do …while循环； If语句//格式1 if(关系表达式){ 语句体； } //格式2 if(关系表达式){ 语句体1; }else{ 语句体2; } //格式3 if(关系表达式1){ 语句体1; }else if(关系表达式2){ 语句体2; }else if(关系表达式3){ 语句体3; }else{ 语句体n+1; } 执行流程： 格式1： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体； 如果关系表达式的值为false就不执行语句体； 继续执行后面的语句内容； 格式2： 首先计算关系表达式1的值； 如果值为true就执行语句体1，值为false就执行语句体2； 继续执行后面的语句内容； 格式3： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体1； 如果关系表达式的值为false就执行关系表达式2； 如果关系表达式的值为true就执行语句体2； 如果关系表达式的值为false就执行关系表达式3； … 如果没有任何 关系表达式为true，就执行语句体n+1； ==注意：数据测试时，选择正确数据，边界数据，错误数据；== switch语句//格式 switch(表达式){ case 值1: 语句体1; break; case 值2: 语句体2; break; case 值3: 语句体3; break; default: 语句体n+1; [break;] } 说明： 表达式：取值为byte，short，int，char，JDK5以后可以是枚举，JDK7以后可以是String。 case：后面跟的是要和表达式进行比较的值； break：表示中断，结束的意思，用来结束switch语句； default：表示所有情况都不匹配的时候，就执行该处的内容，和If语句的else相似； 注意： ==在switch语句中，如果case控制的语句体后面不写break，将出现穿透现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束；== 循环结构循环结构的组成 初始化语句； 条件判断语句；boolean类型 循环体语句； 条件控制语句； for循环语句格式//格式 for(初始化语句;条件判断语句;条件控制语句){ 循环体语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是否是true还是false； 如果是false，循环结束。 如果是true，继续执行。 执行循环体语句； 执行条件控制语句； 回到2继续； 案例：水仙花数：任意数字的指定位上的数值如何求 ==先使用整除操作将要求的数字移动到个位上，在使用取余操作取出最后一位上的值== 例如：1234==5==679 先整除10000得到12345，再对10取余得到5； while 循环语句//格式 初始化语句 while(条件判断语句){ 循环体语句; 条件控制语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是true还是false； 如果是true，继续执行； 如果是false，循环结束； 执行循环体语句； 执行条件控制语句； 回到2继续； do while 循环语句//格式 初始化语句; do{ 循环体语句; 条件控制语句; }while(条件判断语句); 执行流程： 执行初始化语句； 执行循环体语句； 执行条件控制语句； 执行条件判断语句，看结果是true还是false； 如果是false，循环结束； 如果是true，继续执行； 回到2继续； 三种循环的区别： for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for和while的区别： 条件控制语句所控制的自增变量，因为归属for循环的语法结构，在for循环结束后，就不能再次被访问了。 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用。 条件控制语句 continue 用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行； break 用在循环中，基于条件控制，终止循环体内容的执行，也就是结束当前的整个循环； 循环嵌套循环里嵌套循环，内层循环看成一个语句体； RandomRandom的作用和使用步骤作用：用于产生一个随机数 使用步骤： ​ 1.导包 import java.util.Random //导包的动作必须出现在类定义的上面； ​ 2.创建对象 Random r = new Random(); //上面这个格式里面，r是变量名，可以变，其他的都不允许变； ​ 3.获取随机数 int number = r.nextInt(10);//获取数据的范围：[0,10)包括0，不包括10 //上面这个格式里面，number是变量名，可以变，数字10可以变，其他的都不允许变","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}],"author":"SakuraMuxia"}],"categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"VRRP配置","slug":"VRRP配置","permalink":"http://sakuramuxia.github.io/tags/VRRP%E9%85%8D%E7%BD%AE/"},{"name":"VRRP","slug":"VRRP","permalink":"http://sakuramuxia.github.io/tags/VRRP/"},{"name":"防火墙","slug":"防火墙","permalink":"http://sakuramuxia.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Eth-Trunk链路聚合","slug":"Eth-Trunk链路聚合","permalink":"http://sakuramuxia.github.io/tags/Eth-Trunk%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"},{"name":"IPsec 配置","slug":"IPsec-配置","permalink":"http://sakuramuxia.github.io/tags/IPsec-%E9%85%8D%E7%BD%AE/"},{"name":"IPsec VPN","slug":"IPsec-VPN","permalink":"http://sakuramuxia.github.io/tags/IPsec-VPN/"},{"name":"信息安全","slug":"信息安全","permalink":"http://sakuramuxia.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"GRE","slug":"GRE","permalink":"http://sakuramuxia.github.io/tags/GRE/"},{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"PPP","slug":"PPP","permalink":"http://sakuramuxia.github.io/tags/PPP/"},{"name":"NAT","slug":"NAT","permalink":"http://sakuramuxia.github.io/tags/NAT/"},{"name":"ACL","slug":"ACL","permalink":"http://sakuramuxia.github.io/tags/ACL/"},{"name":"DHCP","slug":"DHCP","permalink":"http://sakuramuxia.github.io/tags/DHCP/"},{"name":"STP","slug":"STP","permalink":"http://sakuramuxia.github.io/tags/STP/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"GVRP","slug":"GVRP","permalink":"http://sakuramuxia.github.io/tags/GVRP/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"交换","slug":"交换","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"},{"name":"ARP","slug":"ARP","permalink":"http://sakuramuxia.github.io/tags/ARP/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}]}