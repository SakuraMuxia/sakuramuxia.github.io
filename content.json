{"meta":{"title":"慢一点，才更快 | 雨落","subtitle":"","description":"","author":null,"url":"http://SakuraMuxia.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-04-20T16:00:00.000Z","updated":"2021-03-28T09:12:56.615Z","comments":false,"path":"categories/index.html","permalink":"http://sakuramuxia.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-02-12T14:14:36.000Z","updated":"2021-03-29T16:04:51.895Z","comments":false,"path":"about/index.html","permalink":"http://sakuramuxia.github.io/about/index.html","excerpt":"","text":"[れんげ] 与&nbsp; SakuraMuxia&nbsp; （ ） 对话中... bot_ui_ini()"},{"title":"donate","date":"2020-02-13T15:13:05.000Z","updated":"2021-03-28T09:45:37.294Z","comments":false,"path":"donate/index.html","permalink":"http://sakuramuxia.github.io/donate/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-04-21T12:17:58.000Z","updated":"2021-03-29T16:04:10.642Z","comments":true,"path":"comment/index.html","permalink":"http://sakuramuxia.github.io/comment/index.html","excerpt":"","text":"有什么想说的? 有什么想问的?"},{"title":"tags","date":"2020-02-13T12:24:16.000Z","updated":"2021-03-28T10:08:19.939Z","comments":false,"path":"tags/index.html","permalink":"http://sakuramuxia.github.io/tags/index.html","excerpt":"","text":""},{"title":"links","date":"2020-02-13T15:11:06.000Z","updated":"2021-03-28T09:35:28.491Z","comments":true,"path":"links/index.html","permalink":"http://sakuramuxia.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"HCIA学习笔记2","slug":"hcia02","date":"2021-03-30T13:06:13.000Z","updated":"2021-03-30T13:10:08.706Z","comments":true,"path":"post/1b01.html","link":"","permalink":"http://sakuramuxia.github.io/post/1b01.html","excerpt":"","text":"IP地址基础 在IP网络中，通信节点需要一个IP地址 以点分十进制表示，由32位二进制组成； 分为网络位和主机位两部分： ​ 网络位，代表IP地址所属的网段，表示同一个房间； ​ 主机位，代表网段上的某个节点，表示某一个座位； ​ 由子网掩码决定分界点 ； IP地址的分类根据第一组八位二进制 能被主机使用的是ABC三类； D类地址用于组播技术； 0开头的地址代表所有地址或无地址； 127开头的地址代表自己； 私有IP地址空间 地址范围 10.0.0.0/8 10.0.0.0到10.255.255.255 172.16.0.0/16 172.16.0.0到172.31.255.255 192.168.0.0/24 192.168.0.0到192.168.255.255 公网地址 用于Internet，向ISP付费申请，全球唯一 私网地址 用于企业内部网络，不能用于Internet，免费使用，可以重复 地址转换 使用私网地址如果要访问Internet，必须转换为公网地址，该技术称为NAT 子网掩码 区分网络部分和主机部分； 1表示网络位，0表示主机位（ 连续的1和0） 网络地址，主机地址，广播地址：每个网段上都有两个特殊地址（最小和） 网络地址 ==主机位==全为0，代表一个网段（头）比作房间 主机地址 主机位不全为0也不全为1，代表一个网段内的一个节点，比作座位 广播地址 ==主机位==全为1，代表一个网段内的所有节点（尾） 注意： 子网掩码 /32既是主机地址又是网络地址，又是广播地址； 子网掩码把网络地址和主机地址变小或变大； 子网掩码连续的1和连续的0 子网掩码 用于区分网络部分和主机部分； 1表示网络位，0表示主机位（连续的1和0） 在设计网络时使用有类IP地址会造成地址的浪费 不同的网段用路由器 子网划分 满足不同网络对IP地址的需求； 实现网络的层次性； 节省IP地址； 默认子网掩码可以进一步划分，成为变长子网掩码； 即网络位向主机位“借位”； 公式： 数学问题： ​ 块=2^主机位数=256-掩码； ​ 找块最接近主机的倍数（一个小于，一个大于）； 数据转发过程TCP/IP协议簇和底层协议配合，保证了数据能够实现端到端的传输。数据传输过程是一个非常复杂的过程，例如数据在转发的过程中会进行一系列的封装和解封装。 网关：Gateway 位于不同网络间的主机要实现通讯，必须把数据包发送给网关； 网关通常就是一台三层网络设备（路由器、三层交换机、防火墙、服务器）； 网关地址就是设备的接口地址； route print 打印路由表 数据转发过程：数据包在相同网段内或不同网段之间转发所依据的原理基本一致。 TCP封装 当主机建立了到达目的地的TCP连接后，便开始对应用层数据进行封装。 IP封装 查找路由 ARP 通过ARP缓存表找到吓一跳的MAC地址； 如果表项里没有吓一跳的MAC地址，主机A会发送ARP请求； 以太网封装 数据帧转发 网关（RTA）收到帧后，检查==FCS==和目的MAC地址，通过后即系解封帧； FCS：校验 数据包转发过程 网关检查是否具有到达目的网络的路由条目。 如果存在转发路径，则为数据包添加一个新的二层帧头和帧尾，并继续转发。 数据帧解封装 RTB以服务器A的MAC地址作为目的MAC继续转发； 服务器A收到该数据帧后，发现目的MAC为自己的MAC，于是会继续处理该数据帧； 数据包解封装 服务器A检查数据包的目的IP地址，发现目的IP与自己的IP地址相同； 服务器A剥掉数据包的IP头部后会送往上层协议TCP继续进行处理； 数据段解封装 服务器A检查TCP头部的目的端口，然后将数据段发送给应用层的HTTP协议进行处理。 单播、广播、组播根据目标地址判断 单播：一对一； 广播：发送给所属广播域内的所有目标；MAC地址=FFFFFFFFFFFF；IP地址=该网段的广播地址； 组播：发送给一组目标,MAC地址=01-00-5E开头，IP地址=D类组播地址； 接收规则： 接受地址包括本卡MAC地址、广播地址和本机所属组播组地址； 网卡丢弃与本卡接收地址不匹配的帧； 网卡解开与本卡接收地址匹配的帧，将数据递交给上层处理； 交换机有MAC地址表； 路由器有IP路由表； 集线器：信号复制器，物理层； 集线器：不分冲，不分广；（冲突域，广播域）； 交换机：分冲，不分广； 路由器：分冲，分广； 冲突域（上），广播域（下）个数。 VRP基础dis version //查看设备硬件信息 d th // dis http services state //查看HTTP服务是否打开 dis vlan //查看VLAN sysname xxx //配置名字 dis users // 查看使用用户名 交换机可以隔离冲突域，路由器可以隔离广播域，这两种设备在企业网络中应用十分广泛，VRP（Versatile Routing Platfrom）通用路由平台是华为公司数据通信产品的通用操作系统平台。 管理形式 备注 本地管理Local 通过Console线连接Console或MINI USB口，终端使用==Serial协议==适合初始化，故障处理，系统升级，同时只能支持==一个会话。== 远程管理Remote 通过IP地址或域名联机虚拟==VTY口==，使用T==elnet或SSH协议==适合后期维护、异地管理、同时可以支持多个会话、 VRP基础配置 设备初始化启动： dis ip int b // 命令行视图 命令行帮助 命令快捷键ctrl + a //把光标移动到当前命令行的最前端 ctrl + e //把光标移动到当前命令的最后端 ctrl + c //停止当前命令的运行 ctrl + z //回到用户视图 ctrl + ] //终止当前连接或切换连接 视图的切换 命令 功能 system-view 从用户视图进入系统视图 quit 从系统视图返回到用户视图 return 从任意的非用户视图返回到用户视图 sys // 系统视图 int lo 1 //配置接口 ospf 1 //配置路由 sys xxx //自定义名字 //配置IP地址，首先需要进接口模式 int lo 1 ip add xxx.xx.xx.xx xx //配置其他模式的，先退出模式,再配置，也可以直接配置。 q //简写 = interface = int //敲白板 历史命令的调用 命令 功能 display history-command 显示历史命令 上光标 调用上一条历史命令 下光标 调用吓一跳历史命令 上下键 白板复制修改即可 dis hi + \"TAB\"= dis history command 基本配置步骤配置设备名称 命令 功能 sysname 配置设备名称 配置系统时钟 命令 功能 clock timezone 设置所在时区 clock datetime 设置当前时间和日期 clock daylight-saving-time 设置采用夏时刻 //用户模式的状态下 clock timezone BJ add 08:00:00 clock datetime 10:20:30 2021-03-30 display clock // 查看时间 配置标题消息 命令 功能 header login 配置在用户登陆前显示的标题消息 header shell 配置在用户登录后显示的标题消息 header login information \"xxxxx\"; header shell information \"xxxxx\"; header login information \"/回车 xxxxx /回车\" 用户界面 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 display diagnostic-information 显示设备所有状态信息 system-view user-interface vty 0 4 配置用户界面命令 命令 功能 idle-timeout 设置超时时间 screen-length 设置指定终端屏幕的临时显示行数 history-command max-size 设置历史命令缓存区的大小 配置登陆权限 命令 功能 user privilege 配置指定用户界面下的用户级别 set authentication password 配置本地认证密码 命令等级 用户等级 命令等级 名称 0 0 访问级 1 0 1 监控级 2 0 1 2 配置级 3-15 0 1 2 3 管理级 配置接口IP地址 命令 备注 display [IP] interface brief 查看接口摘要信息 // 简称 dis int b // *down=人为手动关闭 // undo 关闭命令 dis ip int b // 三层口，显示有IP dis mac-address 状态信息查询 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 ==display diagnostic-information== 显示设备所有状态信息 d th //这个模块配置的东西 说明：思科 show = display display diagnostic-information xxx.txt //把显示信息保存在文件中 VRP远程管理telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记1","slug":"hcia01","date":"2021-03-29T16:53:06.000Z","updated":"2021-03-29T17:05:20.669Z","comments":true,"path":"post/1a41.html","link":"","permalink":"http://sakuramuxia.github.io/post/1a41.html","excerpt":"","text":"开始计算机网络的定义计算机网络是一组自治计算机互联的集合 网络的组成设备Device；介质Media；报文Date；协议Protocol；信息源source（发送方）和信息目Destination（接收方）； 网络的演进ISP：Internet Services Provider，因特网服务提供商； 最后一公里接入：宽带； 网络的类型覆盖范围不同组网技术不同（二层 物理层 数据链路层） 协议网络通信中的语言：汉语英语； note：ping IP地址 -t 一直ping 网络拓扑用来面熟网络结构（网络类型、设备类型、设备数量、线缆、带宽、服务、数据走向） 拓扑类型点到点；星型； 网络模型网络打通：路由、交换技术即可； 防火墙可以替代路由器； 分层思想==将复杂的流程分解为几个功能相对单一的子过程==； 网络标准化规范不同的互联标准，兼容； 两大模型==OSI模型：== 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（七层）； ==协议位于的层数：== DNS，HTTP， 位于应用层； TCP/IP，UDP，位于传输层； IP，ICMP，位于网络层； ==TCP/IP模型：== 排查问题可以从 网络模型从下往上排查，或者从上往下排查； 抓包工具可以使用wireshark或科来工具进行抓包； 选择好网卡，选择筛选器，选择要抓包的协议类型：icmp，http，dns。 数据的封装和解封 封装：应用数据需要经过每一层处理后通过网络传输到目的端； OSI把每一层数据称为PDU（protocol Data Unit，协议数据单元）； TCP/IP根据不同层分别使用了段，包，帧，比特。 逐层向下传递数据，并添加报文和报尾的过程称为封装（打包）； 反之，接收方需要逐层向上传递数据，称为解封（拆包）； 常用的应用层协议 DNS HTTP SMTP与POP3/IMAP Telnet FTP与TFTP DNS： Domain Name System，域名解析系统； 建立IP地址与域名之间的映射关系； 将域名解析为IP地址； 将IP地址解析为域名； 常见的DNS服务器：114.114.114.114/ 223.5.5.5/223.6.6.6/180.76.76.76 DNS专门调试模式： nslookup //再输入域名 ipconfig/displaydns //查看DNS缓存 ipconfig/flushdns //清空DNS缓存 HTTP 协议 超文本传输协议 帮助客户端访问万维网 网页浏览器通过翻译HtML文件来表现文本、图像、音乐、动画及视频等对象、 第六讲抓包练习； SMTP与POP3：邮件服务 协议 备注 SMTP Simple Mail Transfer Protocol，简单邮件传输协议 POP3 Post Office Protocol v3，邮局协议版本3 IMAP Internet Message Access Protocol，互联网邮件访问协议 Telnet协议：终端协议远程管理的主要协议（网络设备、服务器、数据库） 常用终端工具有：SecureCRT、Putty、Xshell telnet应该开了这个服务才能响应； FTP和TFTP 协议 备注 FTP File Transfer Protocol，文件传输协议 TFTP Trivial File Transfer Protocol，简单文件传输协议，不可靠； FTP://服务器的IP或域名/路径/文件名 FTP://用户名:密码:@IP或域名:端口号 传输层传输层定义了主机应用程序之间端到端的连通性，传输层中最为常见的两个协议分别是传输控制协议TCP（Transmission Control Protocol）和用户数据包协议UDP（User Datagram Protocol） 传输层概述 传输层提供端到端的连接： 网络层提供点到点的连接： 传输层端口（port）==怎么查看自己或者目标服务器的端口是否打开==； 端口号用于区分不同的网络服务； 端口号一共有 0 ~ 65535个（2的16次方） 既使用TCP和UDP的服务是DNS； 源端口随机分配，目标端口使用知名端口； 应用客户端使用的源端口号一般为系统中未使用的且大于1023； 目的端口号为服务端开启的服务所侦听的端口，如HTTP缺省使用80； 注意： ping不同有可能是防火墙是开着的； 开着哪些服务，哪些端口是开着的； 传输层要搞明白三个东西：==端口号，TCP/UDP,DNS；== DNS既 会用到TCP也会用到UDP； ping是网络层的技术； telnet（TCP协议）命令 可以探测端口是否开启:IP加端口； 端口扫描：portScanner&amp;stuff工具软件； 常见的协议端口号： 传输层协议 协议 备注 TCP Transmission Control Protocol，传输控制协议； UDP User Datagram Protocol，用户数据报协议； TCP UDP数据包结构对比 TCPTCP是一种==面向连接==的传输层协议，提供==可靠==的传输服务； TCP会话建立－三次握手 类似于打电话： 甲：你好，你是小王吗？ 乙：是的，你是老李吗？ 甲：是的。 TCP会话的确认 TCP会话的拥塞和流量控制 TCP会话的终止-四次挥手 UDP TCP和UDP的对比： 传输控制协议（TCP） 用户数据报协议（UDP） 面向连接 无连接 可靠传输 尽力而为的传输 支持流控及窗口机制 无流控及窗口机制 Http，FTP等 TFTP，DNS，DHCP等 数据链路层与以太网（二层）以太网：Ethnet，当今主导地位的局域网组网技术； 网络标准： 数据链路层的分层设计 LLC Logical Link Control 逻辑链路控制：负责识别网络层的协议类型，接收上层数据包封装后帧后，向下层传递； MAC Media Access Control，介质访问控制；处理硬件设备的物理寻址，定义网络拓扑及数据帧的传递顺序 以太网的帧结构： 说明： 0800表IPV4；86DD代表IPV6；0806代表ARP ping 会产生ICMP协议的包；ping IP -l 2000 网络层ARP：Address Resolution Protocol，地址解析协议，获取MAC地址的东西； 网络设备有数据要发送给另一台网络设备时，必须要知道对方而网络层地址（IP地址）。IP地址由网络层来提供，但是仅有IP地址是不够的，IP数据报文必须封装成帧才能通过数据链路进行发送。数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址，通过目的IP地址而获取目的MAC地址的过程是由ARP协议来实现的。 数据链路层在进行数据封装时，需要目的MAC地址。 arp -a //查看缓存MAC arp -d //清除缓存MAC 说明： MAC：FFFFFFFFFFFF或全0代表广播； 自己问自己，得到回复则代表地址冲突； ICMPInternet控制报文协议，ICMP是网络层的一个重要协议，ICMP协议用来在网络设备间传递各种差错和控制信息，他对于收集各种网络信息、诊断和排除各种网络故障具有至关重要的作用。使用基于ICMP的应用时，需要对ICMP的工作原理非常熟悉。 用于可达性测试； 使用ping命令调用； ping命令的结果： //无法访问主机 //请求超时 防火墙开启了 //传输失败 网关失败 是否在同一个地址段， 在同一个地址段，不需要通过网关直接能ping同； 不在同一个地址段，需要网关找相关的路由； 网关MAC是否有问题； IP协议internet protocol 因特网协议； 网络层位于数据链路层与传输层之间，网络层中包含了许多协议，其中最为重要的协议就是IP协议，网络层提供了IP路由功能，理解IP路由除了要熟悉IP协议的工作机制之外，还必须理解IP编址以及合理地使用IP地址来设计网络； IP的包头结构： 协议号用于标识上层协议; 分片当数据包比链路MTU大时，就可以被被分解为很多的足够小片段的过程； ping命令： ping IP -l 数据包大小; //IPV4可以分段; //IPV6不可以分段; ping IP -f //不允许分片； TTL 生存时间 Time to Live 生存时间； 防止IP数据包在网络内无休止地传输（环路）； 没经过一次路由TTL值就会减1； 当TTL=0的时候，就丢弃数据包； 利用TTL特性，可以实现路由跟踪技术，排错的重要方法之一； ping -i tracert -d //常用重要命令9 TTL的默认值255；64；128； 说明： 网关就相当于一条默认路由； TTL的代码是11,0； 问题： 一去一回TTL会不会两倍消失？ IP地址在IP网络中，通信节点需要一个IP地址； 以点分十进制，由32位二进制 分为网络位和主机位两部分: 网络位，代表IP地址所属的网段； 主机位，代表网段上的某个节点； ​ 由子网掩码决定分界点； 类似为电话号码，国际号，区号，号码； IP地址的分类：根据第一组八位二进制 127是一个环回网卡，回环 是自己； 测试TCP/IP协议栈 组件是否安装；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"Java学习笔记1","slug":"java01","date":"2021-03-29T16:53:06.000Z","updated":"2021-03-29T17:01:04.143Z","comments":true,"path":"post/3326.html","link":"","permalink":"http://sakuramuxia.github.io/post/3326.html","excerpt":"","text":"预知Java语言跨平台原理在需要运行java应用程序的操作系统上，安装一个与操作系统对应的java虚拟机java virtual machine 即可。 jre jdk 的概念1、JRE 是java程序运行时的环境，包含JVM和运行时所需要的核心类库。 我们想要运行一个已知的java程序，那么只需要安装JRE即可。 2、jdk是java程序开发工具包，包含JRE和开发人员使用的工具。 其中的开发工具：编译工具（javac.exe）和运行工具（java.exe）。 jre jdk和JVM的关系JDK的下载和安装官网：www.oracal.com ==JDK安装中，安装路径不要包含中文和空格。所有的开发工具最好安装目录统一。== ==bin 目录 jdk 的各种工具命令。重点掌握== 常用DOS命令​ cmd 盘符名称: 盘符切换 dir 查看当前路径下的内容 cd 进入单级目 cd.. 回退到上一级目录 cd \\ 回退到盘符目录 cls 清屏 exit 退出命令提示符窗口 cd 目录1\\目录2\\目录3… 进入多级目录。 Path 环境变量的配置验证 javac java 正式开始注释注释的分类 ​ 单行注释 ／／ ​ 多行注释 ／＊ ＊／ ​ 文档注释 ／＊＊ ＊／ 暂时不讲 /* Java程序中最基本的组成单元是类， 类的定义格式 public class 类名 { } 这是我定义的Helloworld类 */ public class Helloworld{ public static void main(String[] args){ /* 这是main方法 main方法是程序的入口方法，代码的执行是从main方法开始的 */ // 这是输出语句，\"\"里面的内容是可以改变的 System.out.println(\"HelloWorld\"); } } 关键字被java语言赋予了特定含义的单词 关键字的特点 关键字的字母全部小写 常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。 常量常量在程序运行过程中，其值不可以发生改变的量。 常量分类 常量类型 说明 举例 字符串常量 用双引号括起来的内容 “HelloWorld” 整数常量 不带小数的数字 123 小数常量 带小数的数字 12.21 字符常量 用单引号括起来的内容 ‘’ 布尔常量 布尔值，表示真假 true,false 空常量 一个特殊的值，空值 null 注意：空常量是不能直接输出的。 数据类型数据类型内存占用和取值范围注意：给一个整数，默认是int类型的，给一个浮点数，默认是Double类型的。 变量变量变量：在程序运行过程中，其值可以发生改变的量。 变量定义数据类型 变量名 = 变量值； int a = 10; 变量的使用注意事项 main方法进来这一类，变量名不能重复； 定义变量的时候要赋值； long类型定义后，后面加一个L，因为默认是int类型； float类型定义后，后面要加一个F，因为默认是double类型； 标识符标识符给类，方法，变量等起名字的符号； 标识符的定义规则 由数字、字母、下划线_和美元符组成 不能以数字开头 不能是关键字 区分大小写 常见命名约定小驼峰命名法：方法、变量 标识符是一个单词的时候，首字母小写； 标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写； 大驼峰命名法：类 标识符是一个单词的时候，首字母大写； 标识符由多个单词组成的时候，每个单词的首字母大写； 类型转换自动类型转换表示把一个数据范围小的数值或者变量赋值给另一个表示数据范围大的变量； 注意：byte到char是不可以的，类型不兼容。 强制类型转换表示把一个数据范围大的数值或者变量赋值给另一个表示数据范围小的变量； 格式：目标数据类型 变量名 = （目标数据类型）值或者变量 范例： int k (int)88.88; 运算符算术运算符 符号 作用 + 加 - 减 * 乘 / 除 % 取余 注意：/ 和% 的区别：两个数据做除法，/取结果的商，%取结果的余数； 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算； 字符的 “+”操作字符串的“+”操作赋值运算符int i = 10; i += 20;//把左边和右边的数值做加法操作，结果赋值给左边；包含了强制类型转换 i = i + 20;//int类型是一样的但是又不完全一样； short ==*注意：扩展的赋值运算符（+= -= = /= ）隐含了强制类型转换；== 自增自减运算符 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意： ++和–既可以放在变量的后边，也可以放在变量的前边； 单独使用的时候，++和–无论是放在变量的前边还是后边，结果是一样的； ==参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–；== ==参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作；== 最常见的用法：单独使用； 关系运算符 符号 说明 == 判断表达式的值是否正确，成立为true，不成立为false != 判断表达式的值是否正确，成立为true，不成立为false &gt; 判断表达式的值是否正确，成立为true，不成立为false &gt;= 判断表达式的值是否正确，成立为true，不成立为false &lt; 判断表达式的值是否正确，成立为true，不成立为false &lt;= 判断表达式的值是否正确，成立为true，不成立为false 注意： 关系运算符的结果都是boolean类型，要么是true，要么是false； 千万不要把”==“误写成”=“； 逻辑运算符是用来连接关系表达式的运算符。 当然，逻辑运算符也可以直接连接boolean类型的常量或者变量。 基本逻辑运算符 符号 作用 说明 &amp; 逻辑与 有false则false | 逻辑或 有true则true ^ 逻辑异或 相同为false，不同为true ! 逻辑非 结果正好相反 短路逻辑运算符 符号 作用 说明 &amp;&amp; 短路与 有false则false，但是具有短路效果 || 短路或 有true则true，但是具有短路效果 ==注意区别：== 逻辑与&amp;，无论左边真假，右边都要执行； 短路与&amp;&amp;，如果左边为真，右边执行，如果左边为假，右边不执行； 逻辑或|，无论左边真假，右边都要执行； 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行； 三元运算符 //关系表达式?表达式1:表达式2; a > b ? a : b; //首先计算关系表达式的值； //如果值为true，表达式1的值就是运算结果 //如果值为false，表达式2的值就是运算结果 数据输入 Scanner使用的基本步骤 导包 import java.util.Scanner; ==导包的动作必须出现在类定义的上边；== 创建对象 Scanner sc = new scanner(System.in); ==上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变；== 接受数据 int i = sc.nextInt(); ==上面这个格式里面，只有i是变量名，可以变，其他的都不允许变；== 分支语句流程控制流程控制语句分类 顺序结构：从上到下，从左到右； 分支结构：if switch语句； 循环结构：for循环，while，do …while循环； If语句//格式1 if(关系表达式){ 语句体； } //格式2 if(关系表达式){ 语句体1; }else{ 语句体2; } //格式3 if(关系表达式1){ 语句体1; }else if(关系表达式2){ 语句体2; }else if(关系表达式3){ 语句体3; }else{ 语句体n+1; } 执行流程： 格式1： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体； 如果关系表达式的值为false就不执行语句体； 继续执行后面的语句内容； 格式2： 首先计算关系表达式1的值； 如果值为true就执行语句体1，值为false就执行语句体2； 继续执行后面的语句内容； 格式3： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体1； 如果关系表达式的值为false就执行关系表达式2； 如果关系表达式的值为true就执行语句体2； 如果关系表达式的值为false就执行关系表达式3； … 如果没有任何 关系表达式为true，就执行语句体n+1； ==注意：数据测试时，选择正确数据，边界数据，错误数据；== switch语句//格式 switch(表达式){ case 值1: 语句体1; break; case 值2: 语句体2; break; case 值3: 语句体3; break; default: 语句体n+1; [break;] } 说明： 表达式：取值为byte，short，int，char，JDK5以后可以是枚举，JDK7以后可以是String。 case：后面跟的是要和表达式进行比较的值； break：表示中断，结束的意思，用来结束switch语句； default：表示所有情况都不匹配的时候，就执行该处的内容，和If语句的else相似； 注意： ==在switch语句中，如果case控制的语句体后面不写break，将出现穿透现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束；== 循环结构循环结构的组成 初始化语句； 条件判断语句；boolean类型 循环体语句； 条件控制语句； for循环语句格式//格式 for(初始化语句;条件判断语句;条件控制语句){ 循环体语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是否是true还是false； 如果是false，循环结束。 如果是true，继续执行。 执行循环体语句； 执行条件控制语句； 回到2继续； 案例：水仙花数：任意数字的指定位上的数值如何求 ==先使用整除操作将要求的数字移动到个位上，在使用取余操作取出最后一位上的值== 例如：1234==5==679 先整除10000得到12345，再对10取余得到5； while 循环语句//格式 初始化语句 while(条件判断语句){ 循环体语句; 条件控制语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是true还是false； 如果是true，继续执行； 如果是false，循环结束； 执行循环体语句； 执行条件控制语句； 回到2继续； do while 循环语句//格式 初始化语句; do{ 循环体语句; 条件控制语句; }while(条件判断语句); 执行流程： 执行初始化语句； 执行循环体语句； 执行条件控制语句； 执行条件判断语句，看结果是true还是false； 如果是false，循环结束； 如果是true，继续执行； 回到2继续； 三种循环的区别： for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for和while的区别： 条件控制语句所控制的自增变量，因为归属for循环的语法结构，在for循环结束后，就不能再次被访问了。 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用。 条件控制语句 continue 用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行； break 用在循环中，基于条件控制，终止循环体内容的执行，也就是结束当前的整个循环； 循环嵌套循环里嵌套循环，内层循环看成一个语句体； RandomRandom的作用和使用步骤作用：用于产生一个随机数 使用步骤： ​ 1.导包 import java.util.Random //导包的动作必须出现在类定义的上面； ​ 2.创建对象 Random r = new Random(); //上面这个格式里面，r是变量名，可以变，其他的都不允许变； ​ 3.获取随机数 int number = r.nextInt(10);//获取数据的范围：[0,10)包括0，不包括10 //上面这个格式里面，number是变量名，可以变，数字10可以变，其他的都不允许变","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}],"author":"SakuraMuxia"}],"categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}]}