{"meta":{"title":"慢一点，才更快 | 雨落","subtitle":"","description":"","author":null,"url":"http://SakuraMuxia.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-04-20T16:00:00.000Z","updated":"2021-03-28T09:12:56.615Z","comments":false,"path":"categories/index.html","permalink":"http://sakuramuxia.github.io/categories/index.html","excerpt":"","text":""},{"title":"donate","date":"2020-02-13T15:13:05.000Z","updated":"2021-03-28T09:45:37.294Z","comments":false,"path":"donate/index.html","permalink":"http://sakuramuxia.github.io/donate/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-04-21T12:17:58.000Z","updated":"2021-04-09T13:44:55.320Z","comments":true,"path":"comment/index.html","permalink":"http://sakuramuxia.github.io/comment/index.html","excerpt":"","text":"念两句诗 挑选中... jinrishici.load(function(result) { poem.innerHTML = result.data.content info.innerHTML = '【' + result.data.origin.dynasty + '】' + result.data.origin.author + '《' + result.data.origin.title + '》' document.getElementById(\"poem\").value(poem); document.getElementById(\"info\").value(info); });"},{"title":"about","date":"2020-02-12T14:14:36.000Z","updated":"2021-03-29T16:04:51.895Z","comments":false,"path":"about/index.html","permalink":"http://sakuramuxia.github.io/about/index.html","excerpt":"","text":"[れんげ] 与&nbsp; SakuraMuxia&nbsp; （ ） 对话中... bot_ui_ini()"},{"title":"links","date":"2020-02-13T15:11:06.000Z","updated":"2021-03-28T09:35:28.491Z","comments":true,"path":"links/index.html","permalink":"http://sakuramuxia.github.io/links/index.html","excerpt":"","text":""},{"title":"music","date":"2021-04-09T11:26:31.000Z","updated":"2021-04-09T13:49:31.803Z","comments":false,"path":"music/index.html","permalink":"http://sakuramuxia.github.io/music/index.html","excerpt":"","text":"每日一言 获取中..."},{"title":"tags","date":"2020-02-13T12:24:16.000Z","updated":"2021-03-28T10:08:19.939Z","comments":false,"path":"tags/index.html","permalink":"http://sakuramuxia.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HCIA学习笔记16","slug":"hcia16","date":"2021-04-24T10:01:53.000Z","updated":"2021-04-24T10:49:32.418Z","comments":true,"path":"post/265a.html","link":"","permalink":"http://sakuramuxia.github.io/post/265a.html","excerpt":"","text":"PPP广域网中经常会使用串行链路来提供远距离的数据传输，高级数据链路控制HDLC（High-Level Data Link Control）和点对点协议PPP（Point to Point Protocol）是两种典型的串口封装协议。 HDLC 协议应用 HDLC基本配置 int serial 1/0/0 //进入串口1/0/0 link-protocol hdlc //配置链路协议为hdlC ip add 10.0.1.1 30 //配置IP地址 说明： 华为设备上的串行接口默认运行PPP协议 思科设备上的串行接口默认运行HDLC协议 只限用于串口 HDLC接口地址借用 串行接口可以借用Loopback接口的IP地址和对端建立连接。 点到点之间没有mac地址，没有第三者，不需要mac地址，不需要arp 地址租用：S1/0/0不配地址，借用另外一个接口的地址，这样就可以实现多个这样的接口的地址一样，这样可以实现让多个物理接口用相同的地址。 地址租用的作用是：节省IP地址 dis ip int b // 查看三层接口ip信息","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"PPP","slug":"PPP","permalink":"http://sakuramuxia.github.io/tags/PPP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记15","slug":"hcia15","date":"2021-04-24T04:56:53.000Z","updated":"2021-04-25T00:42:32.301Z","comments":true,"path":"post/271a.html","link":"","permalink":"http://sakuramuxia.github.io/post/271a.html","excerpt":"","text":"NAT为了解决IPv4地址不够（2012）的问题 网络地址转换技术NAT（Network Address Translation）主要用于实现位于内部网络的主机访问外部网络的功能。当局域网内的主机需要访问外部网络时，通过NAT技术可以将其私网地址转换为公网地址，并且多个私网用户可以共用一个公网地址，这样既可以保证网络互通，又节省了公网地址。 NAT应用场景 企业或家庭所使用的网络为私有网络，使用的是私有地址；运营商维护的网络为公共网络，使用的是共有地址，私有地址不能在公网中路由。 NAT一般部署在连接内网和外网的网关设备上 专线：公网地址是固定的，不是家用的拨号会改变的。 NAT好处 有效避免来自外网的攻击，可以很大程度上提高网络安全性。 控制内网主机访问外网，同时也控制外网主机访问内网，解决了内网和外网不能互通的问题。 NAT类型NAT的实现方式有多种，适用于不同的场景。 实验 静态NAT 静态NAT实现了私有地址和共有地址的一对一映射。 一个公网IP只会分配给唯一且固定的内网主机。 如果希望一台主机优先使用某个关联地址，或者想要外部网络使用一个指定的公网地址访问内部服务器，可以使用静态NAT。 但这种一对一的IP地址映射无法缓解公用地址短缺的问题。 用于服务器一对一保留使用的 一对一 静态NAT配置 命令 备注 nat static enable 开启NAT静态功能 nat static global 公网地址 inside 私网地址 创建静态NAT display nat static 查看静态NAT的配置 nat static enable //全局开启静态nat功能 interface g0/0/1 //进入g0/0/1接口 ip add xxx.xxx.xxx.xxx xx//添加接口ip nat static global xxx.xxx.xxx.xxx inside xxx.xxx.xxx.xxx nat static global xxx.xxx.xxx.xxx inside xxx.xxx.xxx.xxx dis nat static //查看静态NAT配置 动态NAT 动态NAT基于地址池来实现私有地址和共有地址的转换 动态NAT地址池中的地址用尽以后，只能等待被占用的公网地址被释放后，其他主机才能使用它进行访问公网 多对多 动态NAT配置 // 动态NAT配置 nat address-group 1 //配置NAT地址池，范围为0-7 //填写地址池的起止范围 nat address-group 1 xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //配置acl acl 2000 rule 1 permit sou 192.168.0.0 0.0.0.255 //配置acl策略 rule 1 permit //配置所有都通过 int g0/0/1 //今日接口 nat outbound xxx address-group x no-pat //跟静态相似，把一个地址转化成另一个地址，不管是什么端口号或者协议都转发，pat是不同的端口号或者ID会调用不同的地址。 //查看nat转换表 dis nat session all //查看nat转化表 //重新建一个地址池，而不是在原有的地址池中更改，容易报错。 nat address-group 2 nat address-group 2 xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //然后在接口中删除配置的地址池 undo nat outbound xxx address-group x no-pat NAPT NAPT允许多个内部地址映射到同一个共有地址的不同端口。 NAPT（Network Address Port Translation）也称为NAT-PT或PAT，网络地址端口转换，允许多个私网地址映射到同一个公网地址的不同端口。 通常适用于大型企业网络（申请多个固定的公网地址） 多对一 NAPT配置NAPT又称PAT Easy IP又称（SNAT）S代表源 Easy IP适用于小规模局域网中的主机访问Internet的场景。 如：家庭、小型网吧、小型办公室中、这些地方的主机不多，出接口可以通过拨号方式获取一个临时公网IP地址。 Easy IP配置 nat outbound acl编号 //关联出站接口和acl //说明: 代表从这个接口出去的只要满足这个acl的源地址统统转化为 200.10.10.10 ，其他和PAT一样。 NAT服务器（DNAT）D代表目的，从外边的网络访问里边的服务，又称端口映射。 NAT具有“屏蔽”内部主机的作用，但有时内网需要向外网提供服务。 当外网用户访问内网服务器时，NAT Server通过事先配置好的“公网IP地址+端口号” 与“私网IP地址+端口号”间的映射关系，将服务器的“公网IP地址+端口号”根据映射关系替换成对应的“私网IP地址+端口号” 动态域名绑定 花生壳申请动态域名绑定，在出口设备上输入动态域名账号，就会时时的更新 NAT服务器配置 命令 备注 nat server protocol tcp/udp global 公网地址/接口 端口 inside 私网地址 端口 配置NAT服务器 display nat server 验证NAT服务器 --- //说明 int g0/0/1 nat server protocol tcp global ?//当提供服务的公网地址是接口地址的话，不能直接输入地址，如果是接口地址，应该打 current-interface --- nat server protocol tcp global xxx inside xxx.xxx.xxx.xxx yy //NAT配置 端口映射就相当于在出口设备上开洞，外网用户可以扫描到开的端口服务。 VPN就相当于直接将两个私网地址进行通讯，就相当于坐在内网主机的旁边，而且还加密。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"NAT","slug":"NAT","permalink":"http://sakuramuxia.github.io/tags/NAT/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记14","slug":"hcia14","date":"2021-04-24T00:28:30.000Z","updated":"2021-04-24T04:56:21.039Z","comments":true,"path":"post/e7db.html","link":"","permalink":"http://sakuramuxia.github.io/post/e7db.html","excerpt":"","text":"ACL企业网络中的设备进行通讯时，需要保证数据传输的安全可靠和网络的性能稳定。访问控制列表ACL（Access Control List）可以定义一系列不同的规则，设备根据这些规则对数据包进行分类，并针对不同类型的报文进行不同的处理，从而实现对网络访问行为的控制、限制网络流量、提高网络性能、防止网络攻击等等。 ACLAccess Control List ，访问控制列表 ospf 1 //进入OSPF界面 filter-policy ? //过滤策略 filter-policy acl-name //后面跟策略名称 import-route rip route-policy //在导入路由时添加路由策略 //建立route policy route-policy wakin permit node 10 //建立路由策略 if-match ? //条件 // nat技术 nat outbound ? //接口调用acl traffic-filter inbound ? // 入方向调用acl，注意流量的方向走向 traffic-filter outbound ? // 出方向调用acl，注意流量的方向走向 ACL应用场景 ACL可以通过定义规则来允许或拒绝流量的通过。 ACL工作原理 ACL由一条或多条规则组成 每条规则必须选择动作：允许或拒绝 每条规则都有一个id序列号（默认=5，间隔=5） 序列号越小越先进行匹配 只要有一条规则和报文匹配，就停止查找，称为命中规则 查找完所有规则，如果没有符合条件的规则，称为未命中规则 ACL创建后，必须将其应用到某个接口或其他技术内才会生效 应用在接口时必须选择方向：入站或出站（相对设备来判断） 不能过滤由设备自己产生的数据 注意：制定规则时一定要先细后粗 // 命名acl acl name nolol // 第一种方式 acl number 2000 // 第二种方式 //增加描述 description xxx-yyy //用英文表示 ACL规则 每个ACL可以包含多个规则，RTA根据规则来对数据流量进行过滤。 ACL类型分为数字型ACL和命名型ACL 分类 编号范围 参数 基本ACL 2000-2999 源IP地址等 高级ACL 3000-3999 源IP地址、目的IP地址、源端口、目的端口等 二层ACL 4000-4999 源MAC地址、目的MAC地址、以太网协议类型等 用户ACL 5000-5999 用户自定义 正掩码、反掩码、通配符区别： 名称 规则 作用 举例 备注 掩码 连续的1和0 IP地址 255.255.255.0 1对应网络位，0对应主机位 反掩码 连续的0和1 路由协议 0.0.0.255 0必须匹配，1无须匹配 通配符 任意的0和1 ACL 0.0.255.0 0必须匹配，1无须匹配 举例 备注 192.168.0.1 0.0.0.0/0 匹配一个主机地址 192.168.0.0 0.0.0.255 匹配一个网段 192.168.0.1 0.0.0.254 匹配网段内奇数地址 192.168.0.0 0.0.0.254 匹配网段内偶数地址 any=x.x.x.x 255.255.255.255 匹配所有地址 说明：直接写名字定义的ACL，也可以定义ACL的类型 在配置路由时，打正掩码也会自动转换为反掩码，反掩码也就是 4个255减正掩码得到的。 通配符相当于与运算 匹配0的位数 奇数地址只要保证最后一位为1即可 // 直接写名字定义的ACL，也可以定义ACL的类型 acl name nogame ? // 默认为高级adv //查看所有acl dis acl all //查看所有acl //acl允许通过所有 rule per so 0.0.0.0 255.255.255.255 //acl允许通过所有 rule per so any //acl允许通过所有 rule per //acl允许通过所有 ACL配置 命令 备注 acl 2000 创建一个基本acl rule 5 deny/permit source 192.168.1.0 0.0.0.255 配置ACL的规则：拒绝或允许源地址为192.168.1.0 /24网段内的所有流量 acl 3000 创建一个高级ACL rule 5 deny/permit tcp source 192.168.1.0 0.0.0.255 destination 8.8.8.8 0 destination-port eq 80 配置ACL的规则拒绝或允许源地址为192.168.1.0/24网段内到8.8.8.8 的HTTP流量 traffic-filter inbound/outbound acl 2000 在接口调用ACL过滤流量 display acl 2000 验证acl display traffic-filter applied-record 查看设备上所有基于ACL调用情况 rule 5 deny/permit tcp source 192.168.1.0 0.0.0.255 destination 8.8.8.8 0 destination-port eq 80 //默认不写就是全部 rule 2 permit TCP destination-port ? 基本ACL配置 高级ACL配置 基本ACL：允许或拒绝所欲协议，我只关心你从哪里来 高级ACL：我可以知道你从哪里来，到哪里去，去做什么 基本ACL调用离目标近一点 高级ACL调用离源近一点 ACL接口调用方向的建议 1、基本ACL尽量调用在离目标最近的出站接口 2、高级ACL尽量调用在离源头最近的入站接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"ACL","slug":"ACL","permalink":"http://sakuramuxia.github.io/tags/ACL/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记13","slug":"hcia13","date":"2021-04-23T11:30:00.000Z","updated":"2021-04-23T11:58:17.420Z","comments":true,"path":"post/259a.html","link":"","permalink":"http://sakuramuxia.github.io/post/259a.html","excerpt":"","text":"DHCP动态主机配置协议DHCP（Dynamic Host Configuration Protocol） DHCPDynamic Host Configure Protocol ,动态主机配置协议 从BOOTP（Bootstrap Protocol）协议发展而来的。 UDP封装，服务器=67，客户端=68。 动态分配TCP/IP信息（IP地址、子网掩码、默认网关、DNS服务器等）‘ 分配出去的信息是有租期的 查看IP地址池dis ip pool //查看IP地址池 // 抓包IPV4时需要把过滤协议设置成 bootp 查看当前VLAN IP地址池dis ip pool interface vlanifxx all //查看当前VLAN的IP地址 DHCP系统组成 DHCP CLient（客户端） 需要动态获得IP地址的主机 DHCP Services（服务器） 能提供DHCP功能的服务器或网络设备 DHCP Relay （中继） 一般为路由器或三层交换机等网络设备 // 汇聚交换机配置 三层 vlan batch 10 20 //创建VLAN int g0/0/1 //进入接口g0/0/1 p l t //设置接口类型为trunk p t a v all // 允许所有vlan通过 int vlanif 10 //进入vlan10 IP add xxx.xxx.xxx.xxx 24 //配置网关 d th //验证 int vlanif 20 //进入vlan10三层接口 IP add xxx.xxx.xxx.xxx 24 //配置网关 d th //验证 dis IP int b //查看接口IP信息 // 开启DHCP dhcp enable //先打开DHCP总开关 int vlanif 10 //进入三层接口 dhcp select interface //开启dhcp dis ip pool interface vlanifxx all //查看当前VLAN的IP地址 dis ip pool interface vlanifxx used // 查看vlanifxx用到的IP地址 DHCP报文类型 报文类型 含义 DHCP DISCOVER 客户端用来寻找DHCP服务器（广播） DHCP OFFER DHCP服务器用来响应DHCP DISCOVER报文，此报文携带了各种配置信息 DHCP REQUEST 客户端请求配置确认，或者续借租期 DHCP ACK 服务器对REQUEST报文的确认响应 DHCP NAK 服务器对REQUEST报文的拒绝响应 DHCP RELEASE 客户端要释放地址时用来通知服务器 DHCP工作流程 说明：DHCP的特殊性，当客户端没有IP地址时，服务端分配一个IP时，客户端就直接设置成自己的IP，数据链路层中有客户端的MAC地址， ipconfig /release //释放IP地址（客户端） dhcp server dns-list 8.8.8.8 //dhcp服务器开启dns服务（服务端） ipconfig /renew //重新获取IP地址（客户端） dhcp server lease day 0 hour 12 minute 1 // 配置dhcp服务器的释放时间，当配置为0的时候代表永不超时（服务端） dhcp server lease unlimited //永不超时 2的32次方 近43亿（服务端） DHCP租期更新 IP租约期限到达50%时，DHCP客户端会请求更新IP地址租约 DHCP重绑定 说明： 租期在7/8时，DHCP客户端在租约期限到达87.5%时，还没有收到服务器响应，会申请冲绑定IP。 自动保留IP 租期设置建议 // windows 系统中有保留之前IP地址的机制（客户端）数据包中 IP地址释放 如果IP租约到期前都没有收到服务器响应，客户端停止使用此IP地址。 如果DHCP客户端不再使用分配的IP地址，也可以主动向DHCP服务器发送DHCP Release报文，释放该IP地址。（使用命令） dis ip pool interface vlanifxxx used //查看IP地址池中xxx网段使用的地址 dis ip pool interface vlanifxxx expired //查看IP地址池收回的地址 undo dhcp enable //关闭dhcp服务器 dhcp enable //开启dhcp总开关 //关闭dhcp服务器会清楚接口信息 ------------ int vlanif 108 //进入VLAN接口 d th //查看当前配置 dhcp select interface 开启dhcp接口开关 dhcp server dns-list xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //配置dhcp服务端dns服务器 ------------ DHCP地址池（pool）所分配地址的集合 接口地址池的优先级比全局地址池高 命令 备注 dhcp enable 开启DHCP功能 dhcp select interface 关联接口和接口地址池 dhcp server dns-list 地址 配置接口地址池的DNS服务器地址 dhcp server lease 数字 配置接口地址池的租期，默认1天 dhcp server excluded-ip-address 地址 配置接口地址池的排除地址范围 dhcp server static-bind ip-address x.x.x.x mac-address xxxx-xxxx-xxxx 配置静态绑定 dhcp select global 关联接口和全局地址池 ip pool 名称 创建全局地址池 network 地址 配置全局地址池的可分配的网段地址 gateway-list 地址 配置全局地址池的网关地址 dns-list 地址 配置全局地址池的DNS服务器地址 lease 数字 配置全局地址池下的租期，默认1天 excluded-ip-address 地址 配置全局地址池下·的排除地址范围 display ip pool [interface 借口名 all] 查看地址池的属性 ipconfig /release 释放租期 ipconfig /renew 重新获取 说明： 接口地址池，在三层口进行配置，从这个三层口收到的dhcp请求都会以这个三层口的地址分配地址，以及这个三层口的地址作为网关，没有dns。 DHCP接口地址池配置 //一个三层环境 一个VLAN 发送dhcp请求到dhcp服务器 //华为的分配地址方式是逆序 //思科的分配地址方式是顺序 dhcp server excluded-ip-address 192.168.0.100 192.168.0.150 //排除IP地址段100到150 //当地址被使用了，排除IP地址时也会报错，所以在排除IP地址的时候需要先释放IP地址 //防止和重要的设备冲突 DHCP全局地址池配置 // 绑定地址池 --- dhcp enable //开启dhcp服务 ip pool Rooma //定义ip地址池为Rooma network 192.168.10.0 mask 24 //宣告网络 d th //验证配置 gateway-list 192.168.10.1 //设置网关地址 lease day 19 //设置有效期为19 --- int vlanif10 //进入三层接口vlan10 dhcp select global //配置dhcp全局关联 dis ip pool name rooma used//查看全局ip地址池 ip pool Rooma //进入地址池进行绑定 static-bind ip-address x.x.x.x mac-address xxxx-xxxx-xxxx //端口绑定 --- //客户端dns可能也会是同一个地址 //路由器中有dns服务器转发，会问运营商 --- //一般来说dns服务器都在汇聚层，也有可能在核心层，这个时候接入层要想使用DHCP服务就要使用中继，因为到核心层就要跨三层，主机的广播，核心层收不到，汇聚层收到后转给核心层，核心层再转给dns服务器，然后dns服务器再回数据，出口有缺省路由，内部有OSPF动态路由，出口有一个nat，acl。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"DHCP","slug":"DHCP","permalink":"http://sakuramuxia.github.io/tags/DHCP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记12","slug":"hcia12","date":"2021-04-21T05:00:00.000Z","updated":"2021-04-21T05:05:03.578Z","comments":true,"path":"post/e55b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e55b.html","excerpt":"","text":"STP为了提高网络可靠性，交换网络中通常会使用冗余链路，然而，冗余链路会给交换网络带来环路风险，并导致广播风暴以及MAC地址表不稳定等问题，进而会影响用户的通信质量，生成树协议STP（Spanning Tree Protocol）可以在提高可靠性的同时又能避免环路带来的各种问题。 二层网络设计需求和问题 为了提高可靠性，交换机之间会通过多条链路相连，从而避免单点故障。 但同时会带来一些灾难性的环路问题。 dis int Ethernet 2 //进入Ethernet接口 广播风暴 环路会引起广播风暴 网络中的主机会收到重复数据帧 MAC地址表震荡 环路会引起MAC地址表震荡 STP：Spanning TRee Protocol，生成树协议，提供两大功能： 功能 备注 消除环路 通过阻断冗余链路来消除网络中可能存在的环路 链路备份 当活动路径发生故障时，激活备份链路，及时恢复网络连通性。 查看STP堵塞dis stp b // 产看STP堵塞 STP操作通过构造一颗树来消除交换网络中的环路 选举一台根桥 选举一个根端口 选举指定端口 阻塞剩余端口 BPDU：Bridge Protocol Data Unit 桥协议数据单元 使用组播 01-80-C2-00-00-00 STP版本（PVI） STP MSTP RSTP sys //系统配置模式 stp mode stp //更改STP模式 BPDU Type configuration （配置） Topology change Notification （拓扑改变通知） BPDU类型配置BPDU：Configuration 选举根交换机以及确定每个交换机端口的角色和状态。 在初始化过程中，每个桥都主动发送配置BPDU。 在网络拓扑稳定以后，只有根桥主动发送配置BPDU，其他交换机在收到上游传来的配置BPDU，才会发送自己的配置BPDU 发送周期为Hello Time 老化时间为Max Age 拓扑变更通告BPDU TCN BPDU 下游交换机感知到拓扑发生变化时向上游发送的拓扑变化通知 BPDU字段详解 Bridge identifier：自身的ID // 查看stp信息 dis stp brief int g0/0/01 //查看接口的STP信息 桥ID 65535=2的16次方 端口ID dis stp int eth dis stp int Ethernet 0/0/1 //查看对应接口的stp端口信息 路径开销 dis stp // 根路径开销 链路开销标准 查看设置开销int g0/0/1 //进入相关接口 stp cost ? //设置开销 设置 stp开销标准stp pathcost-standard //设置开销标准 STP选举过程根桥选举BID最小的成为根桥（先比较优先级，再比较MAC） 每一台交换机启动STP后，都认为自己是根桥。 根端口选举（ROOT） 非根交换机在选举根端口时分别依据该端口的根路径开销，对端BID，对端PID和本端PID。 指定端口选举（DESI） 非根交换机在选举指定端口时分别依据根路径开销（自己发送出去的），BID，PID 未被选举为根端口或指定端口的端口为预备端口，将会被阻塞。 STP选举案例 选根桥 选根端口 选指定端口 STP端口状态 dis stp bri //查看STP状态 STP的计时器 计时器 配置BPDU报文每经过一个交换机，MessageAge都加1 如果MessageAge大于MaxAge，非根桥会丢弃该配置BPDU STP端口转换 STP拓扑变化 非根桥会在BPDU老化之后开始根桥的重新选举 直连链路故障 非直连链路故障 拓扑改变导致MAC地址表错误 // 清空ARP缓存 引入TCN为了让MAC地址表的默认老化时间更改为15秒 STP配置 命令 备注 stp mode {mstp | stp | rstp } 配置STP模式，缺省为MSTP stp priority 4096 配置BID优先级值，0~61440，步长为4096 stp pathcost-standard｛dot 1d-1998 |dot1t|legacy｝ 配置路径开销值的标准 开销标准： legacy：cost=1200000，华为的私有802.1d标准：cost=165535 sys sys S1 stp mode stp //更改STP模式 stp priority 0 //更改开销值 stp root primary / secondary //指定主备根桥 stp cost //更改入口的stp开销值 // 更改优先级 stp port priority //更改对端PID的优先级","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"STP","slug":"STP","permalink":"http://sakuramuxia.github.io/tags/STP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记11","slug":"hcia11","date":"2021-04-16T05:10:00.000Z","updated":"2021-04-16T05:18:00.456Z","comments":true,"path":"post/e41b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e41b.html","excerpt":"","text":"GARP-GVRPGARP （Generic Attribute Registration Protocol），全称是通用属性注册协议，它为处于同一个交换网内的交换机之间提供了一种分发、传播、注册某种信息（VLAN属性、组播地址）的手段。 GVRP是GARP的一种具体应用或实现，主要用于维护设备动态VLAN属性。 通过GVRP协议，一台交换机上的VLAN信息会迅速传播到整个交换网络 GVRP实现了LAN属性的动态分发、注册和传播，从而减少了网络管理员的工作量，也能保证VLAN配置的正确性。 GARPGeneric Attribute Registration Protocol 通用属性注册协议 在交换机间分发、传播、注册某种信息（VLAN属性、组播地址等）。 主要用于大中型网络中，用来提升交换机的管理效率。 一种协议规范。 GARP消息类型 类型 备注 join 加入，端口加入VLAN Leave 注销，端口退出VLAN Leave All 注销所有 GVRPGARP VLAN Registration Protocol，VLAN注册协议 GVRP基于GARP的工作机制，是GARP的一种应用，传递VLAN信息 sys gvrp //全局开启GVRP int g0/0/0 //进入相关接口 gvrp //开启GVRP dis vlan //查看VLAN GVRP的应用 接收来自其他交换机的VLAN注册信息，并动态更新本地的VLAN注册信息，包括当前VLAN、VLAN成员等。 将本地的VLAN注册信息向其他交换机传播，，以便使同一交换网内所有支持GVRP特性的设备的VLAN信息达成一致。 手动配置的VLAN是静态VLAN，通过GVRP创建的VLAN是动态VLAN。 GVRP传播的VLAN注册信息包含本地手工配置的静态注册信息和来自其他交换机的动态注册信息。 GVRP单向注册 GVRP注册模式Normal //配置GVRP注册模式 int g0/0/1 //进入相关接口 gvrp registration //配置GVRP注册模式 dis gvrp status //验证gvrp状态信息 dis gvrp statistics //查看gvrp统计信息 Forbidden int g0/0/0 //进入接口 gvrp registration forbidden // 配置GVRP为禁止模式 //配置完成之后 g0/0/0 只和 VLAN1 有关 Fixed SWA的g0/0/1端口为Fixed模式，不允许动态VLAN在端口注册或者注销且只发送静态VLAN的声明消息。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"GVRP","slug":"GVRP","permalink":"http://sakuramuxia.github.io/tags/GVRP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记10","slug":"hcia10","date":"2021-04-15T14:30:00.000Z","updated":"2021-04-15T14:55:59.353Z","comments":true,"path":"post/24da.html","link":"","permalink":"http://sakuramuxia.github.io/post/24da.html","excerpt":"","text":"配置交换机接口二层三层转换int g0/0/0 // 创建g0/0/0接口 portswitch //配置交换机接口二层接口 undo portswitch // 配置交换机接口三层接口 交换机的接口类型// 2层物理口 // 3层物理口 // 3层虚拟口 vlanif // 方案1 // 2层物理口+3层虚拟口 // 方案2 // 3层物理口 //在终端设备数据帧不含标签，在三层交换机以上路由器之间也不存在标签 综合实验配置 配置代码:-------------------------------------- //配置交换机SW1 sys sys SW1 vlan ba 10 20 int eth0/0/1 p l a p d v 10 int eth0/0/2 p l a p d v 20 int eth0/0/3 p l t p t a v 10 20 ----------------------------------------- //配置交换机SW2 sys sys SW2 vlan ba 10 20 23 int g0/0/1 p l t p t a v 10 20 int g0/0/2 p l a p d v 23 int vlanif 10 ip add 192.168.10.254 24 int vlanif 20 ip add 192.168.20.254 24 int vlanif 23 ip add 23.0.0.254 24 ospf 1 router-id 2.2.2.2 area 0 net 23.0.0.254 0.0.0.0 net 192.168.10.254 0.0.0.0 net 192.168.20.254 0.0.0.0v -------------------------------------------- //配置交换机SW3 sys sys SW3 vlan ba 23 13 int g0/0/1 p l a p d v 23 int g0/0/2 p l a p d v 13 int vlanif 23 ip add 23.0.0.3 24 int vlanif 13 ip add 13.0.0.3 24 ospf 1 router-id 3.3.3.3 area 0 net 13.0.0.3 0.0.0.0 net 23.0.0.3 0.0.0.0 ----------------------------------------------- //配置路由器R1 sys sys R1 int g0/0/0 ip add 13.0.0.1 24 int lo 1 ip add 1.1.1.1 24 ospf 1 router-id 1.1.1.1 area 0 net 13.0.0.1 0.0.0.0 net 1.1.1.1 0.0.0.255 -----------------------------------------------","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记9","slug":"hcia09","date":"2021-04-14T08:30:00.000Z","updated":"2021-04-14T08:57:35.693Z","comments":true,"path":"post/dc40.html","link":"","permalink":"http://sakuramuxia.github.io/post/dc40.html","excerpt":"","text":"VLANVLAN即虚拟局域网，是将一个物理的局域网在逻辑上划分成多个广播域的技术，通过在交换机上配置VLAN，可以实现在同一个VLAN内的用户可以进行二层互访，而不同VLAN间的用户被二层隔离。这样既能够隔离广播域，又能提升网络的安全性。 VLAN技术背景 交换机的所有接口属于一个广播域，往往也是一个逻辑子网； 用户无法根据业务需要灵活的在交换机上进行广播域的隔离； 随着网络规模越来越大，数量越来越多，广播风暴将给网络带来重大问题； 不进行隔离容易引起广播泛滥 VLAN技术提供了一种灵活的解决方案 将交换机的接口根据业务需要添加到不同的VLAN中，从而实现二层隔离。 说明：划分VLAN后就算在同一个网段，也无法通信，原因在于在一个ARP请求过不去。 VLAN优点： 有效控制广播域范围 增强局域网的安全性 灵活构建虚拟工作组 简化网络管理 VLAN概述Virtual LAN 虚拟局域网 将一个物理局域网在逻辑上划分成多个广播域； 1 VLAN = 1 广播域 = 1 子网； 广播不会在VLAN之间转发，而是被限制在各自的VLAN中； 不同VLAN间的设备默认无法通信，需要第三层设备才能实现互通； VLAN范围0~4095共4096个（0和4095为保留、1为默认） VLAN标签介绍 通过Tag区分不同VLAN IEEE 802.1q:dot1q,是VLAN的正式标准，对Ethernet帧格式进行了修改，在源MAC地址字段和协议类型字段之间加入4字节的802.1q Tag 每台支持802.1q协议的交换机发送的数据包都会包含VLAN ID，以指明交换机属于哪一个VLAN。因此，在一个VLAN交换网络中，以太网帧有以下两种形式： VLAN链路类型 类型 备注 AccessLink接入链路 用于连接主机和交换机的链路。接入链路上传输的帧都是untagged帧。 TrunkLink干道/中继链路 用于交换机间的互连或交换机与路由器之间的链路。干道链路上传输的帧几乎都是tagged帧用于两端识别。 dis port vlan // dis vlan //查看 PVID： 即Port VLAN ID ，代表端口的缺省VLAN X7系列交换机每个接口PVID=1 int eth int Ethernet0/0/11 //进入接口 VLAN端口类型 类型 备注 Access接入端口 用于连接主机收到数据后会添加VLAN Tag，VLAN ID和端口PVID相同从相同的PVID转发出去转发数据前会移除VLAN Tag 带标签后，终端是无法识别的，终端设备发的时候不带标签，收的时候也不带标签。交换机收的时候不带标签，发的时候也不带标签，交换机内部带标签。如果交换机收到数据帧是带标签的，保留。 sys int g0/0/0 //进入接口 port link-type ? //更改接口类型 int g0/0/2 //进入接口 p l a //缩写命令 //更改PVID port default vlan 2 //更改PVID的接口为2 port trunk allow-pass vlan 10 to 20 //允许trunk 10 到20 接口通过 类型 备注 Trunk干道端口 用于连接交换机或路由器，收到帧时，如果该帧不包含Tag，将打上端口的PVID；如果该帧包含Tag，则不改变。发送帧时，该帧的VLAN ID在Trunk的允许发送列表中：若与端口的PVID相同时，则剥离Tag发送若与端口的PVID不同时，则直接发送Trunk为1则代表允许VLAN1的流量通过如果没有Trunk，则代表只能多接好几根线，一根线一个VLAN 类型 备注 Hybrid 既可以连接主机，又可以连接其他交换机既可以充当Access角色，又可以充当Trunk角色既可以连接接入链路又可以连接干道链路允许多个VLAN的帧通过，并可以在出接口方向将某些VLAN帧的Tag剥掉（由命令决定） VLAN转发流程 VLAN规划基于端口最为常见 VLAN配置 命令 备注 vlan 10 创建单个vlan vlan batch 10 to 20 创建多个vlan port link-type access/trunk/hybird 配置接口类型 port default vlan 10 配置Access关联VLAN/PVID port trunk allow-pass vlan 10 配置Trunk允许VLAN默认只允许VLAN1 port trunk pvid vlan 10 配置Trunk 的PVID port hybrid pvid vlan 10 配置Hybird的PVID display vlan 验证VLAN display port vlan 验证VLAN int g0/0/0 //进入相关接口 port link-type access // 配置接口Access类型 p l a // 配置接口Access类型的缩写 dis port vlan //验证port vlan类型缩写= dis por v port default vlan 3 //更改PVID p d v 3 //更改vlan的ID缩写 //配置Trunk int g0/0/0 p l t //配置接口Trunk类型的缩写 port trunk allow-pass vlan 3//配置trunk类型允许通过的vlan port trunk pvid vlan 3 //配置接口trunk类型pvid dis por v //验证VLAN //hybrid模式 port hybrid pvid vlan 3 //配置hybrid vlan ID 等同于 Access port hybrid untagged vlan 3 //剥离VLAN3的标签 port hybrid tagged vlan 3 //包含vlan3标签 注意： 在更改接口类型的时候，要注意如果配置了子命令，应该先删除子命令，再更改接口类型。 Trunk允许VLAN默认为1，思科的设备默认为所有。 创建VLANsys vlan 1 //创建VLAN1 --- vlan batch 10 20 30 to 40 //创建多个vlan 验证VLANdisplay vlan //验证VLAN 配置接口类型---------------------------------- // 配置access int g0/0/0 //进入相关接口 port link-type access //配置接口access dis port vlan //验证接口配置 port default vlan 3 //配置接口的pvid d th //验证配置结果 ----------------------------------- //配置Trunk int g0/0/2 //进入接口 p l t //配置接口类型为Trunk d th // 验证配置 di p v //验证接口配置 port trunk allow-pass v 3 //默认只允许vlan1通过，允许vlan3通过 d th //验证配置 di p v //验证接口配置 port trunk pvid vlan 3 //配置trunk的PVID ------------------------------------------ //配置hybrid //和配置trunk是一样的 int g0/0/3 //进入接口 p l h //配置接口类型为hybrid d th //验证当前配置 d p v //验证接口配置 port hybrid untagged vlan 3 //配置hybrid vlan3 剥离标签 p h unt vlan 3 //配置hybrid vlan3 剥离标签缩写 port hybrid untagged vlan 3 //配置hybrid vlan3 带标签 port hybrid pvid vlan 3 //配置hybrid的PVID p h pv v 3 //配置hybrid的pvid缩写 说明： 不带标签的数据，接口默认允许通过 VLAN间路由部署了vlan的传统交换机不能实现不同VLAN间的二层报文转发，因此必须引入路由技术来实现不同VLAN间的通信，VLAN路由可以通过二层交换机配合路由器来实现，也可以通过三层交换机来实现。 VLAN间通讯限制每个VLAN都是一个独立的广播域，不同的VLAN之间二层就已经隔离，因此属于不同VLAN的节点之间是无法直接互访的。 说明： 路由器不能识别标签，标签只能在交换机之间识别 VLAN间通讯方法（路由） 到路由器的帧不带标签即可 VLAN路由-单臂路由 单臂路由的配置 命令 备注 dot1q termination 关联子接口和VLAN arp Broadcast enable 开启子接口的arp广播功能 ------------------------------------------ //单臂路由的配置 int g0/0/0.1 //创建子接口 dot1q termination vid 10 //关联子接口VLAN ID IP address xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //配置IP地址 arp Broadcast enable //开启子接口的arp广播功能 网关放在那一层比较好？ 园区网放在汇聚层比较好 运营商可以放在接入层 VLAN路由-三层交换 为每个VLAN创建一个VLANIF接口作为网关 配置MLSint vlanif 10 //配置VLAN 接口 IP add xxx.xxx.xxx.xxx y //配置IP地址 //注意:VLAN接口的编号必须对应一个已创建的VLAN vlan ba 2 3 //创建VLAN 2 3 int g0/0/1 //进入接口界面 p l a //配置接口类型为access p d v 2 //配置pvid int g0/0/2 //进入接口界面 p l a //配置接口类型为access p d v 3 //配置pvid int vlanif 2 //创建三层vlanif接口 ip add xxx.xxx.xxx.xxx y // 配置IP地址 q int vlanif 3 //创建三层vlanif接口 ip add xxx.xxx.xxx.xxx y // 配置IP地址 q","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记8","slug":"hcia08","date":"2021-04-11T08:44:00.000Z","updated":"2021-04-12T06:18:09.668Z","comments":true,"path":"post/1c81.html","link":"","permalink":"http://sakuramuxia.github.io/post/1c81.html","excerpt":"","text":"交换基础dis mac-ad //显示mac地址 dis mac-ad aging-time //查看衰老时间 dis ip routing-table //查看路由表 arp -d //清空arp缓存 交换机工作在数据链路层，对数据帧进行操作，在收到数据帧后，交换机会根据数据帧的头部信息对数据帧进行转发。 说明： RIP是封装在UDP上 网络分层设计通过使用分层网络设计原则和条理化设计方法，设计人员可以创建易于管理和易于支持的网络 园区网 交换机主要功能 小型交换网络 交换机工作在数据链路层，转发数据帧； 纯二层交换机只要要求在同一个网段即可互通，只要保证这些设备在同一个广播域； 纯二层交换机不看IP地址，只看MAC地址； 交换机的工作原理根据MAC地址表中的MAC地址记录，做出智能转发 原理 备注 学习Learn 当从一个接口收到帧时，把帧内的源MAC与该接口进行绑定，存入MAC地址表 泛洪Flood 当从一个接口收到广播帧，组播帧，未知单播帧（目标MAC不存在于MAC地址表中）把该帧从所有其他接口转发出去，除了接收口 转发Forward 当从一个接口收到已知单播帧，立即从相应的接口转发出去 更新Update 默认每条记录保存300秒；交换机重启后清空所有接口学习到的记录；接口关闭后会清空该接口学习到的记录；一个源MAC出现在另外个接口上，会删除老的记录，添加新的记录 PS 对于一台交换机来说：一个MAC只能关联在一个接口上；一个接口上可以学习到多个MAC； 说明：目标MAC全F则代表广播帧； 学习MAC地址 交换机将收到的数据帧的源MAC地址和对应接口记录到MAC地址表中。 转发数据帧 当数据帧的目的MAC地址不在MAC表中，或者目的MAC地址为广播地址时，交换机会泛洪该帧。 目标主机回复 交换机根据MAC地址表将目标主机的回复信息单播转发给源主机 以太网接口工作模式 术语 备注 半双工 half-duplex通讯双方都能发送和接收数据，但不能同时进行 全双工 full-duplex通信双方都能同时接收和发送数据 速率 speed接口连接时两端进行协商，协商失败则无法正常通信 //验证网口的参数 dis interface g0/0/0 //查看接口的信息 dis mac-address //查看mac地址信息 //双工模式 //半双工：你发送的时候不能收，你收的时候不能发。 //全双工：发送的同时也可以发送。 基本配置undo negotiation auto //关闭自动协商 speed 100 //设置速率 duplex full //全双工 int g0/0/2 //进入接口 speed ? //设置速率 duplex ? //设置全半双工 验证命令dis interface g0/0/0 //查看接口信息 //如果网络出现卡顿或者其他问题可以查看交换机接口的错误信息； dis mac-address summary //查看交换机存储的mac地址总数；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"交换","slug":"交换","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记7","slug":"hcia07","date":"2021-04-09T10:50:30.000Z","updated":"2021-04-09T12:46:15.331Z","comments":true,"path":"post/d801.html","link":"","permalink":"http://sakuramuxia.github.io/post/d801.html","excerpt":"","text":"获取中... OSPF配置 命令 备注 ospf 1 router-id 1.1.1.1 开启ospf，进程号缺省为1，手动配置Route ID area0/0.0.0.0 配置区域 network 192.168.0.0 0.0.0.255 宣告网络，即指定运行ospf的接口；使用反掩码来匹配（255.255.255.255-掩码） display ospf peer [brief] 显示ospf邻居信息 ospf timer hello 10 修改Hello包发送间隔 ospf timer dead 40 修改Hello包超时时间（默认是4倍关系） display ospf interface g0/0/0 显示ospf接口信息 ospf dr-priority 100 修改ospf接口优先级（在接口下面） ospf Cost 10 修改开销，范围1~65535，缺省为1 bandwidth-reference 100 调整带宽参考值，默认为100Mbps，需要在整个ospf网络中统一进行调整 reset ospf process 重启OSPF进程 说明： 反掩码是根据前边添加的IP地址掩码对应匹配的网络地址或者IP地址 命令的执行在哪个界面使用，看命令的起手,例如ospf …是在接口的界面下更改的，前面没有ospf，是在进程的界面下更改的。 //做完每一步进行验证 dis ospf peer b // 查看是否已经建立好了邻居 //串口的速度为2.048 缺省路由的发布缺省路由：能匹配所有网络，配置方法有以下两种： 方式 备注 静态配置 使用命令：ip route-static 0.0.0.0 0.0.0.0 动态发布 使用动态路由协议进行发布 OSPF缺省路由发布命令ip route-static 0.0.0.0 0 xxx.xxx.xxx.xxx default-route-advertise //缺省路由发布命令 类似于引入的方式 acl 2000 // 建立一个规则 rule 1 permit //permit 允许 nat outbound 2000 // 路由认证 OSFP认证命令： 命令 备注 int g0/0/0 ospf authentication-mode md5 1cipher wakin 配置接口认证 ospf 1 area 0 authentication-mode md5 1 cipher wakin 配置区域认证 PS：如果同时配置，接口认证优先生效 ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //从xxxping到yyy tracert -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //跟踪从xxx到yyy","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记6","slug":"hcia06","date":"2021-04-08T05:50:30.000Z","updated":"2021-04-09T10:50:17.234Z","comments":true,"path":"post/d800.html","link":"","permalink":"http://sakuramuxia.github.io/post/d800.html","excerpt":"","text":"OSPF区域概述 术语 备注 区域（Area） 为了适应大型的网络，OSPF在AS内划分多个区域，区域是以==接口为单位==来划分的，==每个OSPF路由器只维护所在区域的完整链路状态信息== 区域ID（Area ID） 可以表示成一个十进制的数字，如1，也可以表示成一个IP，如0.0.0.1 区域优点 尽量减少路由表条目，使拓扑变化仅影响本区域内部 ospf 1 // 创建进程 area x// 2的32次方 区域的类型 类型 备注 骨干区域 Area0，核心区域也叫==传输区域==（负责在不同的非骨干区域之间分发路由信息） 非骨干区域 非Area 0 也称为常规区域 PS ==所有其他非骨干区域必须和骨干区域直接相连== 类型 备注 IR Internal Route，内部路由器，所有的接口都属于同一区域 BR Backbone Router，骨干路由器，至少有一个接口属于骨干区域 ABR Area Border Router，区域边界路由器，连接一个或者多个区域到骨干区域，至少有一个接口属于骨干区域 ASBR Autonomous System Border Router 自治系统边界路由器 把从其他路由器协议学习到的路由以引入的方式到OSPF进程中 PS 一台路由器可以同时属于多种类型 OSPF核心工作流程： 发现并建立邻居； 传播LSA（区别于距离矢量的路由表更新） ​ Link State Advertisement,链路状态宣告（路况信息） ​ 链路：路由器接口 ​ 状态：描述接口信息（地址、掩码、开销、网络类型、邻居关系等） 将LSA泛洪到区域的所有OSPF路由器，而不是直连的路由器 收集LSA创建LSDB（链路状态数据库、地图） 使用SPF算法计算到每个目标网络的最短距离，并将其置于路由表中 dis ospf peer // 查看ospf邻居 dis ospf lsdb // 查看数据库 dis ospf bri //查看OSPF信息 dis ip routing-table//查看路由表 dis ip routing-table protocol ospf //过滤ospf路由协议 //配置ospf ospf x//创建进程 area x//创建区域 network xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //宣告路由 发现邻居 泛洪LSAs 建立数据库 说明：LSDB是一种数据库 SPF算法 生成路由 OSPF三张表 Route ID 运行OSPF协议前，必须选取一个RID； 用来唯一标识一台OSPF路由器； RID可以手动配置，也可以自动生成； 规则 备注 RID选取顺序规则 1 手动配置（推荐） 2 活动回环接口IP地址最高的 3 活动物理接口上选取IP地址最高的 PS RID选举具有非抢占性，，除非重启OSPF进程 自动配置route id时，ID的选取先看回环口，再看物理口； 配置Route IDospf x route-id xxx.xxx.xxx.xxx //配置RouteID reset ospf process //重启OSPF进程 OSPF数据包结构和类型封装于IP协议之上，IP协议号89 协议号：1代表ICMP；6代表TCP；17代表UDP； OSPF数据包类型（5种） OSPF数据包类型 作用 Hello 建立并维护邻居关系 Datebase Description LSDB的摘要（仅包含LSA包头） Link State Request（LSR） 请求LSA Link State Update（LSU） 发送LSA Link State Acknowledge（LSAck） 对LSU的确认 DB包用于对比路由器间的数据库 OSPF状态机制（7种状态） 状态 备注 失效状态（Down） 没有收到Hello包 初始状态（init） 收到Hello包，但没有看到自己 双向通讯状态（two-way） 收到Hello包，且看到了自己，形成邻居关系 交换初始状态（Exstart） 决定信息交换时路由器的主从关系 交换状态（Exchange） 向邻居发送DD数据包 加载状态（Loading） LSR和LSU交换 完全邻接状态（Full） LSDB同步，形成邻接关系 PS 只有Two-Way和Full是稳定状态 OSPF工作流程（数据包和状态切换过程） OSPF第一阶段是使用Hello包建立双向通信的过程，成为邻居关系。 OSPF第二阶段是通过交换LSDB同步，建立邻接关系 在同一个区域中，路由表可能不一样，邻居表可能不一样，但是数据库是一样的。 OSPF邻居建立条件必须三层直连 Hello报文用来发现和维护OSPF邻居关系 RID唯一 Hello/Dead时间间隔一致 区域ID一致 认证（如果启用了认证）一致 链路MTU大小一致（默认不开启检查，思科默认开启） 子网掩码一致（以太网环境） 网络地址一致 末梢区域设置一致 当出现邻居建立问题时需要从这几方面入手排查 配置OSPFHello时间ospf timer hello x //配置ospf hello时间 //默认Dead时间为hello时间的4倍 OSPF网络类型：基于接口 缺省情况下，OSPF认为以太网的网络类型是广播类型，PPP、HDLC的网络类型是点到点类型 缺省情况下，OSPF认为帧中继（FR），ATM（异步传输）的网络类型是NBMA，BMA广播多路，NBMA非广播多路。 这些接口也是多路访问，因为他是以太网接口，不是因为他有邻居才是多路访问。 改封装（串口）link-protocol ? // 封装类型为 fr hdlc lapb ppp sdlc x25 dis ospf int g0/0/0 // 网络类型验证 p2p 是点到点的类型 broadcast是广播类型 //点到点的是没有MAC地址的 DR和BDR只要是多路访问BMA和NBMA网络中，为了减少邻接关系的数量，从而减少数据包交换次数，最终节省带宽，降低对路由器处理能力的压力，选举DR和BDR。 术语 备注 DR Designed Route，指定路由器，类似班长，总经理 BDR Backup DR，备用DR，类似副班长，副总经理 DRothers 类似普通学生，普通员工 关系 DR、BDR、DRothers之间都保持邻接关系（Full）DRother之间保持邻居关系（Two-Way） 地址 224.0.0.6向DR和BDR发送链路状态更新，224.0.0.5向所有OSPF路由器发送 选举规则 首先比较Hello报文中携带的优先级，优先级范围0~225，默认=1，优先级最高的被选举为DR，优先级次高的被选举为BDR，优先级为0的不参与选举，优先级一致的情况下，比较RID，越发越优先，选举具有非抢占性，除非当DR和BDR都失效或重启OSPF进程 dis ospf int g0/0/0 //查看ospf协议对应接口的信息 dis ospf int lo 1 //查看ospf 回环口的接口信息 //更改回环口ospf的度量值 int lo 1 ospf cost x //输入更改的值即可 dis ospf peer b //查看邻居 //配置ospf sys sys R2 int g0/0/0 ip add xxx.xxx.xxx.xxx yy ospf 1 router-id zzz.zzz.zzz.zzz a j net xxx.xxx.xxx.xxx kkk.kkk.kkk.kkk DR，BDR是基于接口，一个路由器有好多接口， ospf度量值（开销） 在每一个运行OSPF的接口上，都维护着一个接口Cost Cost = 10^8/BW(bps) = 100Mbps/BW = 接口带宽参考值/接口带宽 到一个目标网络的度量值 = ​ 从源到目标所有出站接口的Cost值累加（数据方向） ​ 从源到本路由器沿途所有入站接口的Cost值累加（路有方向） 路由方向看入接口，数据方向看出接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记5","slug":"hcia05","date":"2021-04-03T13:55:06.000Z","updated":"2021-04-04T14:33:49.823Z","comments":true,"path":"post/d940.html","link":"","permalink":"http://sakuramuxia.github.io/post/d940.html","excerpt":"","text":"RIP环路当网络发生故障时，RIP网络有可能产生路由环路； 配置RIP int lo x rip 1 //进程号 ，进程号之间互相独立 ver 2 //版本 net xxx.xxx.xxx.xxx // 宣告这个路由器的路由信息 net yyy.yyy.yyy.yyy // 等等 命令 备注 RIP 1 开启rip进程，进程缺省为1 version 2 开启RIPv2 network xxx.xxx.xxx.xxx 宣告网络，即指定运行RIP的接口，只需要输入接口的==主类网络地址==即可；只有处于此网络中的接口，才能进行RIP报文的接收和发送； rip metricin 5 在接收路由时增加度量值 rip metricout 5 在发送路由时修改度量值 rip split-horizon 开启水平分割，默认开启 rip poison-reverse 开启毒性反转，默认关闭 ==undo rip input== ==禁止接收RIP数据包== ==undo rip output== ==禁止发送rip数据包==//触发更新 ==silent-interface g0/0/0== ==配置被动接口，只收不发== display rip 验证rip信息 display rip int g0/0/0 verbose 验证rip接口相信信息 RIP配置-output int g0/0/0 //进入对应的接口 undo rip output //设置禁止发送rip报文 配置路由器的g0/0/0 接口禁止发送RIP报文 RIP配置-抑制接口 配置g0/0/0接口为抑制状态，只接受RIP报文，不发，被动接口； 此命令的优先级大于rip input 和rip output； 环路避免环路避免-水平分割 路由器从某个接口学到的路由，不会从该路由再发回给邻居路由器。 rip split-horizon // RIP水平分割 环路避免-触发更新 触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文； 环路避免-毒性反转 毒性反转是指路由器从某个接口学到路由后，将该接口的跳数设置为16，并从原接收口发回给邻居路由器； int g0/0/0 rip posion-reverse //开启毒性反转 默认关闭，打开后水平分割失效，毒性反转生效； 查看RIP详细信息dis rip 1 int g0/0/0 //查看rip对应接口信息 dis rip 1 int g0/0/0 verbose //查看rip对应接口详细信息 dis rip 1 // 查看rip1信息 RIP-调整度量值 int g0/0/0 // 进入相关的接口 rip metricout 2 // 在发送路由时修改度量值为2 说明：所有的改变都是为了选路 int g0/0/0 //进入相关的接口 rip metricin 2 // 在接收路由的时候增加度量值为2 1+2 到接收路由器时已经变为3 acl 2000 // acl的作用是 匹配路由 rule 1 permit so xxx.xxx.xxx.xxx 0 // 创建规则，允许x通过路由 filter-policy 2000 import g0/0/0 // 增加一个策略 2000 入方向 接口 OSPF动态路由开放式最短路径优先OSPF（Open Shortest Path First）协议是IETF定义的一种基于链路状态的内部网络路由协议。 RIP是一种基于距离矢量算法的路由协议，存在着收敛慢，易产生路由环路、可拓展性差等问题，目前已逐渐被OSPF取代。 OSPF概述：Open Shortest Path First 开放最短路径优先 大中型网络上使用最为广泛的IGP协议； 链路状态路由协议 无类 使用组播（224.0.0.5 和224.0.0.6） 收敛较快 以开销（cost）作为度量值； 采用的SPF算法可以有效的避免环路； 触发式更新（以较低的频率（每30分钟）发送定期更新，被称为链路状态泛洪） 区域的设计使得OSPF能够支持更大规模的网络 通过LSA的形式发布路由 不支持自动汇总，支持手动汇总 LSA代表路况 汇总 把 4个同网段的IP汇总到一个 OSPF区域概述 术语 备注 区域（Area） 为了适应大型的网络，OSPF在AS内划分多个区域，区域是以==接口为单位==来划分的，==每个OSPF路由器只维护所在区域的完整链路状态信息== 区域ID（Area ID） 可以表示成一个十进制的数字，如1，也可以表示成一个IP，如0.0.0.1 区域优点 ==尽量减少路由表条目，使拓扑变化仅影响本区域内部== ospf 1 // 创建进程 area x// 2的32次方 区域的类型 类型 备注 骨干区域 Area0，核心区域也叫==传输区域==（负责在不同的非骨干区域之间分发路由信息） 非骨干区域 非Area 0 也称为常规区域 PS ==所有其他非骨干区域必须和骨干区域直接相连== 类型 备注 IR Internal Route，内部路由器，==所有的接口都属于同一区域== BR Backbone Router，骨干路由器，至少有一个接口属于骨干区域 ABR Area Border Router，区域边界路由器，连接一个或者多个区域到骨干区域，至少有一个接口属于骨干区域 ASBR Autonomous System Border Router 自治系统边界路由器 把从其他路由器协议学习到的路由以引入的方式到OSPF进程中 PS 一台路由器可以同时属于多种类型","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"}],"author":"湊あくあ"},{"title":"HCIA学习笔记4","slug":"hcia04","date":"2021-04-02T14:55:06.000Z","updated":"2021-04-02T15:00:10.305Z","comments":true,"path":"post/1981.html","link":"","permalink":"http://sakuramuxia.github.io/post/1981.html","excerpt":"","text":"路由备份-浮动静态路由 利用优先级的特性，配置浮动路由； 在主路由失效的情况下，浮动路由会加入到路由表并承担数据转发业务； 在主链路正常情况下，只有主路由会出现在路由表中； 配置验证dis ip routing-table //查看路由表 int g0/0/0 //进入对应接口模式 shutdown //关闭接口 d th // 查看当前配置 dis ip routing-table pro static //查看路由表详细信息 tracert 1.0.0.10 // 跟踪路由 // 写错的路由一定要删除 缺省路由一种特殊的路由，能匹配所有目标网络。 可以通过静态路由配置，也可以通过动态路由协议发布。 在路由表中，以到网络0.0.0.0（掩码为0.0.0.0）的形式出现、 通常用于末梢网络（如：家庭上网、企业出口） 命令 备注 ip route-static 0.0.0.0 0.0.0.0/0 下一跳地址/出接口 配置缺省路由 缺省路由配置 缺省路由是目标网络和掩码都为0的特殊路由； 如果报文的目标地址无法匹配路由表中的任何一项，路由器将选择依照缺省路由来转发报文 Loopback接口回环口，逻辑的、虚拟的接口； 命令 备注 interface loopback 编号 创建或配置一个回环口，创建后，默认up 作用 ==模拟直连网段==，可用于测试；设备管理（稳定）；供其他协议使用（ospf、bgp、mpls等）SNMP Traps消息的源地址；其他用途（用途十分广泛） int lo 2 // 进入回环口2 ip add xxx.xxx.xxx.xxx aa // 配置IP地址 dis ip routing-table // 查看路由表 dis ip int b // 查看接口 ip地址 //网关就是一条缺省路由 //本地网络不需要网关 //windows添加静态路由 rpute print route add xxx.xxx.xxx.xxx aa yyy.yyy.yyy.yyy ipconfig /release // 去除网卡(适配器1)的动态IP地址 ipconfig /renew //为网卡重新动态分配IP地址 ipconfig /all //显示所有网络适配器（网卡）TCP/IP配置 netsh winsock set //重置 Winsock 目录,重置网络编程接口 netsh winhttp reset proxy // 解除代理设置 netsh int ip reset c:/catalog.txt // 重置IP 设置，恢复到默认自动获取IP 和DNS 服务器地址。 nslookup 域名 //查询一台机器的IP地址和其对应的域名,通常它能监测网络中DNS服务器是否能正确实现域名解析它。 ping -a yyy.yyy.yyy.yyy xxx.xxx.xxx.xxx //y为源IP，x为目的IP 小工具：IPOP配置路由的工具； 动态路由路由协议概述： 路由器之间交互信息的一种语言； 共享路由信息； 维护路由表、提供最佳转发路径； 路由协议总览 动态路由的分类： show ip bgp sum //查看bgp的总和 CNNIC // 中国互联网信息中心 类型 备注 IGP（Interior Gateway Protocol）内部网关协议 用于一个AS内部交换路由信息RIP、OSPF、IS-IS EGP（Exterior Gateway Protocol）外部网关协议 用于多个AS之间交换路由信息BGP AS（Autonomous System）自制系统 处于单个管理机制下的网络（如：企业、电信、移动、联通） rip ? // 进程号 ospf ? // 进程号 isis ? // 进程号 //中国电信骨干网 AS 4134 bgp ? // AS号 路由协议分类：根据协议分类 类型 备注 DV（Distance-Vector）距离矢量 基于距离矢量算法，路由器并不了解网络拓扑结构类似路牌，道听途说如：RIP、EIGRP LS（Link-State）链路状态 基于SPF（Shortest Path First，最短路径优先）算法，路由器了解完整的网络拓扑结构，类似地图如OSPF、IS-IS RIP：只看眼前 LSA：链路状态宣告 OSPF：看带宽 有类：不携带掩码； 无类：携带掩码； 根据业务应用： 类型 备注 Unicast Routing Protocol 单播路由协议 如：RIP、EIGRP、OSPF、BGP、IS-IS Multicast Routing Protocol 组播路由协议 如：DVMRP、PIM-SM、PIM-DM 路由协议的操作规则 协议是在接口上运行的； 只能学习和发布相同协议已知的路由信息； 如果不同的路由协议间需要交换路由信息，就需要进行==注入（import）；== rip 1 //创建进程 // 宣告方式一 network xxx.xxx.xxx.xxx //宣告网络 // 注入方式二 //在RIP 1接口环境下注入 import route OSPF 1 // ver 1 RIP v1 版本 // ver 2 RIP v2 版本 路由器收敛 当所有路由表包含相同网络可达性信息 网络（路由）进入一个稳定状态 网络在达到收敛前无法完全正常工作 指标 备注 正确性 能够正确找到最优的路由，且无闭环 快收敛 当拓扑结构发生变化之后，能够迅速作出相应的路由改变 低开销 协议自身的开销（内存、CPU、网络带宽）最小 安全性 协议自身不易受攻击，有安全机制 普适性 适应各种拓扑结构和各种规模的网络 RIP路由信息协议（Routing Information Protocol）的简称，它是一种基于距离矢量（Distance Vector）算法的协议，使用跳数作为度量来衡量到达目的网络的距离。RIP主要应用于规模较小的网络中。 特点： 距离矢量路由协议，属于IGP协议； 适用于中小型网络，有RIPV1和RIPv2两个版本； 基于UDP，目标端口号520； 周期性更新约30s一次； 支持水平分割。毒性逆转和触发更新等防环特性； 工作原理： 路由器运行RIP后，会首先发送路由器更新请求，受到请求的路由器会发送自己的RIP路由进行响应。 网络稳定后，路由器会周期性发送路由更新信息。 RIP-度量 RIP使用跳数作为度量值来衡量到达目的网络的距离； 缺省情况下，直连网络的路由跳数为0，当路由器发送路由更新时，会把度量值加1； RIP规定超过15跳为网络不可达； 组播地址：224~239 RIP V1广播，V2组播 RIPv1和RIP v2的区别 RIPv1是有类路由协议，不支持VLSM和CIDR； 以广播的形式发送报文； 不支持认证； RIPv2是无类路由协议，支持VLSM支持路由聚合与CIDR； 支持以广播或者组播（224.0.0.9）方式发送报文； 支持明文认证和MD5密文认证； RIP环路当网络发生故障时，RIP网络有可能产生路由环路； 配置RIPrip 1 ver 2 net xxx.xxx.xxx.xxx // 宣告这个路由器的路由信息 net yyy.yyy.yyy.yyy // 等等","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记3","slug":"hcia03","date":"2021-04-01T13:15:06.000Z","updated":"2021-04-01T13:18:57.439Z","comments":true,"path":"post/dbc0.html","link":"","permalink":"http://sakuramuxia.github.io/post/dbc0.html","excerpt":"","text":"// 强者把脆弱给自己看，弱者把脆弱给别人看 // 人心惟危，道心惟微 // 思往日身者，见未来远 // 三省 VRP远程管理Telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理 允许终端远程登录到任何可以充当Telnet服务器的设备。 Telnet服务器和终端之间无需直连，只需保证两者之间可以互相通信即可。 Telnet直连服务 Telnet客户端和服务器基于TCP（端口号=23）连接来传输命令 认证模式 认证模式 描述 AAA 登录时需要用户名和密码 Password 登录时只需要密码 配置命令 命令 备注 Telnet server enable 开启Telnet服务 display telnet server status 验证Telnet服务 user-interface vty 0 4 进入VTy配置模式 authentication-mode password/aaa 配置认证模式 set authentication password cipher huawei 配置认证密码 user privilege level 15 配置用户级别 user-interface maximum-vty 15 配置最大VTY会话数量 aaa 进入AAA配置模式 local-user xxx password cipher xxx 创建用户和密码 local-user xxx privilege level 15 配置用户级别 local-user xxx service-type telnet 配置用户可用服务 dis tel ser st//简写 user-interface console 0//默认console口有一个admin账号aaa权限 dis current-configuration//查看当前配置 dis ip route //查看当前路由表 dis ip int b //? ==动手实践项目：实验拓扑== VRP文件系统华为网络设备的==配置文件==和==系统文件== 管理设备存储 管理项目 命令 管理项目 命令 管理项目 命令 修复文件系统异常的存储设备 fixdisk 创建目录 mkdir 显示文件的内容 more 格式化存储设备 format 重命名 rename 拷贝文件 copy 管理目录/文件 查看当前的工作目录 pwd 移动文件 move 管理项目 命令 改变当前目录 cd 重新命名文件 rename 恢复删除文件 undelete 显示文件或目录信息 dir 压缩文件 zip 删除目录 rmdir 删除文件 delete 执行批处理文件 execute 彻底删除回收站中的文件 reset d // 文件夹 r w x// x 可执行文件 reset recycle-bin // 清空回收站 delete unreserved xxx.xxx// 彻底删除文件 rename xxx.xxx yyy.yyy //重命名文件 copy xxx.xxx /yyy/zzz/aaa.aaa //把xxx 复制到yyy/zzz/目录并且把文件名改成aaa.aaa save // 保存配置 dis save-configuration file //查看当前保存的配置文件 compare configuration //对比当前配置文件和下次启动配置对比 reset save-configuration //重置配置文件 reboot //重启设备 华为的配置文件都保存在vrpcfg.zip中 系统启动文件查询 命令 功能 display startup 查看系统启动配置参数//升级降级系统 系统启动配置文件修改 命令 功能 startup saved-configuration 配置系统下次启动时使用的配置文件 startup saved-configuration /xxx/yyy/aaa.aaa //更改下次启动配置文件 startup system-software /xxx/yyy/bbb.bbb //更改下次启动系统文件 dis startup VRP系统管理文件传输网络设备可以从服务器获取VRP系统文件，也可以将日志文件、配置文件、保存到服务器作为备份。 文件传输协议FTP（TCP）、TFTP（UDP） 常见的有FTP和TFTP两种； Xlight 软件 创建FTP服务器 windows端 从FTP服务器获取VRP文件更新ftp xxx.xxx.xxx.xxx //远程到ftp服务器 dis ip int b //查看接口IP地址 //配置IP地址 sys int g0/0/1 ip add xxx.xxx.xxx.xxx //下载FTP服务器的文件 get xxx.xxx put xxx.aaa // 报错时，配置服务用户权限没有给 //cisco TFTP server //TFTP协议传输软件 从TFTP服务器获取VRP文件更新//打开 Cisco TFTP server ，开启TFTP服务 tftp xxx.xxx.xxx.xxx get aaa.bbb //下载文件 tftp xxx.xxx.xxx.xxx put aaa.bb //上传文件 路由技术 术语 备注 类比 路由 从源头到目标的路径不同网络间的转发过程 火车 路由表 路由信息的集合路由的依据 时刻表 路由器 具有路由功能的设备 火车站 默认网关 通常是路由设备的接口IP地址 火车站的地址 经过一次路由，TTL减1。 路由过程：IP路由过程 /32 // 代表一个回环口 ip route-static xxx.xxx.xxx.xxx aa yyy.yyy.yyy.yyy //增加路由 // 最长匹配原则 当路由器（或其他三层设备）收到一个IP数据包时，会查看数据包的IP头部中的==目的IP地址==，并在路由表中进行查找，在匹配到最优路由后，将数据包扔给该路由所指的出接口或下一跳。 路由器转发数据包 路由器需要知道下一跳和出接口才能将数据转发出去。 dis ip routing-table protocol static //详细路由情况查询 ==路由选路== 路由器负责为数据包选择一条最优路径，并进行转发； 路由器的工作内容： 收到数据包查看目标IP地址 在路由表中选择最佳路径 维护路由表 路由表解析：dis ip routing-table //查看路由表 // 配路由一定要有图 // 路由表中存放的都是最优的 路由表字段 备注 Destination 目标，用来标识IP包的目标地址或目标网络 Mask 掩码，选择最佳路由的重要判断依据（最长匹配原则） NextHop 下一跳，指明IP包所经路由的下一个路由器的接口地址 Interface 出接口，指明IP包将从该路由器的哪个接口转发出去 Protocol 协议，路由的来源、学习方式 Preference 优先级，比较不同路由来源到达==相同目标网络==的优先级越低越优先 Cost 度量值，比较相同路由来源到达==相同目标网络==的不同路径的优先级越低越优先 路由的优先级 路由度量 等价路由对于同一个路由来源，当达到同一个目标网络有几条相同度量值的路由时，这些路由都会被加入到路由表中，数据包会在这几个链路上进行负载分担。（ECMP） 负载分担：根据路由器的算法选路，源IP和目的IP 最长匹配原则：最终数据包匹配最佳路由的算法 路由表的形成、路由的来源： 路由来源 备注 直连路由 路由器接口上的网络（接口配置了IP地址并且开启） 静态路由 管理员手工添加的网络 动态路由 路由器之间学习到的网络 静态路由配置命令 命令 备注 ip route-static ==目标网络== ==子网掩码==/前缀 ==下一跳/出接口== 配置静态路由 如果出接口为以太网接口，则必须要指定下一跳地址 如果出接口为串口，可以使用下一跳或出接口来配置 切记：通讯是双向的，不要忘记配置返回流量的路由 注意：任何时候能写下一跳就写下一跳 静态路由配置 ip route-s xxx.xxx.xxx.xxx aa bbb.bbb.bbb.bbb//配置静态路由 负载分担 静态路由支持到达同一目标网络的等价负载分担 数据包会在去的时候走一条路，回来的时候走另一条路； 路由备份-浮动静态路由 说明：和负载分担不同的是这两条路的速度可能不一样，一个是千兆，一个是百兆。正常情况走千兆，异常情况走百兆。 利用优先级的特征，配置浮动路由； 在主路失效的情况下，浮动路由会加入到路由表并承担数据转发业务； ip route-static xxx.xxx.xxx.xxx aa bbb.bbb.bbb.bbb preference yyy // 更改优先级 默认是60","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"ARP","slug":"ARP","permalink":"http://sakuramuxia.github.io/tags/ARP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记2","slug":"hcia02","date":"2021-03-30T13:06:13.000Z","updated":"2021-03-30T13:11:04.721Z","comments":true,"path":"post/1b01.html","link":"","permalink":"http://sakuramuxia.github.io/post/1b01.html","excerpt":"","text":"IP地址基础 在IP网络中，通信节点需要一个IP地址 以点分十进制表示，由32位二进制组成； 分为网络位和主机位两部分： ​ 网络位，代表IP地址所属的网段，表示同一个房间； ​ 主机位，代表网段上的某个节点，表示某一个座位； ​ 由子网掩码决定分界点 ； IP地址的分类根据第一组八位二进制 能被主机使用的是ABC三类； D类地址用于组播技术； 0开头的地址代表所有地址或无地址； 127开头的地址代表自己； 私有IP地址空间 地址范围 10.0.0.0/8 10.0.0.0到10.255.255.255 172.16.0.0/16 172.16.0.0到172.31.255.255 192.168.0.0/24 192.168.0.0到192.168.255.255 公网地址 用于Internet，向ISP付费申请，全球唯一 私网地址 用于企业内部网络，不能用于Internet，免费使用，可以重复 地址转换 使用私网地址如果要访问Internet，必须转换为公网地址，该技术称为NAT 子网掩码 区分网络部分和主机部分； 1表示网络位，0表示主机位（ 连续的1和0） 网络地址，主机地址，广播地址：每个网段上都有两个特殊地址（最小和） 网络地址 ==主机位==全为0，代表一个网段（头）比作房间 主机地址 主机位不全为0也不全为1，代表一个网段内的一个节点，比作座位 广播地址 ==主机位==全为1，代表一个网段内的所有节点（尾） 注意： 子网掩码 /32既是主机地址又是网络地址，又是广播地址； 子网掩码把网络地址和主机地址变小或变大； 子网掩码连续的1和连续的0 子网掩码 用于区分网络部分和主机部分； 1表示网络位，0表示主机位（连续的1和0） 在设计网络时使用有类IP地址会造成地址的浪费 不同的网段用路由器 子网划分 满足不同网络对IP地址的需求； 实现网络的层次性； 节省IP地址； 默认子网掩码可以进一步划分，成为变长子网掩码； 即网络位向主机位“借位”； 公式： 数学问题： ​ 块=2^主机位数=256-掩码； ​ 找块最接近主机的倍数（一个小于，一个大于）； 数据转发过程TCP/IP协议簇和底层协议配合，保证了数据能够实现端到端的传输。数据传输过程是一个非常复杂的过程，例如数据在转发的过程中会进行一系列的封装和解封装。 网关：Gateway 位于不同网络间的主机要实现通讯，必须把数据包发送给网关； 网关通常就是一台三层网络设备（路由器、三层交换机、防火墙、服务器）； 网关地址就是设备的接口地址； route print 打印路由表 数据转发过程：数据包在相同网段内或不同网段之间转发所依据的原理基本一致。 TCP封装 当主机建立了到达目的地的TCP连接后，便开始对应用层数据进行封装。 IP封装 查找路由 ARP 通过ARP缓存表找到吓一跳的MAC地址； 如果表项里没有吓一跳的MAC地址，主机A会发送ARP请求； 以太网封装 数据帧转发 网关（RTA）收到帧后，检查==FCS==和目的MAC地址，通过后即系解封帧； FCS：校验 数据包转发过程 网关检查是否具有到达目的网络的路由条目。 如果存在转发路径，则为数据包添加一个新的二层帧头和帧尾，并继续转发。 数据帧解封装 RTB以服务器A的MAC地址作为目的MAC继续转发； 服务器A收到该数据帧后，发现目的MAC为自己的MAC，于是会继续处理该数据帧； 数据包解封装 服务器A检查数据包的目的IP地址，发现目的IP与自己的IP地址相同； 服务器A剥掉数据包的IP头部后会送往上层协议TCP继续进行处理； 数据段解封装 服务器A检查TCP头部的目的端口，然后将数据段发送给应用层的HTTP协议进行处理。 单播、广播、组播根据目标地址判断 单播：一对一； 广播：发送给所属广播域内的所有目标；MAC地址=FFFFFFFFFFFF；IP地址=该网段的广播地址； 组播：发送给一组目标,MAC地址=01-00-5E开头，IP地址=D类组播地址； 接收规则： 接受地址包括本卡MAC地址、广播地址和本机所属组播组地址； 网卡丢弃与本卡接收地址不匹配的帧； 网卡解开与本卡接收地址匹配的帧，将数据递交给上层处理； 交换机有MAC地址表； 路由器有IP路由表； 集线器：信号复制器，物理层； 集线器：不分冲，不分广；（冲突域，广播域）； 交换机：分冲，不分广； 路由器：分冲，分广； 冲突域（上），广播域（下）个数。 VRP基础dis version //查看设备硬件信息 d th // dis http services state //查看HTTP服务是否打开 dis vlan //查看VLAN sysname xxx //配置名字 dis users // 查看使用用户名 交换机可以隔离冲突域，路由器可以隔离广播域，这两种设备在企业网络中应用十分广泛，VRP（Versatile Routing Platfrom）通用路由平台是华为公司数据通信产品的通用操作系统平台。 管理形式 备注 本地管理Local 通过Console线连接Console或MINI USB口，终端使用==Serial协议==适合初始化，故障处理，系统升级，同时只能支持==一个会话。== 远程管理Remote 通过IP地址或域名联机虚拟==VTY口==，使用T==elnet或SSH协议==适合后期维护、异地管理、同时可以支持多个会话、 VRP基础配置 设备初始化启动： dis ip int b // 命令行视图 命令行帮助 命令快捷键ctrl + a //把光标移动到当前命令行的最前端 ctrl + e //把光标移动到当前命令的最后端 ctrl + c //停止当前命令的运行 ctrl + z //回到用户视图 ctrl + ] //终止当前连接或切换连接 视图的切换 命令 功能 system-view 从用户视图进入系统视图 quit 从系统视图返回到用户视图 return 从任意的非用户视图返回到用户视图 sys // 系统视图 int lo 1 //配置接口 ospf 1 //配置路由 sys xxx //自定义名字 //配置IP地址，首先需要进接口模式 int lo 1 ip add xxx.xx.xx.xx xx //配置其他模式的，先退出模式,再配置，也可以直接配置。 q //简写 = interface = int //敲白板 历史命令的调用 命令 功能 display history-command 显示历史命令 上光标 调用上一条历史命令 下光标 调用吓一跳历史命令 上下键 白板复制修改即可 dis hi + \"TAB\"= dis history command 基本配置步骤配置设备名称 命令 功能 sysname 配置设备名称 配置系统时钟 命令 功能 clock timezone 设置所在时区 clock datetime 设置当前时间和日期 clock daylight-saving-time 设置采用夏时刻 //用户模式的状态下 clock timezone BJ add 08:00:00 clock datetime 10:20:30 2021-03-30 display clock // 查看时间 配置标题消息 命令 功能 header login 配置在用户登陆前显示的标题消息 header shell 配置在用户登录后显示的标题消息 header login information \"xxxxx\"; header shell information \"xxxxx\"; header login information \"/回车 xxxxx /回车\" 用户界面 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 display diagnostic-information 显示设备所有状态信息 system-view user-interface vty 0 4 配置用户界面命令 命令 功能 idle-timeout 设置超时时间 screen-length 设置指定终端屏幕的临时显示行数 history-command max-size 设置历史命令缓存区的大小 配置登陆权限 命令 功能 user privilege 配置指定用户界面下的用户级别 set authentication password 配置本地认证密码 命令等级 用户等级 命令等级 名称 0 0 访问级 1 0 1 监控级 2 0 1 2 配置级 3-15 0 1 2 3 管理级 配置接口IP地址 命令 备注 display [IP] interface brief 查看接口摘要信息 // 简称 dis int b // *down=人为手动关闭 // undo 关闭命令 dis ip int b // 三层口，显示有IP dis mac-address 状态信息查询 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 ==display diagnostic-information== 显示设备所有状态信息 d th //这个模块配置的东西 说明：思科 show = display display diagnostic-information xxx.txt //把显示信息保存在文件中 VRP远程管理telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记1","slug":"hcia01","date":"2021-03-29T16:53:06.000Z","updated":"2021-04-04T14:42:06.859Z","comments":true,"path":"post/1a41.html","link":"","permalink":"http://sakuramuxia.github.io/post/1a41.html","excerpt":"","text":"开始计算机网络的定义计算机网络是一组自治计算机互联的集合 网络的组成设备Device；介质Media；报文Date；协议Protocol；信息源source（发送方）和信息目Destination（接收方）； 网络的演进ISP：Internet Services Provider，因特网服务提供商； 最后一公里接入：宽带； 网络的类型覆盖范围不同组网技术不同（二层 物理层 数据链路层） 协议网络通信中的语言：汉语英语； note：ping IP地址 -t 一直ping 网络拓扑用来面熟网络结构（网络类型、设备类型、设备数量、线缆、带宽、服务、数据走向） 拓扑类型点到点；星型； 网络模型网络打通：路由、交换技术即可； 防火墙可以替代路由器； 分层思想==将复杂的流程分解为几个功能相对单一的子过程==； 网络标准化规范不同的互联标准，兼容； 两大模型==OSI模型：== 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（七层）； ==协议位于的层数：== DNS，HTTP， 位于应用层； TCP/IP，UDP，位于传输层； IP，ICMP，位于网络层； ==TCP/IP模型：== 排查问题可以从 网络模型从下往上排查，或者从上往下排查； 抓包工具可以使用wireshark或科来工具进行抓包； 选择好网卡，选择筛选器，选择要抓包的协议类型：icmp，http，dns。 数据的封装和解封 封装：应用数据需要经过每一层处理后通过网络传输到目的端； OSI把每一层数据称为PDU（protocol Data Unit，协议数据单元）； TCP/IP根据不同层分别使用了段，包，帧，比特。 逐层向下传递数据，并添加报文和报尾的过程称为封装（打包）； 反之，接收方需要逐层向上传递数据，称为解封（拆包）； 常用的应用层协议 DNS HTTP SMTP与POP3/IMAP Telnet FTP与TFTP DNS： Domain Name System，域名解析系统； 建立IP地址与域名之间的映射关系； 将域名解析为IP地址； 将IP地址解析为域名； 常见的DNS服务器：114.114.114.114/ 223.5.5.5/223.6.6.6/180.76.76.76 DNS专门调试模式： nslookup //再输入域名 ipconfig/displaydns //查看DNS缓存 ipconfig/flushdns //清空DNS缓存 HTTP 协议 超文本传输协议 帮助客户端访问万维网 网页浏览器通过翻译HtML文件来表现文本、图像、音乐、动画及视频等对象、 第六讲抓包练习； SMTP与POP3：邮件服务 协议 备注 SMTP Simple Mail Transfer Protocol，简单邮件传输协议 POP3 Post Office Protocol v3，邮局协议版本3 IMAP Internet Message Access Protocol，互联网邮件访问协议 Telnet协议：终端协议远程管理的主要协议（网络设备、服务器、数据库） 常用终端工具有：SecureCRT、Putty、Xshell telnet应该开了这个服务才能响应； FTP和TFTP 协议 备注 FTP File Transfer Protocol，文件传输协议 TFTP Trivial File Transfer Protocol，简单文件传输协议，不可靠； FTP://服务器的IP或域名/路径/文件名 FTP://用户名:密码:@IP或域名:端口号 传输层传输层定义了主机应用程序之间端到端的连通性，传输层中最为常见的两个协议分别是传输控制协议TCP（Transmission Control Protocol）和用户数据包协议UDP（User Datagram Protocol） 传输层概述 传输层提供端到端的连接： 网络层提供点到点的连接： 传输层端口（port）==怎么查看自己或者目标服务器的端口是否打开==； 端口号用于区分不同的网络服务； 端口号一共有 0 ~ 65535个（2的16次方） 既使用TCP和UDP的服务是DNS； 源端口随机分配，目标端口使用知名端口； 应用客户端使用的源端口号一般为系统中未使用的且大于1023； 目的端口号为服务端开启的服务所侦听的端口，如HTTP缺省使用80； 注意： ping不同有可能是防火墙是开着的； 开着哪些服务，哪些端口是开着的； 传输层要搞明白三个东西：==端口号，TCP/UDP,DNS；== DNS既 会用到TCP也会用到UDP； ping是网络层的技术； telnet（TCP协议）命令 可以探测端口是否开启:IP加端口； 端口扫描：portScanner&amp;stuff工具软件； 常见的协议端口号： 传输层协议 协议 备注 TCP Transmission Control Protocol，传输控制协议； UDP User Datagram Protocol，用户数据报协议； TCP UDP数据包结构对比 TCPTCP是一种==面向连接==的传输层协议，提供==可靠==的传输服务； TCP会话建立－三次握手 类似于打电话： 甲：你好，你是小王吗？ 乙：是的，你是老李吗？ 甲：是的。 TCP会话的确认 TCP会话的拥塞和流量控制 TCP会话的终止-四次挥手 UDP TCP和UDP的对比： 传输控制协议（TCP） 用户数据报协议（UDP） 面向连接 无连接 可靠传输 尽力而为的传输 支持流控及窗口机制 无流控及窗口机制 Http，FTP等 TFTP，DNS，DHCP等 数据链路层与以太网（二层）以太网：Ethnet，当今主导地位的局域网组网技术； 网络标准： 数据链路层的分层设计 LLC Logical Link Control 逻辑链路控制：负责识别网络层的协议类型，接收上层数据包封装后帧后，向下层传递； MAC Media Access Control，介质访问控制；处理硬件设备的物理寻址，定义网络拓扑及数据帧的传递顺序 以太网的帧结构： 说明： 0800表IPV4；86DD代表IPV6；0806代表ARP ping 会产生ICMP协议的包；ping IP -l 2000 网络层ARP：Address Resolution Protocol，地址解析协议，获取MAC地址的东西； 网络设备有数据要发送给另一台网络设备时，必须要知道对方而网络层地址（IP地址）。IP地址由网络层来提供，但是仅有IP地址是不够的，IP数据报文必须封装成帧才能通过数据链路进行发送。数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址，通过目的IP地址而获取目的MAC地址的过程是由ARP协议来实现的。 数据链路层在进行数据封装时，需要目的MAC地址。 arp -a //查看缓存MAC arp -d //清除缓存MAC 说明： MAC：FFFFFFFFFFFF或全0代表广播； 自己问自己，得到回复则代表地址冲突； ICMPInternet控制报文协议，ICMP是网络层的一个重要协议，ICMP协议用来在网络设备间传递各种差错和控制信息，他对于收集各种网络信息、诊断和排除各种网络故障具有至关重要的作用。使用基于ICMP的应用时，需要对ICMP的工作原理非常熟悉。 用于可达性测试； 使用ping命令调用； ping命令的结果： //无法访问主机 //请求超时 防火墙开启了 //传输失败 网关失败 是否在同一个地址段， 在同一个地址段，不需要通过网关直接能ping同； 不在同一个地址段，需要网关找相关的路由； 网关MAC是否有问题； IP协议internet protocol 因特网协议； 网络层位于数据链路层与传输层之间，网络层中包含了许多协议，其中最为重要的协议就是IP协议，网络层提供了IP路由功能，理解IP路由除了要熟悉IP协议的工作机制之外，还必须理解IP编址以及合理地使用IP地址来设计网络； IP的包头结构： 协议号用于标识上层协议; 分片当数据包比链路MTU大时，就可以被被分解为很多的足够小片段的过程； ping命令： ping IP -l 数据包大小; //IPV4可以分段; //IPV6不可以分段; ping IP -f //不允许分片； TTL 生存时间 Time to Live 生存时间； 防止IP数据包在网络内无休止地传输（环路）； 没经过一次路由TTL值就会减1； 当TTL=0的时候，就丢弃数据包； 利用TTL特性，可以实现路由跟踪技术，排错的重要方法之一； ping -i tracert -d //常用重要命令9 TTL的默认值255；64；128； 说明： 网关就相当于一条默认路由； TTL的代码是11,0； 问题： 一去一回TTL会不会两倍消失？ IP地址在IP网络中，通信节点需要一个IP地址； 以点分十进制，由32位二进制 分为网络位和主机位两部分: 网络位，代表IP地址所属的网段； 主机位，代表网段上的某个节点； ​ 由子网掩码决定分界点； 类似为电话号码，国际号，区号，号码； IP地址的分类：根据第一组八位二进制 127是一个环回网卡，回环 是自己； 测试TCP/IP协议栈 组件是否安装；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"Java学习笔记1","slug":"java01","date":"2021-03-29T16:53:06.000Z","updated":"2021-04-04T14:41:11.656Z","comments":true,"path":"post/3326.html","link":"","permalink":"http://sakuramuxia.github.io/post/3326.html","excerpt":"","text":"预知Java语言跨平台原理在需要运行java应用程序的操作系统上，安装一个与操作系统对应的java虚拟机java virtual machine 即可。 jre jdk 的概念1、JRE 是java程序运行时的环境，包含JVM和运行时所需要的核心类库。 我们想要运行一个已知的java程序，那么只需要安装JRE即可。 2、jdk是java程序开发工具包，包含JRE和开发人员使用的工具。 其中的开发工具：编译工具（javac.exe）和运行工具（java.exe）。 jre jdk和JVM的关系JDK的下载和安装官网：www.oracal.com ==JDK安装中，安装路径不要包含中文和空格。所有的开发工具最好安装目录统一。== ==bin 目录 jdk 的各种工具命令。重点掌握== 常用DOS命令​ cmd 盘符名称: 盘符切换 dir 查看当前路径下的内容 cd 进入单级目 cd.. 回退到上一级目录 cd \\ 回退到盘符目录 cls 清屏 exit 退出命令提示符窗口 cd 目录1\\目录2\\目录3… 进入多级目录。 Path 环境变量的配置验证 javac java 正式开始注释注释的分类 ​ 单行注释 ／／ ​ 多行注释 ／＊ ＊／ ​ 文档注释 ／＊＊ ＊／ 暂时不讲 /* Java程序中最基本的组成单元是类， 类的定义格式 public class 类名 { } 这是我定义的Helloworld类 */ public class Helloworld{ public static void main(String[] args){ /* 这是main方法 main方法是程序的入口方法，代码的执行是从main方法开始的 */ // 这是输出语句，\"\"里面的内容是可以改变的 System.out.println(\"HelloWorld\"); } } 关键字被java语言赋予了特定含义的单词 关键字的特点 关键字的字母全部小写 常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。 常量常量在程序运行过程中，其值不可以发生改变的量。 常量分类 常量类型 说明 举例 字符串常量 用双引号括起来的内容 “HelloWorld” 整数常量 不带小数的数字 123 小数常量 带小数的数字 12.21 字符常量 用单引号括起来的内容 ‘’ 布尔常量 布尔值，表示真假 true,false 空常量 一个特殊的值，空值 null 注意：空常量是不能直接输出的。 数据类型数据类型内存占用和取值范围注意：给一个整数，默认是int类型的，给一个浮点数，默认是Double类型的。 变量变量变量：在程序运行过程中，其值可以发生改变的量。 变量定义数据类型 变量名 = 变量值； int a = 10; 变量的使用注意事项 main方法进来这一类，变量名不能重复； 定义变量的时候要赋值； long类型定义后，后面加一个L，因为默认是int类型； float类型定义后，后面要加一个F，因为默认是double类型； 标识符标识符给类，方法，变量等起名字的符号； 标识符的定义规则 由数字、字母、下划线_和美元符组成 不能以数字开头 不能是关键字 区分大小写 常见命名约定小驼峰命名法：方法、变量 标识符是一个单词的时候，首字母小写； 标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写； 大驼峰命名法：类 标识符是一个单词的时候，首字母大写； 标识符由多个单词组成的时候，每个单词的首字母大写； 类型转换自动类型转换表示把一个数据范围小的数值或者变量赋值给另一个表示数据范围大的变量； 注意：byte到char是不可以的，类型不兼容。 强制类型转换表示把一个数据范围大的数值或者变量赋值给另一个表示数据范围小的变量； 格式：目标数据类型 变量名 = （目标数据类型）值或者变量 范例： int k (int)88.88; 运算符算术运算符 符号 作用 + 加 - 减 * 乘 / 除 % 取余 注意：/ 和% 的区别：两个数据做除法，/取结果的商，%取结果的余数； 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算； 字符的 “+”操作字符串的“+”操作赋值运算符int i = 10; i += 20;//把左边和右边的数值做加法操作，结果赋值给左边；包含了强制类型转换 i = i + 20;//int类型是一样的但是又不完全一样； short ==*注意：扩展的赋值运算符（+= -= = /= ）隐含了强制类型转换；== 自增自减运算符 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意： ++和–既可以放在变量的后边，也可以放在变量的前边； 单独使用的时候，++和–无论是放在变量的前边还是后边，结果是一样的； ==参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–；== ==参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作；== 最常见的用法：单独使用； 关系运算符 符号 说明 == 判断表达式的值是否正确，成立为true，不成立为false != 判断表达式的值是否正确，成立为true，不成立为false &gt; 判断表达式的值是否正确，成立为true，不成立为false &gt;= 判断表达式的值是否正确，成立为true，不成立为false &lt; 判断表达式的值是否正确，成立为true，不成立为false &lt;= 判断表达式的值是否正确，成立为true，不成立为false 注意： 关系运算符的结果都是boolean类型，要么是true，要么是false； 千万不要把”==“误写成”=“； 逻辑运算符是用来连接关系表达式的运算符。 当然，逻辑运算符也可以直接连接boolean类型的常量或者变量。 基本逻辑运算符 符号 作用 说明 &amp; 逻辑与 有false则false | 逻辑或 有true则true ^ 逻辑异或 相同为false，不同为true ! 逻辑非 结果正好相反 短路逻辑运算符 符号 作用 说明 &amp;&amp; 短路与 有false则false，但是具有短路效果 || 短路或 有true则true，但是具有短路效果 ==注意区别：== 逻辑与&amp;，无论左边真假，右边都要执行； 短路与&amp;&amp;，如果左边为真，右边执行，如果左边为假，右边不执行； 逻辑或|，无论左边真假，右边都要执行； 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行； 三元运算符 //关系表达式?表达式1:表达式2; a > b ? a : b; //首先计算关系表达式的值； //如果值为true，表达式1的值就是运算结果 //如果值为false，表达式2的值就是运算结果 数据输入 Scanner使用的基本步骤 导包 import java.util.Scanner; ==导包的动作必须出现在类定义的上边；== 创建对象 Scanner sc = new scanner(System.in); ==上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变；== 接受数据 int i = sc.nextInt(); ==上面这个格式里面，只有i是变量名，可以变，其他的都不允许变；== 分支语句流程控制流程控制语句分类 顺序结构：从上到下，从左到右； 分支结构：if switch语句； 循环结构：for循环，while，do …while循环； If语句//格式1 if(关系表达式){ 语句体； } //格式2 if(关系表达式){ 语句体1; }else{ 语句体2; } //格式3 if(关系表达式1){ 语句体1; }else if(关系表达式2){ 语句体2; }else if(关系表达式3){ 语句体3; }else{ 语句体n+1; } 执行流程： 格式1： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体； 如果关系表达式的值为false就不执行语句体； 继续执行后面的语句内容； 格式2： 首先计算关系表达式1的值； 如果值为true就执行语句体1，值为false就执行语句体2； 继续执行后面的语句内容； 格式3： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体1； 如果关系表达式的值为false就执行关系表达式2； 如果关系表达式的值为true就执行语句体2； 如果关系表达式的值为false就执行关系表达式3； … 如果没有任何 关系表达式为true，就执行语句体n+1； ==注意：数据测试时，选择正确数据，边界数据，错误数据；== switch语句//格式 switch(表达式){ case 值1: 语句体1; break; case 值2: 语句体2; break; case 值3: 语句体3; break; default: 语句体n+1; [break;] } 说明： 表达式：取值为byte，short，int，char，JDK5以后可以是枚举，JDK7以后可以是String。 case：后面跟的是要和表达式进行比较的值； break：表示中断，结束的意思，用来结束switch语句； default：表示所有情况都不匹配的时候，就执行该处的内容，和If语句的else相似； 注意： ==在switch语句中，如果case控制的语句体后面不写break，将出现穿透现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束；== 循环结构循环结构的组成 初始化语句； 条件判断语句；boolean类型 循环体语句； 条件控制语句； for循环语句格式//格式 for(初始化语句;条件判断语句;条件控制语句){ 循环体语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是否是true还是false； 如果是false，循环结束。 如果是true，继续执行。 执行循环体语句； 执行条件控制语句； 回到2继续； 案例：水仙花数：任意数字的指定位上的数值如何求 ==先使用整除操作将要求的数字移动到个位上，在使用取余操作取出最后一位上的值== 例如：1234==5==679 先整除10000得到12345，再对10取余得到5； while 循环语句//格式 初始化语句 while(条件判断语句){ 循环体语句; 条件控制语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是true还是false； 如果是true，继续执行； 如果是false，循环结束； 执行循环体语句； 执行条件控制语句； 回到2继续； do while 循环语句//格式 初始化语句; do{ 循环体语句; 条件控制语句; }while(条件判断语句); 执行流程： 执行初始化语句； 执行循环体语句； 执行条件控制语句； 执行条件判断语句，看结果是true还是false； 如果是false，循环结束； 如果是true，继续执行； 回到2继续； 三种循环的区别： for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for和while的区别： 条件控制语句所控制的自增变量，因为归属for循环的语法结构，在for循环结束后，就不能再次被访问了。 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用。 条件控制语句 continue 用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行； break 用在循环中，基于条件控制，终止循环体内容的执行，也就是结束当前的整个循环； 循环嵌套循环里嵌套循环，内层循环看成一个语句体； RandomRandom的作用和使用步骤作用：用于产生一个随机数 使用步骤： ​ 1.导包 import java.util.Random //导包的动作必须出现在类定义的上面； ​ 2.创建对象 Random r = new Random(); //上面这个格式里面，r是变量名，可以变，其他的都不允许变； ​ 3.获取随机数 int number = r.nextInt(10);//获取数据的范围：[0,10)包括0，不包括10 //上面这个格式里面，number是变量名，可以变，数字10可以变，其他的都不允许变","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}],"author":"SakuraMuxia"}],"categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"PPP","slug":"PPP","permalink":"http://sakuramuxia.github.io/tags/PPP/"},{"name":"NAT","slug":"NAT","permalink":"http://sakuramuxia.github.io/tags/NAT/"},{"name":"ACL","slug":"ACL","permalink":"http://sakuramuxia.github.io/tags/ACL/"},{"name":"DHCP","slug":"DHCP","permalink":"http://sakuramuxia.github.io/tags/DHCP/"},{"name":"STP","slug":"STP","permalink":"http://sakuramuxia.github.io/tags/STP/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"GVRP","slug":"GVRP","permalink":"http://sakuramuxia.github.io/tags/GVRP/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"交换","slug":"交换","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"},{"name":"ARP","slug":"ARP","permalink":"http://sakuramuxia.github.io/tags/ARP/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}]}